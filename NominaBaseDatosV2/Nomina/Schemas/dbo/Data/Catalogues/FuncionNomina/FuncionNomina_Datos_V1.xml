<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd">

<changeSet author="rsabogal" id="FuncionNomina_Datos_V1">
<sql endDelimiter="\nGO" splitStatements="true">
<![CDATA[
SET IDENTITY_INSERT [dbo].[FuncionNomina] ON 
GO

INSERT INTO dbo.FuncionNomina (Id, Nombre, Alias, Ayuda, Proceso, TipoFuncion, EstadoRegistro, CreadoPor, FechaCreacion, FuncionParametro) VALUES(1, 'Sueldo básico', 'SUELDO_BASICO', 'Devuelve el sueldo del funcionario establecido en el contrato u otrosí vigente para el periodo de liquidación.', '[dbo].[UFS_ObtenerSueldo]', 'UFS', 'Activo    ', 'sistema', GETDATE(), '[dbo].[UFS_ObtenerSueldo]({{FuncionarioId}},{{NominaFechaFinal}},{{BanderaFija}})');
INSERT INTO dbo.FuncionNomina (Id, Nombre, Alias, Ayuda, Proceso, TipoFuncion, EstadoRegistro, CreadoPor, FechaCreacion, FuncionParametro) VALUES(2, 'Días a pagar periodo liquidación', 'DIAS_PAGAR_PERIODO_LIQ', 'Devuelve la cantidad de días de un funcionario en el periodo de liquidación menos los ausentismos que afecten días a pagar.', '[dbo].[USP_ObtenerDiasApagar]', 'USP', 'Activo    ', 'sistema', GETDATE(), '[dbo].[USP_ObtenerDiasApagar] @FuncionarioId = {{FuncionarioId}}, @FechaInicial = {{NominaFechaInicio}}, @FechaFinal={{NominaFechaFinal}}, @Cantidad = {{Cantidad}} OUTPUT');
INSERT INTO dbo.FuncionNomina (Id, Nombre, Alias, Ayuda, Proceso, TipoFuncion, EstadoRegistro, CreadoPor, FechaCreacion, FuncionParametro) VALUES(4, 'Salario mínimo actual', 'SALARIO_MINIMO_ACTUAL', 'Devuelve el valor del salario mínimo mensual legal vigente', '[util].[UFS_ObtenerParametro]', 'UFS', 'Activo    ', 'sistema', GETDATE(), '[util].[UFS_ObtenerParametro]({{ParametroAlias}})');
INSERT INTO dbo.FuncionNomina (Id, Nombre, Alias, Ayuda, Proceso, TipoFuncion, EstadoRegistro, CreadoPor, FechaCreacion, FuncionParametro) VALUES(5, 'Auxilio de transporte', 'AUXILIO_TRANSPORTE_ACTUAL', 'Devuelve el valor del auxilio de transporte legal vigente', '[util].[UFS_ObtenerParametro]', 'UFS', 'Activo    ', 'sistema', GETDATE(), '[util].[UFS_ObtenerParametro]({{ParametroAlias}})');
INSERT INTO dbo.FuncionNomina (Id, Nombre, Alias, Ayuda, Proceso, TipoFuncion, EstadoRegistro, CreadoPor, FechaCreacion, FuncionParametro) VALUES(6, 'Salario Básico', 'SALARIO_BASICO', 'Función que se encarga de traer el sueldo básico del funcionario cuando el funcionario en una quincena tiene mas de un aumento de sueldo.', '[dbo].[USP_ObtenerSueldoBasico]', 'USP', 'Activo    ', 'sistema', GETDATE(), '[dbo].[USP_ObtenerSueldoBasico] @FuncionarioId = {{FuncionarioId}},@NominaId = {{NominaId}},@Valor = {{Valor}} OUTPUT');
INSERT INTO dbo.FuncionNomina (Id, Nombre, Alias, Ayuda, Proceso, TipoFuncion, EstadoRegistro, CreadoPor, FechaCreacion, FuncionParametro) VALUES(7, 'Valor del concepto', 'VALOR_CONCEPTO', 'Obtiene el valor del concepto en el que se encuentre ingresado', '[dbo].[USP_ObtenerValorConceptoNomina]', 'USP', 'Activo    ', 'sistema', GETDATE(), '[dbo].[USP_ObtenerValorConceptoNomina] @FuncionarioId = {{FuncionarioId}},@NominaId = {{NominaId}},@AliasConcepto = {{ConceptoAlias}},@NominaDetalleId = {{NominaDetalleId}},@Valor = {{Valor}} OUTPUT');
INSERT INTO dbo.FuncionNomina (Id, Nombre, Alias, Ayuda, Proceso, TipoFuncion, EstadoRegistro, CreadoPor, FechaCreacion, FuncionParametro) VALUES(8, 'Cantidad del concepto', 'CANTIDAD_CONCEPTO', 'Obtiene la cantidad ingresada en la novedad del mismo concepto para realizar el cálculo de la fórmula.', '[dbo].[USP_ObtenerCantidadConceptoNomina]', 'USP', 'Activo    ', 'sistema', GETDATE(), '[dbo].[USP_ObtenerCantidadConceptoNomina] @FuncionarioId = {{FuncionarioId}},@NominaId = {{NominaId}},@AliasConcepto = {{ConceptoAlias}},@NominaDetalleId = {{NominaDetalleId}},@Cantidad = {{Cantidad}} OUTPUT');
INSERT INTO dbo.FuncionNomina (Id, Nombre, Alias, Ayuda, Proceso, TipoFuncion, EstadoRegistro, CreadoPor, FechaCreacion, FuncionParametro) VALUES(9, 'Obtener Salario en el mes', 'SALARIO_MES', 'Obtiene el valor del salario del funcionario en el periodo en curso', '[dbo].[USP_ObtenerValorConceptoNominaAcumulado]', 'USP', 'Activo    ', 'sistema', GETDATE(), '[dbo].[USP_ObtenerValorConceptoNominaAcumulado] @FuncionarioId = {{FuncionarioId}},@ConceptoAlias = {{ConceptoAlias}},@FechaInicio ={{FechaInicioMes}},@FechaFin = {{FechaFinalMes}},@Valor ={{Valor}} OUTPUT');
INSERT INTO dbo.FuncionNomina (Id, Nombre, Alias, Ayuda, Proceso, TipoFuncion, EstadoRegistro, CreadoPor, FechaCreacion, FuncionParametro) VALUES(10, 'Calcular embargo del funcionario', 'CALCULAR_EMBARGO', 'Función que se utiliza para calcular el valor de un embargo.', '[dbo].[USP_CalcularValorNovedadEmbargo]', 'USP', 'Activo    ', 'sistema', GETDATE(), '[dbo].[USP_CalcularValorNovedadEmbargo] @NominaId = {{NominaId}},@FuncionarioId = {{FuncionarioId}},@NominaDetalleId = {{NominaDetalleId}},@Valor ={{Valor}} OUTPUT,@Inconsistencia = {{Inconsistencia}} OUTPUT');
INSERT INTO dbo.FuncionNomina (Id, Nombre, Alias, Ayuda, Proceso, TipoFuncion, EstadoRegistro, CreadoPor, FechaCreacion, FuncionParametro) VALUES(11, 'Base IBC Mes', 'IBC_MES_ACTUAL', 'Obtiene la suma de los IBC del periodo en curso', '[dbo].[USP_ObtenerValorConceptoNominaAcumulado]', 'USP', 'Activo    ', 'sistema', GETDATE(), '[dbo].[USP_ObtenerValorConceptoNominaAcumulado] @FuncionarioId = {{FuncionarioId}},@ConceptoAlias = {{ConceptoAlias}},@FechaInicio ={{FechaInicioMes}},@FechaFin = {{FechaFinalMes}},@Valor ={{Valor}} OUTPUT');
INSERT INTO dbo.FuncionNomina (Id, Nombre, Alias, Ayuda, Proceso, TipoFuncion, EstadoRegistro, CreadoPor, FechaCreacion, FuncionParametro) VALUES(12, 'Base IBC Mes anterior', 'IBC_MES_ANTERIOR', 'Obtiene el IBC mensual del mes anterior a la liquidación de la nómina en curso', '[dbo].[USP_ObtenerValorConceptoNominaAcumulado]', 'USP', 'Activo    ', 'sistema', GETDATE(), '[dbo].[USP_ObtenerValorConceptoNominaAcumulado] @FuncionarioId = {{FuncionarioId}},@ConceptoAlias = {{ConceptoAlias}},@FechaInicio ={{FechaInicioMesAnterior}},@FechaFin = {{FechaFinalMesAnterior}},@Valor ={{Valor}} OUTPUT');
INSERT INTO dbo.FuncionNomina (Id, Nombre, Alias, Ayuda, Proceso, TipoFuncion, EstadoRegistro, CreadoPor, FechaCreacion, FuncionParametro) VALUES(13, 'Días a pagar mes liquidación', 'DIAS_PAGAR_MES_LIQ', 'Devuelve la cantidad de días de un funcionario en el mes que se está liquidando menos los ausentismos que afecten días trabajados.', '[dbo].[USP_ObtenerDiasApagar]', 'USP', 'Activo    ', 'sistema', GETDATE(), '[dbo].[USP_ObtenerDiasApagar] @FuncionarioId = {{FuncionarioId}}, @FechaInicial = {{FechaInicioMes}}, @FechaFinal={{FechaFinalMes}}, @Cantidad = @Cantidad OUTPUT');
INSERT INTO dbo.FuncionNomina (Id, Nombre, Alias, Ayuda, Proceso, TipoFuncion, EstadoRegistro, CreadoPor, FechaCreacion, FuncionParametro) VALUES(14, 'Base primas y cesantías', 'BASE_PRIMA_CESANTIAS_MES', 'Obtiene la suma de las bases de prima legal en el periodo en curso.', '[dbo].[USP_ObtenerValorConceptoNominaAcumulado]', 'USP', 'Activo    ', 'sistema', GETDATE(), '[dbo].[USP_ObtenerValorConceptoNominaAcumulado] @FuncionarioId = {{FuncionarioId}},@ConceptoAlias = {{ConceptoAlias}},@FechaInicio ={{FechaInicioMes}},@FechaFin = {{FechaFinalMes}},@Valor ={{Valor}} OUTPUT');
INSERT INTO dbo.FuncionNomina (Id, Nombre, Alias, Ayuda, Proceso, TipoFuncion, EstadoRegistro, CreadoPor, FechaCreacion, FuncionParametro) VALUES(15, 'Base vacaciones', 'BASE_VACACIONES_MES', 'Obtiene la suma de las bases de vacaciones en el periodo en curso.', '[dbo].[USP_ObtenerValorConceptoNominaAcumulado]', 'USP', 'Activo    ', 'sistema', GETDATE(), '[dbo].[USP_ObtenerValorConceptoNominaAcumulado] @FuncionarioId = {{FuncionarioId}},@ConceptoAlias = {{ConceptoAlias}},@FechaInicio ={{FechaInicioMes}},@FechaFin = {{FechaFinalMes}},@Valor ={{Valor}} OUTPUT');
INSERT INTO dbo.FuncionNomina (Id, Nombre, Alias, Ayuda, Proceso, TipoFuncion, EstadoRegistro, CreadoPor, FechaCreacion, FuncionParametro) VALUES(16, 'Base parafiscales', 'BASE_PARAFISCALES_MES', 'Obtiene la suma de las bases de parafiscales en el periodo en curso.', '[dbo].[USP_ObtenerValorConceptoNominaAcumulado]', 'USP', 'Activo    ', 'sistema', GETDATE(), '[dbo].[USP_ObtenerValorConceptoNominaAcumulado] @FuncionarioId = {{FuncionarioId}},@ConceptoAlias = {{ConceptoAlias}},@FechaInicio ={{FechaInicioMes}},@FechaFin = {{FechaFinalMes}},@Valor ={{Valor}} OUTPUT');
INSERT INTO dbo.FuncionNomina (Id, Nombre, Alias, Ayuda, Proceso, TipoFuncion, EstadoRegistro, CreadoPor, FechaCreacion, FuncionParametro) VALUES(17, 'Clase de contrato del funcionario', 'CLASE_CONTRATO_FUNCIONARIO', 'La clase de contrato se encuentra vinculada al tipo de contrato del funcionario.  Las clases de contrato son No integral, Integral, Aprendizaje y Practicante', '[dbo].[UFS_ObtenerClaseContratoFuncionario]', 'UFS', 'Activo    ', 'sistema', GETDATE(), '[dbo].[UFS_ObtenerClaseContratoFuncionario]({{FuncionarioId}})');
INSERT INTO dbo.FuncionNomina (Id, Nombre, Alias, Ayuda, Proceso, TipoFuncion, EstadoRegistro, CreadoPor, FechaCreacion, FuncionParametro) VALUES(18, 'Constante contrato no integral', 'CLASE_CONTRATO_NO_INTEGRAL', 'Indica el parámetro establecido para que el tipo de contrato sea no integral', '[dbo].[UFS_ObtenerClaseContrato]', 'UFS', 'Activo    ', 'sistema', GETDATE(), '[dbo].[UFS_ObtenerClaseContrato]({{Constante}})');
INSERT INTO dbo.FuncionNomina (Id, Nombre, Alias, Ayuda, Proceso, TipoFuncion, EstadoRegistro, CreadoPor, FechaCreacion, FuncionParametro) VALUES(19, 'Constante contrato integral', 'CLASE_CONTRATO_INTEGRAL', 'Indica el parámetro establecido para que el tipo de contrato sea integral', '[dbo].[UFS_ObtenerClaseContrato]', 'UFS', 'Activo    ', 'sistema', GETDATE(), '[dbo].[UFS_ObtenerClaseContrato]({{Constante}})');
INSERT INTO dbo.FuncionNomina (Id, Nombre, Alias, Ayuda, Proceso, TipoFuncion, EstadoRegistro, CreadoPor, FechaCreacion, FuncionParametro) VALUES(20, 'Constante contrato aprendizaje', 'CLASE_CONTRATO_APRENDIZAJE', 'Indica el parámetro establecido para que el tipo de contrato de aprendizaje', '[dbo].[UFS_ObtenerClaseContrato]', 'UFS', 'Activo    ', 'sistema', GETDATE(), '[dbo].[UFS_ObtenerClaseContrato]({{Constante}})');
INSERT INTO dbo.FuncionNomina (Id, Nombre, Alias, Ayuda, Proceso, TipoFuncion, EstadoRegistro, CreadoPor, FechaCreacion, FuncionParametro) VALUES(21, 'Constante contrato practicante', 'CLASE_CONTRATO_PRACTICANTE', 'Indica el parámetro establecido para que el tipo de contrato sea practicante', '[dbo].[UFS_ObtenerClaseContrato]', 'UFS', 'Activo    ', 'sistema', GETDATE(), '[dbo].[UFS_ObtenerClaseContrato]({{Constante}})');
INSERT INTO dbo.FuncionNomina (Id, Nombre, Alias, Ayuda, Proceso, TipoFuncion, EstadoRegistro, CreadoPor, FechaCreacion, FuncionParametro) VALUES(22, 'Inconsistencia salario integral', 'INCONSISTENCIA_SALARIO_INTEGRAL', 'Genera una inconsistenca en el cálculo del concepto cuando el salario integral es inferior a 13 SMLV.', '[dbo].[USP_NotificarInconsistenciaCalculoConcepto]', 'USP', 'Activo    ', 'sistema', GETDATE(), '[dbo].[USP_NotificarInconsistenciaCalculoConcepto] @Codigo = {{Constante}}, @Valor = {{Valor}} OUTPUT,@Inconsistencia {{Inconsistencia}} OUTPUT');
INSERT INTO dbo.FuncionNomina (Id, Nombre, Alias, Ayuda, Proceso, TipoFuncion, EstadoRegistro, CreadoPor, FechaCreacion, FuncionParametro) VALUES(23, 'Obtener neto a pagar parcial', 'NETO_CORTE', 'Obtiene el valor neto a pagar del funcionario sumando solo los conceptos ya liquidados en la nómina.', '[dbo].[USP_ObtenerNetoPagarParcial]', 'USP', 'Activo    ', 'sistema', GETDATE(), '[dbo].[USP_ObtenerNetoPagarParcial] @NominaFuncionarioId = {{NominaFuncionarioId}}, @Valor = @Valor OUTPUT');
INSERT INTO dbo.FuncionNomina (Id, Nombre, Alias, Ayuda, Proceso, TipoFuncion, EstadoRegistro, CreadoPor, FechaCreacion, FuncionParametro) VALUES(24, 'Funcionario está pensionado', 'FUNCIONARIO_PENSIONADO', 'Obtiene el valor que indica si el funcionario se encuentra o no pensionado. Los valores son SI y NO..', '[dbo].[UFS_DeterminarFuncionarioEsPensionado]', 'UFS', 'Activo    ', 'sistema', GETDATE(), '[dbo].[UFS_ObtenerFuncionarioPensionado]({{@FuncionarioId}})');
INSERT INTO dbo.FuncionNomina (Id, Nombre, Alias, Ayuda, Proceso, TipoFuncion, EstadoRegistro, CreadoPor, FechaCreacion, FuncionParametro) VALUES(25, 'Obtener constante verdadero', 'ES_VERDADERO', 'Función para pruebas lógicas, retorna la constante asociada al valor verdadero.', '[dbo].[UFS_ObtenerConstanteBooleana]', 'UFS', 'Activo    ', 'sistema', GETDATE(), '[dbo].[UFS_ObtenerValorVerdadero]()');
INSERT INTO dbo.FuncionNomina (Id, Nombre, Alias, Ayuda, Proceso, TipoFuncion, EstadoRegistro, CreadoPor, FechaCreacion, FuncionParametro) VALUES(26, 'Obtener constante falso', 'ES_FALSO', 'Función para pruebas lógicas, retorna la constante asociada al valor falso.', '[dbo].[UFS_ObtenerConstanteBooleana]', 'UFS', 'Activo    ', 'sistema', GETDATE(), '[dbo].[UFS_ObtenerValorFalso]()');
INSERT INTO dbo.FuncionNomina (Id, Nombre, Alias, Ayuda, Proceso, TipoFuncion, EstadoRegistro, CreadoPor, FechaCreacion, FuncionParametro) VALUES(27, 'Obtener % de riesgo laboral', 'RIESGO_PROFESIONAL', 'Obtiene el valor del porcentaje de riesgo parametrizado en el centro de trabajo de cada funcionario.', '[dbo].[UFS_ObtenerRiesgoProfesionalFuncionario]', 'UFS', 'Activo    ', 'sistema', GETDATE(), '[dbo].[UFS_ObtenerRiesgoProfesionalFuncionario]({{@FuncionarioId}})');
INSERT INTO dbo.FuncionNomina (Id, Nombre, Alias, Ayuda, Proceso, TipoFuncion, EstadoRegistro, CreadoPor, FechaCreacion, FuncionParametro) VALUES(28, 'Inconsistencia genérica', 'INCONSISTENCIA_GENERICA', 'Marca en el detalle de la nómina que el concepto no se pudo liquidar e indica la razón.', '[dbo].[USP_NotificarInconsistenciaCalculoConcepto]', 'USP', 'Activo    ', 'sistema', GETDATE(), '[dbo].[USP_NotificarInconsistenciaCalculoConcepto] @Codigo = {{Constante}}, @Valor = {{Valor}} OUTPUT, @Inconsistencia = {{Inconsistencia}} OUTPUT');
INSERT INTO dbo.FuncionNomina (Id, Nombre, Alias, Ayuda, Proceso, TipoFuncion, EstadoRegistro, CreadoPor, FechaCreacion, FuncionParametro) VALUES(29, 'Días a cotizar mes liquidación', 'DIAS_COTIZAR_MES_LIQ', 'Devuelve la cantidad de días de un funcionario en el mes que se está liquidando y que se deben reportar a seguridad social y provisiones.', '[dbo].[USP_ObtenerDiasACotizar]', 'USP', 'Activo    ', 'sistema', GETDATE(), '[dbo].[USP_ObtenerDiasACotizar] @FuncionarioId = {{FuncionarioId}}, @FechaInicial = {{FechaInicioMes}}, @FechaFinal={{FechaFinalMes}}, @Cantidad = @Cantidad OUTPUT');

GO
SET IDENTITY_INSERT [dbo].[FuncionNomina] OFF
]]>
</sql>

<rollback>
<![CDATA[
DELETE FROM [dbo].[FuncionNomina] WHERE Id BETWEEN 1 AND 29;
]]>
</rollback>
</changeSet>
</databaseChangeLog>