<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd">

<changeSet author="dvillega" id="USP_ProcesarNovedadesEmbargos_V1">
<comment>HU057</comment>
<sql endDelimiter="GO" splitStatements="true">
<![CDATA[
IF OBJECT_ID('dbo.USP_ProcesarNovedadesEmbargos', 'P') IS NULL
BEGIN
    EXECUTE ('CREATE PROCEDURE dbo.USP_ProcesarNovedadesEmbargos as SELECT 1');
END;
GO
-- ==========================================================================================
-- Author:      Diego Fernando Villegas Flórez
-- Create date: 24/04/2020
-- Description: Pemite procesar las novedades del funcionario del módulo de embargos
--			 al aprobar la nómina
--
-- Parameters:
--  @NominaId:			   Identificador de la nómina a la que va a vincular la novedad
--  @UsuarioOperacion:	   Usuario que realiza la operación
-- ==========================================================================================

ALTER PROCEDURE [dbo].[USP_ProcesarNovedadesEmbargos] @NominaId         INT, 
                                                      @UsuarioOperacion VARCHAR(255)
AS
    BEGIN

        --------------------------------------------------------------------------
        -- Instrucciones de configuración y manejo de errores
        --------------------------------------------------------------------------
        SET XACT_ABORT, NOCOUNT, ANSI_NULLS, QUOTED_IDENTIFIER ON;
        DECLARE @Parametros VARCHAR(MAX)= CONCAT('@NominaId=', CONVERT(VARCHAR, @NominaId), '&', '@UsuarioOperacion=', CONVERT(VARCHAR, @UsuarioOperacion));
        DECLARE @NombreObjeto VARCHAR(255)= OBJECT_NAME(@@PROCID);
        DECLARE @MensajeExcepcion VARCHAR(255);

        --------------------------------------------------------------------------
        -- Variables
        --------------------------------------------------------------------------
        DECLARE @EmbargoPendiente VARCHAR(255);
        DECLARE @EmbargoTerminado VARCHAR(255);
        DECLARE @EmbargoVigente VARCHAR(255);
        DECLARE @AuditoriaActivo VARCHAR(255);
        DECLARE @NominaAplicada VARCHAR(255);
        DECLARE @NovedadId INT;
        DECLARE @NovedadValor MONEY;
        DECLARE @ModuloSistema VARCHAR(255)=
        (
            SELECT cms.EMBARGOS
            FROM util.VW_ConstanteModuloSistema AS cms
        );
        DECLARE @EmbargoValor MONEY;
        DECLARE @EmbargoTotalPagado MONEY = 0;
        DECLARE @FuncionarioId INT;
        DECLARE @EmbargoNuevoId INT;

        --------------------------------------------------------------------------
        -- Proceso
        --------------------------------------------------------------------------
        BEGIN TRY

            -- Inicio de la transacción
            BEGIN TRAN ProcesarNovedades;

            -- Se consultan estado
            SELECT @AuditoriaActivo = vce.AUDITORIA_ACTIVO, 
                   @EmbargoTerminado = vce.EMBARGO_TERMINADO, 
                   @EmbargoVigente = vce.EMBARGO_VIGENTE, 
                   @EmbargoPendiente = vce.EMBARGO_PENDIENTE, 
                   @NominaAplicada = vce.NOMINA_APLICADA
            FROM util.VW_ConstanteEstado AS vce;

            -- Cursor para obtener los embargos de la nómina
            DECLARE CUR_Embargos CURSOR LOCAL
            FOR SELECT nfn.ModuloRegistroId, 
                       nfu.FuncionarioId, 
                       SUM(nde.Valor) ValorTotal
                FROM dbo.Nomina AS nom
                     INNER JOIN dbo.NominaFuncionario AS nfu ON(nom.Id = nfu.NominaId)
                     INNER JOIN dbo.NominaDetalle AS nde ON(nfu.Id = nde.NominaFuncionarioId)
                     INNER JOIN dbo.NominaFuenteNovedad AS nfn ON(nde.NominaFuenteNovedadId = nfn.Id)
                WHERE nom.Id = @NominaId
                      AND nfn.Modulo = @ModuloSistema
                      AND nfu.EstadoRegistro = @AuditoriaActivo
                      AND nde.EstadoRegistro = @AuditoriaActivo
                GROUP BY nfn.ModuloRegistroId, 
                         nfu.FuncionarioId;
            OPEN CUR_Embargos;
            FETCH NEXT FROM CUR_Embargos INTO @NovedadId, @FuncionarioId, @NovedadValor;
            WHILE @@FETCH_STATUS = 0
                BEGIN

                    -- Se consulta si el embargo tiene definido un valor
                    SELECT @EmbargoValor = emb.ValorEmbargo
                    FROM dbo.Embargo AS emb
                    WHERE emb.Id = @NovedadId;
                    PRINT CONCAT('@EmbargoValor= ', @EmbargoValor);

                    -- Si existe el valor del embargo se consulta el total de pagos asociados al embargo
                    IF @EmbargoValor IS NOT NULL
                        BEGIN
                            SELECT @EmbargoTotalPagado = isnull(SUM(nde.Valor), 0)
                            FROM dbo.Nomina AS nom
                                 INNER JOIN dbo.NominaFuncionario AS nfu ON(nom.Id = nfu.NominaId)
                                 INNER JOIN dbo.NominaDetalle AS nde ON(nfu.Id = nde.NominaFuncionarioId)
                                 INNER JOIN dbo.NominaFuenteNovedad AS nfn ON(nde.NominaFuenteNovedadId = nfn.Id)
                            WHERE nfn.Modulo = @ModuloSistema
                                  AND nfn.ModuloRegistroId = @NovedadId
                                  AND nom.Estado = @NominaAplicada
                                  AND nfu.EstadoRegistro = @AuditoriaActivo
                                  AND nde.EstadoRegistro = @AuditoriaActivo;
                            -- Se le suma a lo pagado en nóminas aplicadas lo de esta nómina
                            SET @EmbargoTotalPagado = @EmbargoTotalPagado + @NovedadValor;

							PRINT CONCAT('@EmbargoTotalPagado= ', @EmbargoTotalPagado);
                            IF @EmbargoValor <= @EmbargoTotalPagado
                                BEGIN
                                    UPDATE dbo.Embargo
                                      SET 
                                          Estado = @EmbargoTerminado, 
                                          ModificadoPor = @UsuarioOperacion, 
                                          FechaModificacion = GETDATE()
                                    WHERE Id = @NovedadId;

                                    -- Se busca si el funcionario tiene algún embargo en estado pendiente para dejarlo como vigente
                                    SELECT TOP 1 @EmbargoNuevoId = emb.Id
                                    FROM dbo.Embargo AS emb
                                    WHERE emb.FuncionarioId = @FuncionarioId
                                          AND emb.Estado = @EmbargoPendiente
                                          AND emb.EstadoRegistro <> 'Eliminado'
                                    ORDER BY emb.Prioridad ASC;
                                    IF @EmbargoNuevoId IS NOT NULL
                                        BEGIN
                                            UPDATE dbo.Embargo
                                              SET 
                                                  Estado = @EmbargoVigente, 
                                                  ModificadoPor = @UsuarioOperacion, 
                                                  FechaModificacion = GETDATE()
                                            WHERE Id = @EmbargoNuevoId;
                                        END;
                                END;
                        END;
                    FETCH NEXT FROM CUR_Embargos INTO @NovedadId, @FuncionarioId, @NovedadValor;
                END;
            CLOSE CUR_Embargos;
            DEALLOCATE CUR_Embargos;

            -- Cierre de la transacción
            IF @@TRANCOUNT > 0
                BEGIN
                    IF XACT_STATE() = 1
                        BEGIN
                            COMMIT TRAN ProcesarNovedades;
                        END;
                        ELSE
                        BEGIN
                            EXEC util.USP_GenerarExcepcion 
                                 50000, 
                                 'No se puede confirmar la transacción.  Error desconocido.';
                        END;
                END;
        END TRY
        BEGIN CATCH

            -- Rollback de la transacción
            IF XACT_STATE() <> 0
               AND @@TRANCOUNT > 0
                BEGIN
                    ROLLBACK;
                END;

            -- Se almacena la información del error
            EXEC util.USP_Registrarerror 
                 @NombreObjeto, 
                 @Parametros;

            -- Se lanza la excepción
            EXEC util.USP_LanzarExcepcion;
        END CATCH;
    END;
GO
]]>
</sql>
<rollback>
<sql endDelimiter="GO" splitStatements="true">
<![CDATA[
DROP PROCEDURE [dbo].[USP_ProcesarNovedadesEmbargos];
]]>
</sql>
</rollback>
</changeSet>

</databaseChangeLog>