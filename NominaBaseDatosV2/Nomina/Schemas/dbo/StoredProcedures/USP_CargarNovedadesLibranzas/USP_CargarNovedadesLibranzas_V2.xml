<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd">

<changeSet author="lestrada" id="USP_CargarNovedadesLibranzas_V2">
<comment>Cambio función obtener parámetro general</comment>
<sql endDelimiter="GO" splitStatements="true">
<![CDATA[
IF OBJECT_ID('dbo.USP_CargarNovedadesLibranzas', 'P') IS NULL
BEGIN
    EXECUTE ('CREATE PROCEDURE dbo.USP_CargarNovedadesLibranzas as SELECT 1');
END;
GO
-- ==========================================================================================
-- Author:      Laura Katherine Estrada Arango
-- Create date: 31/03/2020
-- Description: Pemite cargar las novedades del funcionario para el módulo de libranza
--
-- Parameters:
--  @NominaId:			Identificador de la nómina
--  @FuncionarioId:		Identificador del funcionario
--  @SubperiodoId:		Identificador del subperíodo
--  @Id				   Identificador de la novedad a cargar
--	@UsuarioOperacion : Usuario que realiza la operación.
-- ==========================================================================================

ALTER PROCEDURE [dbo].[USP_CargarNovedadesLibranzas] @NominaId         INT,
                                                 @FuncionarioId    INT,
                                                 @SubperiodoId     INT,
									    @Id			    INT,
                                                 @UsuarioOperacion VARCHAR(255)
AS
BEGIN

    --------------------------------------------------------------------------
    -- Instrucciones de configuración y manejo de errores
    --------------------------------------------------------------------------
    SET XACT_ABORT, NOCOUNT, ANSI_NULLS, QUOTED_IDENTIFIER ON;
    DECLARE @Parametros VARCHAR(MAX)= CONCAT('@NominaId=', CONVERT(VARCHAR, @NominaId), '&', '@FuncionarioId=', CONVERT(VARCHAR, @FuncionarioId), '&', '@SubperiodoId=', CONVERT(VARCHAR, @SubperiodoId), '&', '@UsuarioOperacion=', CONVERT(VARCHAR, @UsuarioOperacion));
    DECLARE @NombreObjeto VARCHAR(255)= OBJECT_NAME(@@PROCID);
    DECLARE @MensajeExcepcion VARCHAR(255);

    --------------------------------------------------------------------------
    -- Variables
    --------------------------------------------------------------------------
    DECLARE @NominaFuncionarioId INT;
    DECLARE @LibranzaVigente VARCHAR(255)=
    (
        SELECT ces.LIBRANZA_VIGENTE
        FROM util.VW_ConstanteEstado AS ces
    );
    DECLARE @AuditoriaActivo VARCHAR(255)=
    (
        SELECT ces.AUDITORIA_ACTIVO
        FROM util.VW_ConstanteEstado AS ces
    );
    DECLARE @LibranzaId INT= 0;
    DECLARE @ParametroConceptoDescuento VARCHAR(255)=
    (
        SELECT cpg.CONCEPTODESCUENTOLIBRANZA
        FROM util.VW_ConstanteParametroGeneral AS cpg
    );
    DECLARE @ValorCuota MONEY= 0;
    DECLARE @Cantidad INT= 1;
    DECLARE @UnidadMedida VARCHAR(255)=
    (
        SELECT cum.[UNIDAD]
        FROM util.VW_ConstanteUnidadMedida AS cum
    );
    DECLARE @ConceptoNominaId INT= 0;
    DECLARE @NominaFuenteNovedadId INT= 0;
    DECLARE @ModuloSistema VARCHAR(255)=
    (
        SELECT cms.[LIBRANZAS]
        FROM util.VW_ConstanteModuloSistema AS cms
    );
	DECLARE @NominaDetallePendiente VARCHAR(255) = (
		SELECT vce.NOMINADETALLE_PENDIENTE 
		FROM util.VW_ConstanteEstado vce
	);
	DECLARE @NominaFechaFinal DATE;

    --------------------------------------------------------------------------
    -- Proceso
    --------------------------------------------------------------------------
    BEGIN TRY

        -- Inicio de la transacción
        BEGIN TRAN CargarNovedadesLibranzas;

        -- Consulta el ConceptoNomina para el descuento de  la libranza
        SELECT @ConceptoNominaId = con.Id
        FROM dbo.ConceptoNomina AS con
        WHERE con.Alias =
        (
            SELECT util.UFS_ObtenerParametro(UPPER(@ParametroConceptoDescuento),NULL)
        );

        IF @ConceptoNominaId IS NULL
           OR @ConceptoNominaId = 0
        BEGIN
            EXEC util.USP_GenerarExcepcion
                 50001,
                 'No existe el concepto de nómina para el descuento de libranzas.';
        END;
		
		-- Se consulta la información de la nómina
        SELECT @NominaFechaFinal = nom.FechaFinal
        FROM dbo.Nomina AS nom
        WHERE nom.Id = @NominaId;

        -- Cursor para obtener las libranzas asociadas al funcionario
        DECLARE CUR_Libranzas CURSOR LOCAL
        FOR SELECT nfu.Id,
                   lib.Id,
                   lib.ValorCuota
            FROM dbo.NominaFuncionario AS nfu
                 INNER JOIN dbo.Libranza AS lib ON(lib.FuncionarioId = nfu.FuncionarioId)
                 INNER JOIN dbo.LibranzaSubPeriodo AS lsu ON(lsu.LibranzaId = lib.Id)
            WHERE nfu.NominaId = @NominaId
                  AND nfu.FuncionarioId = @FuncionarioId
			   AND ((@Id IS NOT NULL AND lib.Id = @Id) OR (@Id IS NULL))
                  AND lib.Estado = @LibranzaVigente
				  AND lib.FechaInicio <= @NominaFechaFinal
                  AND lib.EstadoRegistro = @AuditoriaActivo
                  AND lsu.SubPeriodoId = @SubperiodoId
                  AND lsu.EstadoRegistro = @AuditoriaActivo;

        OPEN CUR_Libranzas;

        FETCH NEXT FROM CUR_Libranzas INTO @NominaFuncionarioId, @LibranzaId, @ValorCuota;

        WHILE @@FETCH_STATUS = 0

        BEGIN

            --- Inserta  NominaFuenteNovedad
            INSERT INTO [dbo].[NominaFuenteNovedad]
            ([EstadoRegistro],
             [CreadoPor],
             [FechaCreacion],
             [Modulo],
             [ModuloRegistroId]
            )
            VALUES
            (@AuditoriaActivo,
             @UsuarioOperacion,
             GETDATE(),
             @ModuloSistema,
             @LibranzaId
            );

            SET @NominaFuenteNovedadId =
            (
                SELECT SCOPE_IDENTITY()
            );

            -- Inserta NominaDetalle
            INSERT INTO [dbo].[NominaDetalle]
            ([EstadoRegistro],
             [CreadoPor],
             [FechaCreacion],
             [NominaFuncionarioId],
             [NominaFuenteNovedadId],
             [ConceptoNominaId],
             [UnidadMedida],
             [Cantidad],
             [Valor],
			 [Estado]
            )
            VALUES
            (@AuditoriaActivo,
             @UsuarioOperacion,
             GETDATE(),
             @NominaFuncionarioId,
             @NominaFuenteNovedadId,
             @ConceptoNominaId,
             @UnidadMedida,
             @Cantidad,
             @ValorCuota,
			 @NominaDetallePendiente
            );

            --PRINT 'Libranza id ' + CONVERT(VARCHAR, @LibranzaId);
            FETCH NEXT FROM CUR_Libranzas INTO @NominaFuncionarioId, @LibranzaId, @ValorCuota;
        END;

        CLOSE CUR_Libranzas;

        DEALLOCATE CUR_Libranzas;

        -- Cierre de la transacción
        IF @@TRANCOUNT > 0
        BEGIN
            IF XACT_STATE() = 1
            BEGIN
                COMMIT TRAN CargarNovedadesLibranzas;
            END;
            ELSE
            BEGIN
                EXEC util.USP_GenerarExcepcion
                     50000,
                     'No se puede confirmar la transacción.  Error desconocido.';
            END;
        END;
    END TRY
    BEGIN CATCH

        -- Rollback de la transacción
        IF XACT_STATE() <> 0
           AND @@TRANCOUNT > 0
        BEGIN
            ROLLBACK;
        END;

        -- Se almacena la información del error
        EXEC util.USP_Registrarerror
             @NombreObjeto,
             @Parametros;

        -- Se lanza la excepción
        EXEC util.USP_LanzarExcepcion;
    END CATCH;
END;
GO
]]>
</sql>
<rollback>
<sql endDelimiter="GO" splitStatements="true">
<![CDATA[
DROP PROCEDURE [dbo].[USP_CargarNovedadesLibranzas];
]]>
</sql>
</rollback>
</changeSet>

</databaseChangeLog>