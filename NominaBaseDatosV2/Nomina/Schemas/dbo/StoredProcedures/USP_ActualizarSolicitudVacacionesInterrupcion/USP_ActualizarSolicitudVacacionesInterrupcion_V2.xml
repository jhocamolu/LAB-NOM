<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd">

<changeSet author="lestrada" id="USP_ActualizarSolicitudVacacionesInterrupcion_V2">
<comment>Migración general</comment>
<sql endDelimiter="GO" splitStatements="true">
<![CDATA[
IF OBJECT_ID('dbo.USP_ActualizarSolicitudVacacionesInterrupcion', 'P') IS NULL
BEGIN
    EXECUTE ('CREATE PROCEDURE dbo.USP_ActualizarSolicitudVacacionesInterrupcion as SELECT 1');
END;
GO
-- =============================================
-- Author:		Laura Katherine Estrada Arango
-- Create date: 29/04/2020
-- Description:	Procedimiento almacenado, el cual se encarga de actualizar 
--				la información de la solicitud de vacaciones interrupciones
--
-- Parameters:
--  @Fecha:			        Fecha para la cual se hace el proceso
--  @UsuarioOperacion:	    Usuario que realiza la operación
--  @Alias:                 Alias - comando de la tarea programada
-- =============================================
ALTER PROCEDURE [dbo].[USP_ActualizarSolicitudVacacionesInterrupcion] @Fecha            DATE, 
                                                                      @UsuarioOperacion VARCHAR(255), 
                                                                      @Alias            VARCHAR(255)
AS
    BEGIN

        --------------------------------------------------------------------------
        -- Instrucciones de configuración y manejo de errores
        --------------------------------------------------------------------------
        SET XACT_ABORT, NOCOUNT, ANSI_NULLS, QUOTED_IDENTIFIER ON;
        DECLARE @Parametros VARCHAR(MAX)= CONCAT('@Fecha=', CONVERT(VARCHAR, @Fecha), '&', '@UsuarioOperacion=', CONVERT(VARCHAR, @UsuarioOperacion), '&', '@Alias=', CONVERT(VARCHAR, @Alias));
        DECLARE @NombreObjeto VARCHAR(256)= OBJECT_NAME(@@PROCID);

        --------------------------------------------------------------------------
        -- Variables
        --------------------------------------------------------------------------
        DECLARE @SolicitudVacacionesId INT;
        DECLARE @FechaInicio DATE;
        DECLARE @FechaFin DATE;
        DECLARE @FechaActual DATE= CONVERT(DATE, GETDATE());
        DECLARE @Estado VARCHAR(30);
		DECLARE @TareaProgramadaLogExitoso VARCHAR(255);
		DECLARE @TareaProgramadaLogFallido VARCHAR(255);
		DECLARE @Resultado VARCHAR(255) = '';
		DECLARE @RegistrosAfectados INT = 0;
		DECLARE @AuditoriaActivo VARCHAR(255);
		DECLARE @AusentismoAprobado VARCHAR(255);
		DECLARE @AusentismoProcesado VARCHAR(255);
		DECLARE @SolicitudVacacionesEnCurso VARCHAR(255);
		DECLARE @SolicitudVacacionesInterrumpida VARCHAR(255);  
        --------------------------------------------------------------------------
        -- Proceso
        --------------------------------------------------------------------------
        BEGIN TRY
            IF @Fecha IS NOT NULL
			BEGIN
                SET @FechaActual = @Fecha;
			END
            SELECT @TareaProgramadaLogExitoso = ces.TAREAPROGRAMADALOG_EXITOSO, 
                   @TareaProgramadaLogFallido = ces.TAREAPROGRAMADALOG_FALLIDO,
				   @AuditoriaActivo = ces.AUDITORIA_ACTIVO,
				   @AusentismoAprobado = ces.AUSENTISMO_APROBADO,
				   @AusentismoProcesado = ces.AUSENTISMO_PROCESADO,
				   @SolicitudVacacionesEnCurso = ces.SOLICITUDVACACIONES_ENCURSO,
				   @SolicitudVacacionesInterrumpida = ces.SOLICITUDVACACIONES_INTERRUMPIDA
            FROM util.VW_ConstanteEstado AS ces;
            IF(
            (
                SELECT EnEjecucion
                FROM dbo.TareaProgramada
                WHERE Alias = @Alias
            ) = 1)
                BEGIN
                    EXECUTE [dbo].[USP_TareaProgramadaLog] 
                            @UsuarioOperacion = @UsuarioOperacion, 
                            @Estado = @TareaProgramadaLogFallido, 
                            @Resultado = @Resultado, 
                            @Alias = @Alias;
            END;
                ELSE
                BEGIN
                    -- Inicio de la transacción
                    BEGIN TRAN SolicitudVacacionesInt;


					-- Actualiza el estado del la tarea programada
					UPDATE dbo.TareaProgramada
                      SET 
                          dbo.TareaProgramada.EnEjecucion = 1
                    WHERE Alias = @Alias;

                    -- Crea Cursor
                    DECLARE SolicitudVacacionesInterrupciones CURSOR LOCAL
                    FOR SELECT svi.SolicitudVacacionesId, 
                               auf.FechaInicio, 
                               auf.FechaFin, 
                               sov.Estado
                        FROM SolicitudVacacionesInterrupcion svi
                             INNER JOIN AusentismoFuncionario auf ON svi.FuncionarioAusentismoId = auf.Id
                             INNER JOIN SolicitudVacaciones sov ON sov.Id = svi.SolicitudVacacionesId
                        WHERE auf.EstadoRegistro = @AuditoriaActivo	
                              AND svi.EstadoRegistro = @AuditoriaActivo	
                              AND (auf.Estado = @AusentismoAprobado
                                   OR auf.Estado = @AusentismoProcesado
									);
                    OPEN SolicitudVacacionesInterrupciones;
                    FETCH NEXT FROM SolicitudVacacionesInterrupciones INTO @SolicitudVacacionesId, @FechaInicio, @FechaFin, @Estado;
                    WHILE @@fetch_status = 0
                        BEGIN

                            -- Actualiza cuando estado en curso
                            IF @Estado = @SolicitudVacacionesEnCurso
                                BEGIN
                                    IF @FechaInicio <= @FechaActual
                                        BEGIN
                                            -- Actualiza  estado de la solicitud a EnCurso
                                            UPDATE SolicitudVacaciones
                                              SET 
                                                  Estado = @SolicitudVacacionesInterrumpida	                                            WHERE Id = @SolicitudVacacionesId;
											SET @RegistrosAfectados = @RegistrosAfectados + 1;
                                    END;
                            END;

                            -- Actualiza cuando estado en curso
                            IF @Estado = @SolicitudVacacionesInterrumpida
                                BEGIN
                                    IF @FechaFin <= @FechaActual
                                        BEGIN
                                            -- Actualiza  estado de la solicitud a Terminada
                                            UPDATE SolicitudVacaciones
                                              SET 
                                                  Estado = @SolicitudVacacionesEnCurso
                                            WHERE Id = @SolicitudVacacionesId;
											SET @RegistrosAfectados = @RegistrosAfectados + 1;
                                    END;
                            END;
                            FETCH NEXT FROM SolicitudVacacionesInterrupciones INTO @SolicitudVacacionesId, @FechaInicio, @FechaFin, @Estado;
            END;
                    CLOSE SolicitudVacacionesInterrupciones;
                    DEALLOCATE SolicitudVacacionesInterrupciones;

					SET @Resultado = 'Se afectaron ' + CONVERT(VARCHAR, @RegistrosAfectados) + ' solicitud de vacaciones.';

					EXECUTE [dbo].[USP_TareaProgramadaLog] 
                            @UsuarioOperacion = @UsuarioOperacion, 
                            @Estado = @TareaProgramadaLogExitoso, 
                            @Resultado = @Resultado, 
                            @Alias = @Alias;

                    -- Actualiza el registro de la tarea programada
                    UPDATE dbo.TareaProgramada
                      SET 
                          dbo.TareaProgramada.EnEjecucion = 0
                    WHERE Alias = @Alias;

                    -- Cierre de la transacción

                    IF @@TRANCOUNT > 0
                        BEGIN
                            IF XACT_STATE() = 1
                                BEGIN
                                    COMMIT TRAN SolicitudVacacionesInt;
                            END;
                                ELSE
                                BEGIN
                                    EXEC util.USP_GenerarExcepcion 
                                         50000, 
                                         'No se puede confirmar la transacción.  Error desconocido.';
                            END;
                    END;
            END;
        END TRY
        BEGIN CATCH

            -- Rollback de la transacción
            IF XACT_STATE() <> 0
               AND @@TRANCOUNT > 0
                BEGIN
                    ROLLBACK;
            END;

            -- Se almacena la información del error
            EXEC util.USP_Registrarerror 
                 @NombreObjeto, 
                 @Parametros;

            -- Se lanza la excepción
            EXEC util.USP_LanzarExcepcion;
        END CATCH;
    END;
]]>
</sql>
<rollback>
<sql endDelimiter="GO" splitStatements="true">
<![CDATA[
DROP PROCEDURE [dbo].[USP_ActualizarSolicitudVacacionesInterrupcion];
]]>
</sql>
</rollback>
</changeSet>

</databaseChangeLog>