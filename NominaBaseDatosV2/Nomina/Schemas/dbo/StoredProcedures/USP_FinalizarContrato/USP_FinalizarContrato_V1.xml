<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd">

<changeSet author="lestrada" id="USP_FinalizarContrato_V1">
<comment>Migración general</comment>
<sql endDelimiter="GO" splitStatements="true">
<![CDATA[
IF OBJECT_ID('dbo.USP_FinalizarContrato', 'P') IS NULL
BEGIN
    EXECUTE ('CREATE PROCEDURE dbo.USP_FinalizarContrato as SELECT 1');
END;
GO
-- =============================================
-- Author:		Laura Katherine Estrada Arango
-- Create date: 05/08/2020
-- Description:	Procedimiento almacenado, el cual se encarga de finalizar el ausentismo.
--
-- Parameters:
--  @Fecha:			        Fecha para la cual se hace el proceso
--  @UsuarioOperacion:	    Usuario que realiza la operación
--  @Alias:                 Alias - comando de la tarea programada
-- =============================================
ALTER PROCEDURE [dbo].[USP_FinalizarContrato]	 @Fecha            DATE, 
                                                 @UsuarioOperacion VARCHAR(255), 
                                                 @Alias            VARCHAR(255)
AS
    BEGIN

        --------------------------------------------------------------------------
        -- Instrucciones de configuración y manejo de errores
        --------------------------------------------------------------------------
        SET XACT_ABORT, NOCOUNT, ANSI_NULLS, QUOTED_IDENTIFIER ON;
        DECLARE @Parametros VARCHAR(MAX)= CONCAT('@Fecha=', CONVERT(VARCHAR, @Fecha), '&', '@UsuarioOperacion=', CONVERT(VARCHAR, @UsuarioOperacion), '&', '@Alias=', CONVERT(VARCHAR, @Alias));
        DECLARE @NombreObjeto VARCHAR(256)= OBJECT_NAME(@@PROCID);

        --------------------------------------------------------------------------
        -- Variables
        --------------------------------------------------------------------------
        DECLARE @Resultado NVARCHAR(255)='';
        DECLARE @Estado VARCHAR(30);
        DECLARE @FechaActual DATE= CONVERT(DATE, GETDATE());
		DECLARE @ContratoId INT;
        DECLARE @ContratoVigente VARCHAR(255);
		DECLARE @ContratoPendientePorLiquidar VARCHAR(255);
		DECLARE @FuncionarioId INT;
		DECLARE	@FuncionarioRetirado VARCHAR(255);
        DECLARE @RegistrosAfectados INT;
        DECLARE @TareaProgramadaLogExitoso VARCHAR(255);
        DECLARE @TareaProgramadaLogFallido VARCHAR(255);
		DECLARE @AuditoriaActivo VARCHAR(255);
		DECLARE @ParametroFecha DATE;
        --------------------------------------------------------------------------
        -- Proceso
        --------------------------------------------------------------------------
        BEGIN TRY
            SET @ParametroFecha = CONVERT(DATE,'1900-01-01');
            IF @Fecha = @ParametroFecha
			BEGIN
                SET @Fecha = @FechaActual;
			END;
            SELECT @TareaProgramadaLogExitoso = ces.TAREAPROGRAMADALOG_EXITOSO, 
                   @TareaProgramadaLogFallido = ces.TAREAPROGRAMADALOG_FALLIDO,
				   @ContratoVigente = ces.CONTRATO_VIGENTE,
				   @ContratoPendientePorLiquidar = ces.CONTRATO_PENDIENTEPORLIQUIDAR,
				   @FuncionarioRetirado = ces.FUNCIONARIO_RETIRADO,
				   @AuditoriaActivo = ces.AUDITORIA_ACTIVO
            FROM util.VW_ConstanteEstado AS ces;

		
            IF(
            (
                SELECT EnEjecucion
                FROM dbo.TareaProgramada
                WHERE Alias = @Alias
            ) = 1)
                BEGIN
                    EXECUTE [dbo].[USP_RegistrarTareaProgramadaLog] 
                            @UsuarioOperacion = @UsuarioOperacion, 
                            @Estado = @TareaProgramadaLogFallido, 
                            @Resultado = @Resultado, 
                            @Alias = @Alias;
            END;
                ELSE
                BEGIN
                    SET @RegistrosAfectados = 0;
                    SET @Resultado = '';

                    -- Inicio de la transacción
                    BEGIN TRAN FinalizarContratos;

					-- Actualiza el estado del la tarea programada
					UPDATE dbo.TareaProgramada
                      SET 
                          dbo.TareaProgramada.EnEjecucion = 1
                    WHERE Alias = @Alias;

                    -- Crea Cursor
                    DECLARE CUR_FinalizarContrato CURSOR LOCAL
                    FOR SELECT con.Id, 
							   fun.Id
                        FROM dbo.Contrato con
						INNER JOIN dbo.Funcionario fun ON con.FuncionarioId = fun.Id
                        WHERE con.Estado = @ContratoVigente
                            AND con.FechaTerminacion < @Fecha
							AND fun.EstadoRegistro = @AuditoriaActivo
							AND con.EstadoRegistro = @AuditoriaActivo
                    OPEN CUR_FinalizarContrato;
                    FETCH NEXT FROM CUR_FinalizarContrato INTO @ContratoId, @FuncionarioId;
                    WHILE @@fetch_status = 0
                        BEGIN
                            -- Actualiza  estado del contrato a pendiente por liquidar
                            UPDATE dbo.Contrato
                                SET 
                                    Estado = @ContratoPendientePorLiquidar
                            WHERE Id = @ContratoId;
							SET @RegistrosAfectados = @RegistrosAfectados + 1;

								-- Actualiza el estado del funcionario a retirado.
                            UPDATE Funcionario
                                SET 
                                    Estado = @FuncionarioRetirado
                            WHERE Id = @FuncionarioId;
                            SET @RegistrosAfectados = @RegistrosAfectados + 1;
							

                            FETCH NEXT FROM CUR_FinalizarContrato INTO @ContratoId, @FuncionarioId;
					END;
                    CLOSE CUR_FinalizarContrato;
                    DEALLOCATE CUR_FinalizarContrato;

                    SET @Resultado = 'Se afectaron ' + CONVERT(VARCHAR, @RegistrosAfectados) + ' registros.';

					EXECUTE [dbo].[USP_RegistrarTareaProgramadaLog] 
                            @UsuarioOperacion = @UsuarioOperacion, 
                            @Estado = @TareaProgramadaLogExitoso, 
                            @Resultado = @Resultado, 
                            @Alias = @Alias;

                    -- Actualiza el registro de la tarea programada
                    UPDATE dbo.TareaProgramada
                      SET 
                          dbo.TareaProgramada.EnEjecucion = 0
                    WHERE Alias = @Alias;

                    -- Cierre de la transacción
                    IF @@TRANCOUNT > 0
                        BEGIN
                            IF XACT_STATE() = 1
                                BEGIN
                                    COMMIT TRAN FinalizarContratos;
                            END;
                                ELSE
                                BEGIN
                                    EXEC util.USP_GenerarExcepcion 
                                         50000, 
                                         'No se puede confirmar la transacción.  Error desconocido.';
                            END;
                    END;
            END;
        END TRY
        BEGIN CATCH

            -- Rollback de la transacción
            IF XACT_STATE() <> 0
               AND @@TRANCOUNT > 0
                BEGIN
                    ROLLBACK;
            END;

            -- Se almacena la información del error
            EXEC util.USP_Registrarerror 
                 @NombreObjeto, 
                 @Parametros;

            -- Se lanza la excepción
            EXEC util.USP_LanzarExcepcion;
        END CATCH;
    END;
]]>
</sql>
<rollback>
<sql endDelimiter="GO" splitStatements="true">
<![CDATA[
DROP PROCEDURE [dbo].[USP_FinalizarContrato];
]]>
</sql>
</rollback>
</changeSet>

</databaseChangeLog>