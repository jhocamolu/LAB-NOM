<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd">

<changeSet author="rsabogal" id="USP_ObtenerValorConceptoAgrupador_V2">
<comment>HT020</comment>
<sql endDelimiter="GO" splitStatements="true">
<![CDATA[
ALTER PROCEDURE [dbo].[USP_ObtenerValorConceptoAgrupador] 
(
	@FuncionarioId int,
	@NominaId int,
	@ConceptoNominaId int,
	@Valor money OUTPUT
)  
AS
BEGIN
	
		--------------------------------------------------------------------------
		-- Instrucciones de configuración y manejo de errores
		--------------------------------------------------------------------------
		SET XACT_ABORT, NOCOUNT, ANSI_NULLS, QUOTED_IDENTIFIER ON;
		DECLARE @Parametros VARCHAR(MAX)= CONCAT('@FuncionarioId=', CONVERT(VARCHAR, @FuncionarioId), '&', '@NominaId=', CONVERT(VARCHAR, @NominaId),'&', '@ConceptoNominaId=', CONVERT(VARCHAR, @ConceptoNominaId))
		DECLARE @NombreObjeto VARCHAR(256)= OBJECT_NAME(@@PROCID);

		--------------------------------------------------------------------------
		-- Variables
		--------------------------------------------------------------------------
		DECLARE @NominaFuncionarioId INT -- Variable para cargar el Id de Nomina funcionario
		DECLARE @MensajeError 			VARCHAR(250);
		DECLARE @ErrorMessage  			NVARCHAR(4000); 
   		DECLARE @ErrorSeverity 			INT;
   		DECLARE @ErrorState    			INT;
		DECLARE @AuditoriaActivo VARCHAR(255);

		BEGIN TRY

			-- Se consultan los estados
			SELECT @AuditoriaActivo = ces.AUDITORIA_ACTIVO
			FROM util.VW_ConstanteEstado AS ces;

			 -- Se valida que exista el funcionario
			IF NOT EXISTS (
			 SELECT fun.Id
			 FROM dbo.Funcionario fun 
				WHERE fun.Id = @FuncionarioId 
			)
			BEGIN
			 EXEC util.USP_GenerarExcepcion 50001, 'No existe un funcionario con el Id suministrado.';
			END

			-- Se valida que exista la nómina
			IF NOT EXISTS (
			 SELECT nom.Id
			 FROM dbo.Nomina nom
				WHERE nom.Id = @NominaId
			)
			BEGIN
			 EXEC util.USP_GenerarExcepcion 50001, 'No existe una nómina con el Id suministrado.';
			END

			-- Se valida que exista el concepto de nómina
			IF NOT EXISTS (
			 SELECT cno.Id
			 FROM dbo.ConceptoNomina cno
				WHERE cno.Id = @ConceptoNominaId
			)
			BEGIN
			 EXEC util.USP_GenerarExcepcion 50001, 'No existe el concepto de nómina con el Id suministrado.';
			END


			-- Obtiene el Id de la NominaFuncionario.
			SET @NominaFuncionarioId = (SELECT Id FROM NominaFuncionario
												WHERE FuncionarioId=@FuncionarioId 
												AND NominaId=@NominaId)
			IF @NominaFuncionarioId IS NULL
				BEGIN
					EXEC util.USP_GenerarExcepcion 50001, 'No existe el funcionario con la nomina seleccionada.';
				END 

			-- Inicio de la transacción
			BEGIN TRAN ActualizarValorAgrupador;

			-- Se realiza la Suma de los valores de los conceptos asociados.
			SET @Valor = (SELECT COALESCE(SUM(Valor),0) respuesta FROM NominaDetalle
													WHERE NominaFuncionarioId = @NominaFuncionarioId 
													AND ConceptoNominaId IN (
																		-- Obtiene los conceptos asociados al concepto Agrupador.
																			SELECT ConceptoNominaId FROM ConceptoBase	
																		WHERE ConceptoNominaAgrupadorId = @ConceptoNominaId
																		AND EstadoRegistro = @AuditoriaActivo)
																		)
																			 
			-- Cierre de la transacción
			IF @@TRANCOUNT > 0
			BEGIN
				IF XACT_STATE() = 1
				BEGIN
					COMMIT TRAN ActualizarValorAgrupador;
				END;
				ELSE
				BEGIN
					EXEC util.USP_GenerarExcepcion
						 50000,
						 'No se puede confirmar la transacción.  Error desconocido.';
				END;
			END;
			
		END TRY
		BEGIN CATCH
			-- Rollback de la transacción
			IF XACT_STATE() <> 0
				AND @@TRANCOUNT > 0
			BEGIN
				ROLLBACK;
			END;

			-- Se almacena la información del error
			EXEC util.USP_Registrarerror
					@NombreObjeto,
					@Parametros;

			-- Se lanza la excepción
			EXEC util.USP_LanzarExcepcion;
		END CATCH
END;
GO
]]>
</sql>
</changeSet>
</databaseChangeLog>