<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd">

<changeSet author="dvillega" id="USP_ProcesarNovedadesOtras_V1">
<comment>HU056</comment>
<sql endDelimiter="GO" splitStatements="true">
<![CDATA[
IF OBJECT_ID('dbo.USP_ProcesarNovedadesOtras', 'P') IS NULL
BEGIN
    EXECUTE ('CREATE PROCEDURE dbo.USP_ProcesarNovedadesOtras as SELECT 1');
END;
GO

-- ==========================================================================================
-- Author:      Diego Fernando Villegas Flórez
-- Create date: 24/04/2020
-- Description: Pemite procesar las novedades del funcionario del módulo otras novedades
--			 al aprobar la nómina
--
-- Parameters:
--  @NominaId:			   Identificador de la nómina a la que va a vincular la novedad
--  @NominaFechaFinal	   Fecha final de la nómina
--  @UsuarioOperacion:	   Usuario que realiza la operación
-- ==========================================================================================

ALTER PROCEDURE [dbo].[USP_ProcesarNovedadesOtras] @NominaId         INT,
                                                   @NominaFechaFinal DATE,
                                                   @UsuarioOperacion VARCHAR(255)
AS
BEGIN

    --------------------------------------------------------------------------
    -- Instrucciones de configuración y manejo de errores
    --------------------------------------------------------------------------
    SET XACT_ABORT, NOCOUNT, ANSI_NULLS, QUOTED_IDENTIFIER ON;
    DECLARE @Parametros VARCHAR(MAX)= CONCAT('@NominaId=', CONVERT(VARCHAR, @NominaId), '&', '@NominaFechaFinal=', CONVERT(VARCHAR, @NominaFechaFinal),  '&', '@UsuarioOperacion=', CONVERT(VARCHAR, @UsuarioOperacion));
    DECLARE @NombreObjeto VARCHAR(255)= OBJECT_NAME(@@PROCID);
    DECLARE @MensajeExcepcion VARCHAR(255);

    --------------------------------------------------------------------------
    -- Variables
    --------------------------------------------------------------------------
    DECLARE @NovedadLiquidada VARCHAR(255);
    DECLARE @CategoriaNovedadClase VARCHAR(255);
    DECLARE @NovedadClaseEventual VARCHAR(255)=
    (
        SELECT vcccn.EVENTUAL
        FROM [util].[VW_ConstanteClaseCategoriaNovedad] AS vcccn
    );
    DECLARE @AuditoriaActivo VARCHAR(255);
    DECLARE @NovedadId INT;
    DECLARE @NovedadValor MONEY;
    DECLARE @ModuloSistema VARCHAR(255)=
    (
        SELECT cms.OTRASNOVEDADES
        FROM util.VW_ConstanteModuloSistema AS cms
    );
    DECLARE @NovedadFechaFinalizacion DATE;

    --------------------------------------------------------------------------
    -- Proceso
    --------------------------------------------------------------------------
    BEGIN TRY

        -- Inicio de la transacción
        BEGIN TRAN ProcesarNovedades;

        -- Se consultan estado
        SELECT @AuditoriaActivo = vce.AUDITORIA_ACTIVO,
               @NovedadLiquidada = vce.OTRANOVEDAD_LIQUIDADA
        FROM util.VW_ConstanteEstado AS vce;

        -- Cursor para obtener las otras novedades
        DECLARE CUR_OtrasNovedades CURSOR LOCAL
        FOR SELECT nfn.ModuloRegistroId,
                   can.Clase,
                   nov.FechaFinalizacion
            FROM dbo.Nomina AS nom
                 INNER JOIN dbo.NominaFuncionario AS nfu ON(nom.Id = nfu.NominaId)
                 INNER JOIN dbo.NominaDetalle AS nde ON(nfu.Id = nde.NominaFuncionarioId)
                 INNER JOIN dbo.NominaFuenteNovedad AS nfn ON(nde.NominaFuenteNovedadId = nfn.Id)
                 INNER JOIN dbo.Novedad AS nov ON(nfn.ModuloRegistroId = nov.Id)
                 INNER JOIN dbo.CategoriaNovedad AS can ON(nov.CategoriaNovedadId = can.Id)
            WHERE nom.Id = @NominaId
                  AND nfn.Modulo = @ModuloSistema
                  AND nfu.EstadoRegistro = @AuditoriaActivo
                  AND nde.EstadoRegistro = @AuditoriaActivo;

        OPEN CUR_OtrasNovedades;

        FETCH NEXT FROM CUR_OtrasNovedades INTO @NovedadId, @CategoriaNovedadClase, @NovedadFechaFinalizacion;

        WHILE @@FETCH_STATUS = 0

        BEGIN

            IF @CategoriaNovedadClase = @NovedadClaseEventual
               OR @NovedadFechaFinalizacion <= @NominaFechaFinal
            BEGIN
                UPDATE dbo.Novedad
                  SET
                      Estado = @NovedadLiquidada,
                      ModificadoPor = @UsuarioOperacion,
                      FechaModificacion = GETDATE()
                WHERE Id = @NovedadId;
            END;

            FETCH NEXT FROM CUR_OtrasNovedades INTO @NovedadId, @CategoriaNovedadClase, @NovedadFechaFinalizacion;
        END;

        CLOSE CUR_OtrasNovedades;

        DEALLOCATE CUR_OtrasNovedades;

        -- Cierre de la transacción
        IF @@TRANCOUNT > 0
        BEGIN
            IF XACT_STATE() = 1
            BEGIN
                COMMIT TRAN ProcesarNovedades;
            END;
            ELSE
            BEGIN
                EXEC util.USP_GenerarExcepcion
                     50000,
                     'No se puede confirmar la transacción.  Error desconocido.';
            END;
        END;
    END TRY
    BEGIN CATCH

        -- Rollback de la transacción
        IF XACT_STATE() <> 0
           AND @@TRANCOUNT > 0
        BEGIN
            ROLLBACK;
        END;

        -- Se almacena la información del error
        EXEC util.USP_Registrarerror
             @NombreObjeto,
             @Parametros;

        -- Se lanza la excepción
        EXEC util.USP_LanzarExcepcion;
    END CATCH;
END;
GO
]]>
</sql>
<rollback>
<sql endDelimiter="GO" splitStatements="true">
<![CDATA[
DROP PROCEDURE [dbo].[USP_ProcesarNovedadesOtras];
]]>
</sql>
</rollback>
</changeSet>

</databaseChangeLog>