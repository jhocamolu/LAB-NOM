<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd">

<changeSet author="lestrada" id="USP_ProcesarEstadosFuncionario_V1">
<comment>Migración general</comment>
<sql endDelimiter="GO" splitStatements="true">
<![CDATA[
IF OBJECT_ID('dbo.USP_ProcesarEstadosFuncionario', 'P') IS NULL
BEGIN
    EXECUTE ('CREATE PROCEDURE dbo.USP_ProcesarEstadosFuncionario as SELECT 1');
END;
GO
-- ==========================================================================================
-- Author:      Diego Fernando Villegas Flórez
-- Create date: 24/04/2020
-- Description: Permite realizar cambios de estado en entidades asociadas a funcionarios 
--			 que dependen del tiempo (Fechas)
--
-- Parameters:
--  @UsuarioOperacion:	   Usuario que realiza la operación
-- ==========================================================================================

ALTER PROCEDURE [dbo].[USP_ProcesarEstadosFuncionario]  @Fecha            DATE,
														@UsuarioOperacion VARCHAR(255),
														@Alias VARCHAR(255),
														@Estado		   VARCHAR(255) OUTPUT,
														@Resultado	   VARCHAR(255) OUTPUT
AS
BEGIN

    --------------------------------------------------------------------------
    -- Instrucciones de configuración y manejo de errores
    --------------------------------------------------------------------------
    SET XACT_ABORT, NOCOUNT, ANSI_NULLS, QUOTED_IDENTIFIER ON;
    DECLARE @Parametros VARCHAR(MAX)= CONCAT('@Fecha=', CONVERT(VARCHAR, @Fecha), '&', '@UsuarioOperacion=', CONVERT(VARCHAR, @UsuarioOperacion), '&', '@Estado=', CONVERT(VARCHAR, @Estado), '&', '@Resultado=', CONVERT(VARCHAR, @Resultado));
    DECLARE @NombreObjeto VARCHAR(255)= OBJECT_NAME(@@PROCID);
    DECLARE @MensajeExcepcion VARCHAR(255);

    --------------------------------------------------------------------------
    -- Variables
    --------------------------------------------------------------------------
    DECLARE @ResultadoIndividual VARCHAR(255);
    DECLARE @TareaProgramadaLogExitoso VARCHAR(255);
    DECLARE @TareaProgramadaLogFallido VARCHAR(255);
	DECLARE @ParametroFecha DATE;
	DECLARE @FechaActual DATE = CONVERT(DATE, GETDATE());

    --------------------------------------------------------------------------
    -- Proceso
    --------------------------------------------------------------------------
    BEGIN TRY

        -- Inicio de la transacción
        BEGIN TRAN ProcesarEstadosFuncionario;

		IF(
            (
                SELECT EnEjecucion
                FROM dbo.TareaProgramada
                WHERE Alias = @Alias
            ) = 1)
                BEGIN
                    EXECUTE [dbo].[USP_RegistrarTareaProgramadaLog] 
                            @UsuarioOperacion = @UsuarioOperacion, 
                            @Estado = @TareaProgramadaLogFallido, 
                            @Resultado = @Resultado, 
                            @Alias = @Alias;
            END;



		SET @ParametroFecha = CONVERT(DATE,'1900-01-01');
        IF @Fecha = @ParametroFecha OR @Fecha IS NULL
		BEGIN
            SET @Fecha = @FechaActual;
		END;


	   -- Se consultan los estados
        SELECT @TareaProgramadaLogExitoso = ces.TAREAPROGRAMADALOG_EXITOSO,
			@TareaProgramadaLogFallido = ces.TAREAPROGRAMADALOG_FALLIDO
        FROM util.VW_ConstanteEstado AS ces;


	   SET @Estado = @TareaProgramadaLogExitoso;
	   SET @Resultado = '<ul>';

	   -- Se procesan los estados asociados a contratos
	   EXEC	[dbo].[USP_ProcesarEstadosContratos]
		@Fecha = @Fecha,
		@UsuarioOperacion = @UsuarioOperacion,
		@Estado = @Estado OUTPUT,
		@Resultado = @ResultadoIndividual OUTPUT;

		SET @Resultado = @Resultado + '<li>' + @ResultadoIndividual + '</li>';

	   -- Se procesan los estados asociados a los ausentismos
	   EXEC	[dbo].[USP_ProcesarEstadosAusentismos]
		@Fecha = @Fecha,
		@UsuarioOperacion = @UsuarioOperacion,
		@Estado = @Estado OUTPUT,
		@Resultado = @ResultadoIndividual OUTPUT;

	   SET @Resultado = @Resultado + '<li>' + @ResultadoIndividual + '</li>';

	   SET @Resultado = @Resultado + '</ul>';

	   EXECUTE [dbo].[USP_RegistrarTareaProgramadaLog] 
				@UsuarioOperacion = @UsuarioOperacion, 
				@Estado = @TareaProgramadaLogExitoso, 
				@Resultado = @Resultado, 
				@Alias = @Alias;

		-- Actualiza el registro de la tarea programada
		UPDATE dbo.TareaProgramada
			SET 
				dbo.TareaProgramada.EnEjecucion = 0
		WHERE Alias = @Alias;

        
        -- Cierre de la transacción
        IF @@TRANCOUNT > 0
        BEGIN
            IF XACT_STATE() = 1
            BEGIN
                COMMIT TRAN ProcesarEstadosFuncionario;
            END;
            ELSE
            BEGIN
                EXEC util.USP_GenerarExcepcion
                     50000,
                     'No se puede confirmar la transacción.  Error desconocido.';
            END;
        END;
    END TRY
    BEGIN CATCH

        -- Rollback de la transacción
        IF XACT_STATE() <> 0
           AND @@TRANCOUNT > 0
        BEGIN
            ROLLBACK;
        END;

        -- Se almacena la información del error
        EXEC util.USP_Registrarerror
             @NombreObjeto,
             @Parametros;

        -- Se lanza la excepción
        EXEC util.USP_LanzarExcepcion;
    END CATCH;
END;


]]>
</sql>
<rollback>
<sql endDelimiter="GO" splitStatements="true">
<![CDATA[
DROP PROCEDURE [dbo].[USP_ProcesarEstadosFuncionario];
]]>
</sql>
</rollback>
</changeSet>

</databaseChangeLog>