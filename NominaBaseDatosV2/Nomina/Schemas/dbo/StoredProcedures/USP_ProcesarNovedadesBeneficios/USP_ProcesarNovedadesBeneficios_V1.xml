<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd">

<changeSet author="dvillega" id="USP_ProcesarNovedadesBeneficios_V1">
<comment>HU057</comment>
<sql endDelimiter="GO" splitStatements="true">
<![CDATA[
IF OBJECT_ID('dbo.USP_ProcesarNovedadesBeneficios', 'P') IS NULL
BEGIN
    EXECUTE ('CREATE PROCEDURE dbo.USP_ProcesarNovedadesBeneficios as SELECT 1');
END;
GO
-- ==========================================================================================
-- Author:      Diego Fernando Villegas Flórez
-- Create date: 24/04/2020
-- Description: Pemite procesar las novedades del funcionario del módulo de beneficios
--			 al aprobar la nómina
--
-- Parameters:
--  @NominaId:			   Identificador de la nómina a la que va a vincular la novedad
--  @UsuarioOperacion:	   Usuario que realiza la operación
-- ==========================================================================================

ALTER PROCEDURE [dbo].[USP_ProcesarNovedadesBeneficios] @NominaId         INT,
                                                        @UsuarioOperacion VARCHAR(255)
AS
BEGIN

    --------------------------------------------------------------------------
    -- Instrucciones de configuración y manejo de errores
    --------------------------------------------------------------------------
    SET XACT_ABORT, NOCOUNT, ANSI_NULLS, QUOTED_IDENTIFIER ON;
    DECLARE @Parametros VARCHAR(MAX)= CONCAT('@NominaId=', CONVERT(VARCHAR, @NominaId), '&', '@UsuarioOperacion=', CONVERT(VARCHAR, @UsuarioOperacion));
    DECLARE @NombreObjeto VARCHAR(255)= OBJECT_NAME(@@PROCID);
    DECLARE @MensajeExcepcion VARCHAR(255);

    --------------------------------------------------------------------------
    -- Variables
    --------------------------------------------------------------------------
    DECLARE @BeneficioAutorizada VARCHAR(255);
    DECLARE @BeneficioOtorgado VARCHAR(255);
    DECLARE @BeneficioFinalizada VARCHAR(255);
    DECLARE @BeneficioEnCondonacion VARCHAR(255);
    DECLARE @ConceptoClaseDevengo VARCHAR(255);
    DECLARE @AuditoriaActivo VARCHAR(255);
    DECLARE @BeneficioEstado VARCHAR(255);
    DECLARE @NovedadId INT;
    DECLARE @NovedadValor MONEY;
    DECLARE @ModuloSistema VARCHAR(255)=
    (
        SELECT cms.BENEFICIOS
        FROM util.VW_ConstanteModuloSistema AS cms
    );
    DECLARE @ClaseConceptoNomina VARCHAR(255);
    DECLARE @BeneficioValorAutorizado MONEY;
    DECLARE @BeneficioSaldo MONEY;
    DECLARE @BeneficioTotalPagado MONEY;
    DECLARE @NominaAplicada VARCHAR(255);
    DECLARE @ConceptoClaseDeduccion VARCHAR(255);
    DECLARE @BeneficioSaldoNuevo MONEY;
    DECLARE @BeneficiOpcionAuxilioEducativo VARCHAR(255);
    DECLARE @BeneficiOpcionAuxilioEducativo1 VARCHAR(255);
    DECLARE @BeneficiOpcionAuxilioEducativo2 VARCHAR(255);
    DECLARE @BeneficioNotaAcademica FLOAT;

    --------------------------------------------------------------------------
    -- Proceso
    --------------------------------------------------------------------------
    BEGIN TRY

        -- Inicio de la transacción
        BEGIN TRAN ProcesarNovedades;

        -- Se consultan estado
        SELECT @AuditoriaActivo = vce.AUDITORIA_ACTIVO,
               @BeneficioAutorizada = vce.BENEFICIO_AUTORIZADA,
               @BeneficioOtorgado = vce.BENEFICIO_OTORGADA,
               @NominaAplicada = vce.NOMINA_APLICADA,
               @BeneficioFinalizada = vce.BENEFICIO_FINALIZADA,
               @BeneficioEnCondonacion = vce.BENEFICIO_ENCONDONACION
        FROM util.VW_ConstanteEstado AS vce;

        -- Se consultan las clases de concepto
        SELECT @ConceptoClaseDevengo = vccc.DEVENGO,
               @ConceptoClaseDeduccion = vccc.DEDUCCION
        FROM util.VW_ConstanteClaseConcepto AS vccc;

        -- Se consultan constantes para opción de auxilio educativo
        SELECT @BeneficiOpcionAuxilioEducativo1 = vcoae.OPCION1,
               @BeneficiOpcionAuxilioEducativo2 = vcoae.OPCION2
        FROM util.VW_ConstanteOpcionAuxilioEducativo AS vcoae;

        -- Cursor para obtener las hora extra de la nómina
        DECLARE CUR_Beneficios CURSOR LOCAL
        FOR SELECT nfn.ModuloRegistroId,
                   cno.ClaseConceptoNomina,
                   nde.Valor
            FROM dbo.Nomina AS nom
                 INNER JOIN dbo.NominaFuncionario AS nfu ON(nom.Id = nfu.NominaId)
                 INNER JOIN dbo.NominaDetalle AS nde ON(nfu.Id = nde.NominaFuncionarioId)
                 INNER JOIN dbo.NominaFuenteNovedad AS nfn ON(nde.NominaFuenteNovedadId = nfn.Id)
                 INNER JOIN dbo.ConceptoNomina AS cno ON(nde.ConceptoNominaId = cno.Id)
            WHERE nom.Id = @NominaId
                  AND nfn.Modulo = @ModuloSistema
                  AND nfu.EstadoRegistro = @AuditoriaActivo
                  AND nde.EstadoRegistro = @AuditoriaActivo;

        OPEN CUR_Beneficios;

        FETCH NEXT FROM CUR_Beneficios INTO @NovedadId, @ClaseConceptoNomina, @NovedadValor;

        WHILE @@FETCH_STATUS = 0

        BEGIN

            -- Se consulta la información del beneficio
            SELECT @BeneficioEstado = ben.Estado,
                   @BeneficioValorAutorizado = COALESCE(ben.ValorAutorizado, 0),
                   @BeneficioSaldo = COALESCE(ben.Saldo, 0),
                   @BeneficiOpcionAuxilioEducativo = ben.OpcionAuxilioEducativo,
                   @BeneficioNotaAcademica = ben.NotaAcademica
            FROM dbo.Beneficio AS ben
            WHERE ben.Id = @NovedadId;

            -- Si el estado del beneficio es  Autorizado y el concepto es de devengo
            -- se actualiza el estado del beneficio a otorgado
            IF @BeneficioEstado = @BeneficioAutorizada
               AND @ClaseConceptoNomina = @ConceptoClaseDevengo
            BEGIN
                UPDATE dbo.Beneficio
                  SET
                      Estado = @BeneficioOtorgado,
                      ModificadoPor = @UsuarioOperacion,
                      FechaModificacion = GETDATE()
                WHERE Id = @NovedadId;
            END;
            ELSE
            BEGIN

                -- Se consulta el valor pagado por el funcionario en nóminas liquidadas
                SELECT @BeneficioTotalPagado = SUM(nde.Valor)
                FROM dbo.Nomina AS nom
                     INNER JOIN dbo.NominaFuncionario AS nfu ON(nom.Id = nfu.NominaId)
                     INNER JOIN dbo.NominaDetalle AS nde ON(nfu.Id = nde.NominaFuncionarioId)
                     INNER JOIN dbo.NominaFuenteNovedad AS nfn ON(nde.NominaFuenteNovedadId = nfn.Id)
                     INNER JOIN dbo.ConceptoNomina AS cno ON(nde.ConceptoNominaId = cno.Id)
                WHERE nfn.Modulo = @ModuloSistema
                      AND nfn.ModuloRegistroId = @NovedadId
                      AND nom.Estado = @NominaAplicada
                      AND cno.ClaseConceptoNomina = @ConceptoClaseDeduccion
                      AND nfu.EstadoRegistro = @AuditoriaActivo
                      AND nde.EstadoRegistro = @AuditoriaActivo;

                SET @BeneficioTotalPagado = @BeneficioTotalPagado + @NovedadValor;

                SET @BeneficioSaldoNuevo = @BeneficioValorAutorizado - @BeneficioTotalPagado;

                -- Se actualiza el saldo del beneficio
                UPDATE dbo.Beneficio
                  SET
                      Saldo = @BeneficioSaldoNuevo,
                      ModificadoPor = @UsuarioOperacion,
                      FechaModificacion = GETDATE()
                WHERE Id = @NovedadId;

                IF @BeneficioSaldoNuevo <= 0
                BEGIN

                    IF @BeneficiOpcionAuxilioEducativo = @BeneficiOpcionAuxilioEducativo1
                    BEGIN
                        IF @BeneficioNotaAcademica IS NULL
                        BEGIN
                            UPDATE dbo.Beneficio
                              SET
                                  Estado = @BeneficioEnCondonacion,
                                  ModificadoPor = @UsuarioOperacion,
                                  FechaModificacion = GETDATE()
                            WHERE Id = @NovedadId;
                        END;
                    END;
                    ELSE
                    BEGIN
                        UPDATE dbo.Beneficio
                          SET
                              Estado = @BeneficioFinalizada,
                              ModificadoPor = @UsuarioOperacion,
                              FechaModificacion = GETDATE()
                        WHERE Id = @NovedadId;
                    END;
                END;

            END;

            FETCH NEXT FROM CUR_Beneficios INTO @NovedadId, @ClaseConceptoNomina, @NovedadValor;
        END;

        CLOSE CUR_Beneficios;

        DEALLOCATE CUR_Beneficios;

        -- Cierre de la transacción
        IF @@TRANCOUNT > 0
        BEGIN
            IF XACT_STATE() = 1
            BEGIN
                COMMIT TRAN ProcesarNovedades;
            END;
            ELSE
            BEGIN
                EXEC util.USP_GenerarExcepcion
                     50000,
                     'No se puede confirmar la transacción.  Error desconocido.';
            END;
        END;
    END TRY
    BEGIN CATCH

        -- Rollback de la transacción
        IF XACT_STATE() <> 0
           AND @@TRANCOUNT > 0
        BEGIN
            ROLLBACK;
        END;

        -- Se almacena la información del error
        EXEC util.USP_Registrarerror
             @NombreObjeto,
             @Parametros;

        -- Se lanza la excepción
        EXEC util.USP_LanzarExcepcion;
    END CATCH;
END;
GO
]]>
</sql>
<rollback>
<sql endDelimiter="GO" splitStatements="true">
<![CDATA[
DROP PROCEDURE [dbo].[USP_ProcesarNovedadesBeneficios];
]]>
</sql>
</rollback>
</changeSet>

</databaseChangeLog>