<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd">

<changeSet author="lestrada" id="USP_ActualizarSolicitudVacaciones_V3">
<comment>Migración general</comment>
<sql endDelimiter="GO" splitStatements="true">
<![CDATA[
IF OBJECT_ID('dbo.USP_ActualizarSolicitudVacaciones', 'P') IS NULL
BEGIN
    EXECUTE ('CREATE PROCEDURE dbo.USP_ActualizarSolicitudVacaciones as SELECT 1');
END;
GO
-- =============================================
-- Author:		Laura Katherine Estrada Arango
-- Create date: 29/04/2020
-- Description:	Procedimiento almacenado, el cual se encarga de actualizar 
--				la información de la solicitud de vacaciones para el funcionario.
--
-- Parameters:
--  @Fecha:			        Fecha para la cual se hace el proceso
--  @UsuarioOperacion:	    Usuario que realiza la operación
--  @Alias:                 Alias - comando de la tarea programada
-- =============================================
ALTER PROCEDURE [dbo].[USP_ActualizarSolicitudVacaciones] @Fecha            DATE, 
                                                          @UsuarioOperacion VARCHAR(255), 
                                                          @Alias            VARCHAR(255)
AS
    BEGIN

        --------------------------------------------------------------------------
        -- Instrucciones de configuración y manejo de errores
        --------------------------------------------------------------------------
        SET XACT_ABORT, NOCOUNT, ANSI_NULLS, QUOTED_IDENTIFIER ON;
        DECLARE @Parametros VARCHAR(MAX)= CONCAT('@Fecha=', CONVERT(VARCHAR, @Fecha), '&', '@UsuarioOperacion=', CONVERT(VARCHAR, @UsuarioOperacion), '&', '@Alias=', CONVERT(VARCHAR, @Alias));
        DECLARE @NombreObjeto VARCHAR(256)= OBJECT_NAME(@@PROCID);

        --------------------------------------------------------------------------
        -- Variables
        --------------------------------------------------------------------------
        DECLARE @Resultado NVARCHAR(255)='';
        DECLARE @FechaInicioDisfrute DATE;
        DECLARE @FechaFinDisfrute DATE;
        DECLARE @FechaPago DATE;
        DECLARE @Estado VARCHAR(30);
        DECLARE @FechaActual DATE= CONVERT(DATE, GETDATE());
        DECLARE @SolicitudVacacionesId INT;
        DECLARE @NominaFuncionarioId INT;
        DECLARE @FuncionarioId INT;
        DECLARE @RegistrosAfectados INT;
        DECLARE @TareaProgramadaLogExitoso VARCHAR(255);
        DECLARE @TareaProgramadaLogFallido VARCHAR(255);
		DECLARE @SolicitudVacacionesCancelada VARCHAR(255);
		DECLARE @SolicitudVacacionesRechazada VARCHAR(255);
		DECLARE @SolicitudVacionesTerminada VARCHAR(255);
		DECLARE @SolicitudVacacionesAutorizada VARCHAR(255);
		DECLARE @SolicitudVacacionesEnCurso VARCHAR(255);
		DECLARE @AuditoriaActivo VARCHAR(255);
		DECLARE @FuncionarioEnVacaciones VARCHAR(255);
		DECLARE @FuncionarioActivo VARCHAR(255);
		DECLARE @NominaFuncionarioLiquidado VARCHAR(255);
        --------------------------------------------------------------------------
        -- Proceso
        --------------------------------------------------------------------------
        BEGIN TRY
            IF @Fecha IS NULL
			BEGIN
                SET @Fecha = @FechaActual;
			END;
            SELECT @TareaProgramadaLogExitoso = ces.TAREAPROGRAMADALOG_EXITOSO, 
                   @TareaProgramadaLogFallido = ces.TAREAPROGRAMADALOG_FALLIDO,
				   @SolicitudVacacionesCancelada = ces.SOLICITUDVACACIONES_CANCELADA,
				   @SolicitudVacacionesRechazada = ces.SOLICITUDVACACIONES_RECHAZADA,
				   @SolicitudVacionesTerminada = ces.SOLICITUDVACACIONES_TERMINADA,
				   @SolicitudVacacionesAutorizada = ces.SOLICITUDVACACIONES_AUTORIZADA,
				   @SolicitudVacacionesEnCurso = ces.SOLICITUDVACACIONES_ENCURSO,
				   @AuditoriaActivo = ces.AUDITORIA_ACTIVO,
				   @FuncionarioActivo = ces.FUNCIONARIO_ACTIVO,
				   @FuncionarioEnVacaciones = ces.FUNCIONARIO_ENVACACIONES,
				   @NominaFuncionarioLiquidado = ces.NOMINAFUNCIONARIO_LIQUIDADO
            FROM util.VW_ConstanteEstado AS ces;

            IF(
            (
                SELECT EnEjecucion
                FROM dbo.TareaProgramada
                WHERE Alias = @Alias
            ) = 1)
                BEGIN
                    EXECUTE [dbo].[USP_TareaProgramadaLog] 
                            @UsuarioOperacion = @UsuarioOperacion, 
                            @Estado = @TareaProgramadaLogFallido, 
                            @Resultado = @Resultado, 
                            @Alias = @Alias;
            END;
                ELSE
                BEGIN
                    SET @RegistrosAfectados = 0;
                    SET @Resultado = '';

                    -- Inicio de la transacción
                    BEGIN TRAN SolicitudVacaciones;

					-- Actualiza el estado del la tarea programada
					UPDATE dbo.TareaProgramada
                      SET 
                          dbo.TareaProgramada.EnEjecucion = 1
                    WHERE Alias = @Alias;

                    -- Crea Cursor
                    DECLARE CUR_SolicitudVacaciones CURSOR LOCAL
                    FOR SELECT sva.Id, 
                               sva.FechaInicioDisfrute, 
                               sva.FechaFinDisfrute, 
                               sva.Estado, 
                               sva.FuncionarioId, 
                               sva.FechaPago, 
                               sva.NominaFuncionarioId
                        FROM SolicitudVacaciones sva
                        WHERE sva.Estado <> @SolicitudVacacionesCancelada
                              AND sva.Estado <> @SolicitudVacacionesRechazada
                              AND sva.Estado <> @SolicitudVacionesTerminada
                              AND sva.EstadoRegistro = @AuditoriaActivo;
                    OPEN CUR_SolicitudVacaciones;
                    FETCH NEXT FROM CUR_SolicitudVacaciones INTO @SolicitudVacacionesId, @FechaInicioDisfrute, @FechaFinDisfrute, @Estado, @FuncionarioId, @FechaPago, @NominaFuncionarioId;
                    WHILE @@fetch_status = 0
                        BEGIN

                            -- Actualiza cuando estado Autorizada
                            IF @Estado = @SolicitudVacacionesAutorizada
                                BEGIN
                                    IF(@FechaPago >= @Fecha
                                       AND @NominaFuncionarioId IS NULL)
                                        BEGIN
                                            -- Consulta la liquidación de la nómina para el funcionario
                                            SET @NominaFuncionarioId =
                                            (
                                                SELECT nfu.Id
                                                FROM NominaFuncionario nfu
                                                     INNER JOIN Nomina nom ON nom.Id = nfu.NominaId
                                                     INNER JOIN TipoLiquidacion tli ON tli.Id = nom.TipoLiquidacionId
                                                WHERE nfu.FuncionarioId = @FuncionarioId
                                                      AND tli.Codigo =
                                                (
                                                    SELECT CODIGO_VACACIONES
                                                    FROM util.VW_ConstanteCodigoTipoLiquidacion
                                                )
                                                      AND nfu.Estado = @NominaFuncionarioLiquidado
                                                
                                            );
                                            IF @NominaFuncionarioId IS NOT NULL
                                                BEGIN
                                                    --Actualiza el registro de la solicitud de vacaciones
                                                    UPDATE SolicitudVacaciones
                                                      SET 
                                                          SolicitudVacaciones.NominaFuncionarioId = @NominaFuncionarioId
                                                    WHERE Id = @SolicitudVacacionesId;
                                                    SET @RegistrosAfectados = @RegistrosAfectados + 1;
                                            END;
                                    END;
                                    IF @FechaInicioDisfrute <= @Fecha
                                        BEGIN
                                            -- Actualiza  estado de la solicitud a EnCurso
                                            UPDATE SolicitudVacaciones
                                              SET 
                                                  Estado = @SolicitudVacacionesEnCurso
                                            WHERE Id = @SolicitudVacacionesId;
											SET @RegistrosAfectados = @RegistrosAfectados + 1;

                                            -- Actualiza el estado del funcionario a en vacaciones.
                                            UPDATE Funcionario
                                              SET 
                                                  Estado = @FuncionarioEnVacaciones
                                            WHERE Id = @FuncionarioId;
                                            SET @RegistrosAfectados = @RegistrosAfectados + 1;
                                    END;
                            END;

                            -- Actualiza cuando estado en curso
                            IF @Estado = @SolicitudVacacionesEnCurso
                                BEGIN
                                    IF @FechaFinDisfrute <= @Fecha
                                        BEGIN
                                            -- Actualiza  estado de la solicitud a Terminada
                                            UPDATE SolicitudVacaciones
                                              SET 
                                                  Estado = @SolicitudVacionesTerminada
                                            WHERE Id = @SolicitudVacacionesId;
											SET @RegistrosAfectados = @RegistrosAfectados + 1;
                                            -- Actualiza el estado del funcionario a en activo.
                                            UPDATE Funcionario
                                              SET 
                                                  Estado = @FuncionarioActivo
                                            WHERE Id = @FuncionarioId;
                                            SET @RegistrosAfectados = @RegistrosAfectados + 1;
                                    END;
                            END;
                            FETCH NEXT FROM CUR_SolicitudVacaciones INTO @SolicitudVacacionesId, @FechaInicioDisfrute, @FechaFinDisfrute, @Estado, @FuncionarioId, @FechaPago, @NominaFuncionarioId;
            END;
                    CLOSE CUR_SolicitudVacaciones;
                    DEALLOCATE CUR_SolicitudVacaciones;

                    SET @Resultado = 'Se afectaron ' + CONVERT(VARCHAR, @RegistrosAfectados) + ' solicitud de vacaciones.';

					EXECUTE [dbo].[USP_TareaProgramadaLog] 
                            @UsuarioOperacion = @UsuarioOperacion, 
                            @Estado = @TareaProgramadaLogExitoso, 
                            @Resultado = @Resultado, 
                            @Alias = @Alias;

                    -- Actualiza el registro de la tarea programada
                    UPDATE dbo.TareaProgramada
                      SET 
                          dbo.TareaProgramada.EnEjecucion = 0
                    WHERE Alias = @Alias;


                    -- Cierre de la transacción

                    IF @@TRANCOUNT > 0
                        BEGIN
                            IF XACT_STATE() = 1
                                BEGIN
                                    COMMIT TRAN SolicitudVacaciones;
                            END;
                                ELSE
                                BEGIN
                                    EXEC util.USP_GenerarExcepcion 
                                         50000, 
                                         'No se puede confirmar la transacción.  Error desconocido.';
                            END;
                    END;
            END;
        END TRY
        BEGIN CATCH

            -- Rollback de la transacción
            IF XACT_STATE() <> 0
               AND @@TRANCOUNT > 0
                BEGIN
                    ROLLBACK;
            END;

            -- Se almacena la información del error
            EXEC util.USP_Registrarerror 
                 @NombreObjeto, 
                 @Parametros;

            -- Se lanza la excepción
            EXEC util.USP_LanzarExcepcion;
        END CATCH;
    END;
]]>
</sql>
<rollback>
<sql endDelimiter="GO" splitStatements="true">
<![CDATA[
DROP PROCEDURE [dbo].[USP_ActualizarSolicitudVacaciones];
]]>
</sql>
</rollback>
</changeSet>

</databaseChangeLog>