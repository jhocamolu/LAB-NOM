<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd">

<changeSet author="lestrada" id="USP_ActualizarSolicitudVacaciones_V2">
<comment>Migración general</comment>
<sql endDelimiter="GO" splitStatements="true">
<![CDATA[
IF OBJECT_ID('dbo.USP_ActualizarSolicitudVacaciones', 'P') IS NULL
BEGIN
    EXECUTE ('CREATE PROCEDURE dbo.USP_ActualizarSolicitudVacaciones as SELECT 1');
END;
GO
-- =============================================
-- Author:		Laura Katherine Estrada Arango
-- Create date: 29/04/2020
-- Description:	Procedimiento almacenado, el cual se encarga de actualizar 
--				la información de la solicitud de vacaciones para el funcionario.
-- =============================================
ALTER PROCEDURE [dbo].[USP_ActualizarSolicitudVacaciones]
AS
    BEGIN

        --------------------------------------------------------------------------
        -- Instrucciones de configuración y manejo de errores
        --------------------------------------------------------------------------
        SET XACT_ABORT, NOCOUNT, ANSI_NULLS, QUOTED_IDENTIFIER ON;
        DECLARE @Parametros VARCHAR(MAX)= 'NULL';
        DECLARE @NombreObjeto VARCHAR(256)= OBJECT_NAME(@@PROCID);

        --------------------------------------------------------------------------
        -- Variables
        --------------------------------------------------------------------------
        DECLARE @FechaInicioDisfrute DATE;
		DECLARE @FechaFinDisfrute DATE;
		DECLARE @FechaPago DATE;
		DECLARE @Estado VARCHAR(30);
		DECLARE @FechaActual DATE = CONVERT(DATE,GETDATE());
		DECLARE @SolicitudVacacionesId INT;
		DECLARE @NominaFuncionarioId INT;
		DECLARE @FuncionarioId INT;

        --------------------------------------------------------------------------
        -- Proceso
        --------------------------------------------------------------------------
        BEGIN TRY

            -- Inicio de la transacción
            BEGIN TRAN SolicitudVacaciones;

            -- Crea Cursor
            DECLARE CUR_SolicitudVacaciones CURSOR LOCAL
            FOR SELECT sva.Id, sva.FechaInicioDisfrute, sva.FechaFinDisfrute, sva.Estado, sva.FuncionarioId, sva.FechaPago, sva.NominaFuncionarioId
				FROM 
				SolicitudVacaciones sva
				WHERE sva.Estado <>  ( SELECT util.VW_ConstanteEstado.SOLICITUDVACACIONES_CANCELADA FROM  util.VW_ConstanteEstado ) AND
				sva.Estado <> ( SELECT SOLICITUDVACACIONES_RECHAZADA FROM util.VW_ConstanteEstado ) AND
				sva.Estado <> ( SELECT SOLICITUDVACACIONES_TERMINADA FROM util.VW_ConstanteEstado ) AND
				sva.EstadoRegistro = ( SELECT AUDITORIA_ACTIVO FROM util.VW_ConstanteEstado );
            OPEN CUR_SolicitudVacaciones;
            FETCH NEXT FROM CUR_SolicitudVacaciones INTO @SolicitudVacacionesId, @FechaInicioDisfrute, @FechaFinDisfrute, @Estado,@FuncionarioId,@FechaPago,@NominaFuncionarioId;
            WHILE @@fetch_status = 0
                BEGIN
                  
					-- Actualiza cuando estado Autorizada
                    IF @Estado =
                    (
                        SELECT SOLICITUDVACACIONES_AUTORIZADA
                        FROM util.VW_ConstanteEstado
                    )
                    BEGIN
					
						IF (@FechaPago >= @FechaActual AND @NominaFuncionarioId IS NULL)
						BEGIN
							-- Consulta la liquidación de la nómina para el funcionario
							SET @NominaFuncionarioId =	(SELECT nfu.Id FROM NominaFuncionario nfu 
							INNER JOIN Nomina nom ON nom.Id = nfu.NominaId
							INNER JOIN TipoLiquidacion tli ON tli.Id = nom.TipoLiquidacionId	
							WHERE nfu.FuncionarioId = @FuncionarioId
							AND
							tli.Codigo =(SELECT CODIGO_VACACIONES FROM util.VW_ConstanteCodigoTipoLiquidacion) 
							AND nfu.Estado = (SELECT vce.NOMINAFUNCIONARIO_LIQUIDADO FROM util.VW_ConstanteEstado vce))
							
							IF @NominaFuncionarioId  IS NOT NULL
							BEGIN
								--Actualiza el registro de la solicitud de vacaciones
								UPDATE SolicitudVacaciones
								SET 
									SolicitudVacaciones.NominaFuncionarioId = @NominaFuncionarioId
								WHERE Id = @SolicitudVacacionesId;
							END
						END

                        IF @FechaInicioDisfrute <= @FechaActual
						BEGIN
							-- Actualiza  estado de la solicitud a EnCurso
							UPDATE SolicitudVacaciones
								SET 
									Estado = 
									(
										SELECT SOLICITUDVACACIONES_ENCURSO
										FROM util.VW_ConstanteEstado
									)
							WHERE Id = @SolicitudVacacionesId;
							-- Actualiza el estado del funcionario a en vacaciones.
							UPDATE Funcionario 
								SET 
									Estado = 
									(
										SELECT FUNCIONARIO_ENVACACIONES
										FROM util.VW_ConstanteEstado
									)
								WHERE Id = @FuncionarioId
						END;
                    END;

					-- Actualiza cuando estado en curso
                    IF @Estado =
                    (
                        SELECT SOLICITUDVACACIONES_ENCURSO
                        FROM util.VW_ConstanteEstado
                    )
                    BEGIN
                        IF @FechaFinDisfrute <= @FechaActual
						BEGIN
							-- Actualiza  estado de la solicitud a Terminada
							UPDATE SolicitudVacaciones
								SET 
									Estado = 
									(
										SELECT SOLICITUDVACACIONES_TERMINADA
										FROM util.VW_ConstanteEstado
									)
							WHERE Id = @SolicitudVacacionesId;
							-- Actualiza el estado del funcionario a en activo.
							UPDATE Funcionario 
								SET 
									Estado = 
									(
										SELECT FUNCIONARIO_ACTIVO
										FROM util.VW_ConstanteEstado
									)
								WHERE Id = @FuncionarioId
						END;
                    END;
				 
                   FETCH NEXT FROM CUR_SolicitudVacaciones INTO @SolicitudVacacionesId, @FechaInicioDisfrute, @FechaFinDisfrute, @Estado,@FuncionarioId,@FechaPago,@NominaFuncionarioId;

                END;
            CLOSE CUR_SolicitudVacaciones;
            DEALLOCATE CUR_SolicitudVacaciones;
            
            -- Cierre de la transacción

            IF @@TRANCOUNT > 0
                BEGIN
                    IF XACT_STATE() = 1
                        BEGIN
                            COMMIT TRAN SolicitudVacaciones;
                    END;
                        ELSE
                        BEGIN
                            EXEC util.USP_GenerarExcepcion 
                                 50000, 
                                 'No se puede confirmar la transacción.  Error desconocido.';
                    END;
            END;
        END TRY
        BEGIN CATCH

            -- Rollback de la transacción
            IF XACT_STATE() <> 0
               AND @@TRANCOUNT > 0
                BEGIN
                    ROLLBACK;
            END;

            -- Se almacena la información del error
            EXEC util.USP_Registrarerror 
                 @NombreObjeto, 
                 @Parametros;

            -- Se lanza la excepción
            EXEC util.USP_LanzarExcepcion;
        END CATCH;
    END;
]]>
</sql>
<rollback>
<sql endDelimiter="GO" splitStatements="true">
<![CDATA[
DROP PROCEDURE [dbo].[USP_ActualizarSolicitudVacaciones];
]]>
</sql>
</rollback>
</changeSet>

</databaseChangeLog>