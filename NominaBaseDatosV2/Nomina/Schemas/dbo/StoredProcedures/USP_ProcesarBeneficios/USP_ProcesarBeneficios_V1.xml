<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd">

<changeSet author="lestrada" id="USP_ProcesarBeneficios_V1">
<comment>HT033 Procesar Beneficios</comment>
<sql endDelimiter="GO" splitStatements="true">
<![CDATA[
IF OBJECT_ID('dbo.USP_ProcesarBeneficios', 'P') IS NULL
    BEGIN
        EXECUTE ('CREATE PROCEDURE dbo.USP_ProcesarBeneficios as SELECT 1');
END;
GO
-- ==========================================================================================
-- Author:      Laura Katherine Estrada Arango	
-- Create date: 15/10/2020
-- Description: Se encarga de procesar los beneficios en estado autorizada, 
--				otorgada y condonada  para pasarlos al siguiente estado según 
--				las carácteristicas del tipo beneficio.
--			 
-- Parameters:
--  @Fecha:					Fecha para la cual se hace el proceso
--  @UsuarioOperacion:	    Usuario que realiza la operación
--  @Estado:			    Estado resultado del proceso
--  @Resultado:				Descripción del resultado
-- ==========================================================================================

ALTER PROCEDURE [dbo].[USP_ProcesarBeneficios] @Fecha            DATE, 
                                               @UsuarioOperacion VARCHAR(255), 
                                               @Alias            VARCHAR(255), 
                                               @Estado           VARCHAR(255) OUTPUT, 
                                               @Resultado        TEXT OUTPUT
AS
    BEGIN

        --------------------------------------------------------------------------
        -- Instrucciones de configuración y manejo de errores
        --------------------------------------------------------------------------
        SET XACT_ABORT, NOCOUNT, ANSI_NULLS, QUOTED_IDENTIFIER ON;
        DECLARE @Parametros VARCHAR(MAX)= CONCAT('@UsuarioOperacion=', CONVERT(VARCHAR, @UsuarioOperacion), '&', '@Fecha=', CONVERT(VARCHAR, @Fecha), '&', '@Alias=', CONVERT(VARCHAR, @Alias));
        DECLARE @NombreObjeto VARCHAR(256)= OBJECT_NAME(@@PROCID);

        --------------------------------------------------------------------------
        -- Variables
        --------------------------------------------------------------------------
        DECLARE @AuditoriaActivo VARCHAR(255);
        DECLARE @BeneficioAutorizado VARCHAR(255);
        DECLARE @BeneficioOtorgado VARCHAR(255);
        DECLARE @BeneficioEnCondonacion VARCHAR(255);
        DECLARE @BeneficioCondonado VARCHAR(255);
        DECLARE @BeneficioEnReembolso VARCHAR(255);
		DECLARE @BeneficioFinalizado VARCHAR(255); 
        DECLARE @BeneficioId INT;
        DECLARE @BeneficioEstado VARCHAR(255);
        DECLARE @BeneficioNuevoEstado VARCHAR(255) = '';
		DECLARE @BeneficioOpcionAuxilioEducativo VARCHAR(255);        
		DECLARE @BeneficioPermiteDescuentoNomina BIT;
		DECLARE @BeneficioNotaAcademica FLOAT;
		DECLARE @BeneficioFechaModificacion DATE;
		DECLARE @TipoBeneficioId INT;
		DECLARE @NotaAcademicaParametro VARCHAR(255);
		DECLARE @TiempoPermanenciaBeneficio VARCHAR(255);
		DECLARE @TiempoTranscurrido INT;
        DECLARE @TareaProgramadaLogExitoso VARCHAR(255);
        DECLARE @TareaProgramadaLogFallido VARCHAR(255);
        DECLARE @Contador INT= 0;
        DECLARE @FechaActual DATE= CONVERT(DATE, GETDATE());
        DECLARE @ParametroFecha DATE= CONVERT(DATE, '1900-01-01');
        --------------------------------------------------------------------------
        -- Proceso
        --------------------------------------------------------------------------
        BEGIN TRY
			SET @NotaAcademicaParametro = (SELECT util.UFS_ObtenerParametro
                        (
                        (
                            SELECT NOTAACADEMICABENEFICIO
                            FROM util.VW_ConstanteParametroGeneral
                        ), null
                        ));
			SET @TiempoPermanenciaBeneficio	= (SELECT util.UFS_ObtenerParametro
                        (
                        (
                            SELECT util.VW_ConstanteParametroGeneral.TIEMPOPERMANENCIABENEFICIO
                            FROM util.VW_ConstanteParametroGeneral
                        ), null
                        ));
            SELECT @AuditoriaActivo = vc.AUDITORIA_ACTIVO, 
                   @BeneficioAutorizado = vc.BENEFICIO_AUTORIZADA, 
                   @BeneficioCondonado = vc.BENEFICIO_CONDONADA, 
                   @BeneficioEnCondonacion = vc.BENEFICIO_ENCONDONACION, 
                   @BeneficioEnReembolso = vc.BENEFICIO_ENREEMBOLSO, 
                   @BeneficioOtorgado = vc.BENEFICIO_OTORGADA, 
				   @BeneficioFinalizado = vc.BENEFICIO_FINALIZADA,
                   @TareaProgramadaLogExitoso = vc.TAREAPROGRAMADALOG_EXITOSO, 
                   @TareaProgramadaLogFallido = vc.TAREAPROGRAMADALOG_FALLIDO
            FROM util.VW_ConstanteEstado vc;
            IF(
            (
                SELECT EnEjecucion
                FROM dbo.TareaProgramada
                WHERE Alias = @Alias
            ) = 1)
                BEGIN
                    EXECUTE [dbo].[USP_RegistrarTareaProgramadaLog] 
                            @UsuarioOperacion = @UsuarioOperacion, 
                            @Estado = @TareaProgramadaLogFallido, 
                            @Resultado = @Resultado, 
                            @Alias = @Alias;
            END;
                ELSE
                BEGIN
                    IF @Fecha <> @ParametroFecha
                       AND @Fecha IS NOT NULL
                        BEGIN
                            SET @FechaActual = @Fecha;
                    END;

                    -- Inicio de la transacción
                    BEGIN TRAN ProcesarBeneficios;

                    -- Actualiza el registro de la tarea programada
                    UPDATE dbo.TareaProgramada
                      SET 
                          dbo.TareaProgramada.EnEjecucion = 1
                    WHERE Alias = @Alias;

                    -- Crea Cursor
                    DECLARE CUR_ProcesarBeneficios CURSOR LOCAL
                    FOR SELECT ben.Id, 
								tbe.Id,
                               ben.Estado, 
                               tbe.PermiteDescuentoNomina,
							   ben.OpcionAuxilioEducativo,
							   ben.NotaAcademica,
							   ben.FechaModificacion
                        FROM dbo.Beneficio ben
                             INNER JOIN dbo.TipoBeneficio tbe ON ben.TipoBeneficioId = tbe.Id
                        WHERE ben.EstadoRegistro = @AuditoriaActivo
                              AND (ben.Estado = @BeneficioAutorizado
                                   OR ben.Estado = @BeneficioOtorgado
                                   OR ben.Estado = @BeneficioEnCondonacion
                                   OR ben.Estado = @BeneficioCondonado);
                    OPEN CUR_ProcesarBeneficios;
                    FETCH NEXT FROM CUR_ProcesarBeneficios 
						INTO @BeneficioId,
						@TipoBeneficioId,
						@BeneficioEstado, 
						@BeneficioPermiteDescuentoNomina, 
						@BeneficioOpcionAuxilioEducativo, 
						@BeneficioNotaAcademica,
						@BeneficioFechaModificacion;
                    WHILE @@fetch_status = 0
                        BEGIN
							-- Estado del beneficio autorizado
                            IF @BeneficioEstado = @BeneficioAutorizado
                                BEGIN
								IF @BeneficioPermiteDescuentoNomina = 0
									BEGIN
										SET @BeneficioNuevoEstado = @BeneficioFinalizado;
									END
                            END;
							-- Estado del beneficio otorgado
                            IF @BeneficioEstado = @BeneficioOtorgado
                                BEGIN
                                    IF @BeneficioPermiteDescuentoNomina = 1
									BEGIN
										IF @BeneficioOpcionAuxilioEducativo = 'Opcion1Condonacion' OR
											@TipoBeneficioId = 4
										BEGIN
											SET @BeneficioNuevoEstado = @BeneficioEnReembolso;
										END
										ELSE
										BEGIN
											SET @BeneficioNuevoEstado = @BeneficioEnCondonacion;
										END
									END
									ELSE
									BEGIN
										SET @BeneficioNuevoEstado = @BeneficioFinalizado;
									END
                            END;
							-- Estado del beneficio en condonación
                            IF @BeneficioEstado = @BeneficioEnCondonacion
                                BEGIN
								IF	@BeneficioNotaAcademica IS NOT NULL AND @BeneficioNotaAcademica <> 0
								BEGIN
									IF	@BeneficioNotaAcademica >= @NotaAcademicaParametro
									BEGIN
										SET @BeneficioNuevoEstado = @BeneficioEnCondonacion;
									END
									ELSE
									BEGIN
										SET @BeneficioNuevoEstado = @BeneficioEnReembolso;
									END
								END
                            END;
							-- Estado del beneficio condonado
                            IF @BeneficioEstado = @BeneficioCondonado
                                BEGIN
									SET @TiempoTranscurrido = (SELECT DATEDIFF(DAY, @BeneficioFechaModificacion, GETDATE()) + 1);
									IF @TiempoTranscurrido > @TiempoPermanenciaBeneficio
									BEGIN
										SET @BeneficioNuevoEstado = @BeneficioFinalizado;
									END
                            END;

							-- Actualiza el estado del registro
							IF @BeneficioNuevoEstado <> ''
							BEGIN
								UPDATE dbo.Beneficio 
								  SET 
									  dbo.Beneficio.Estado = @BeneficioNuevoEstado,
									  dbo.Beneficio.FechaModificacion = GETDATE(),
									  dbo.Beneficio.ModificadoPor = @UsuarioOperacion
								WHERE Id = @BeneficioId;
						
								SET @Contador = @Contador + 1;
							END
                            FETCH NEXT FROM CUR_ProcesarBeneficios 
						FETCH NEXT FROM CUR_ProcesarBeneficios 
						INTO @BeneficioId,
						@TipoBeneficioId,
						@BeneficioEstado, 
						@BeneficioPermiteDescuentoNomina, 
						@BeneficioOpcionAuxilioEducativo, 
						@BeneficioNotaAcademica,
						@BeneficioFechaModificacion;
            END;
                    CLOSE CUR_ProcesarBeneficios;
                    DEALLOCATE CUR_ProcesarBeneficios;
                    SET @Resultado = 'Se afectaron ' + CONVERT(VARCHAR, @Contador) + ' registros.';
                    EXECUTE [dbo].[USP_RegistrarTareaProgramadaLog] 
                            @UsuarioOperacion = @UsuarioOperacion, 
                            @Estado = @TareaProgramadaLogExitoso, 
                            @Resultado = @Resultado, 
                            @Alias = @Alias;

                    -- Actualiza el registro de la tarea programada
                    UPDATE dbo.TareaProgramada
                      SET 
                          dbo.TareaProgramada.EnEjecucion = 0
                    WHERE Alias = @Alias;
                    -- Cierre de la transacción

                    IF @@TRANCOUNT > 0
                        BEGIN
                            IF XACT_STATE() = 1
                                BEGIN
                                    COMMIT TRAN ProcesarBeneficios;
                            END;
                                ELSE
                                BEGIN
                                    EXEC util.USP_GenerarExcepcion 
                                         50000, 
                                         'No se puede confirmar la transacción.  Error desconocido.';
                            END;
                    END;
            END;
        END TRY
        BEGIN CATCH

            -- Rollback de la transacción
            IF XACT_STATE() <> 0
               AND @@TRANCOUNT > 0
                BEGIN
                    ROLLBACK;
            END;

            -- Se almacena la información del error
            EXEC util.USP_Registrarerror 
                 @NombreObjeto, 
                 @Parametros;

            -- Se lanza la excepción
            EXEC util.USP_LanzarExcepcion;
        END CATCH;
    END;

]]>
</sql>
<rollback>
<sql endDelimiter="GO" splitStatements="true">
<![CDATA[
DROP PROCEDURE [dbo].[USP_ProcesarBeneficios];
]]>
</sql>
</rollback>
</changeSet>

</databaseChangeLog>