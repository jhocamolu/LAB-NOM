<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd">

<changeSet author="lestrada" id="USP_ActualizarLibroVacaciones_V4">
<comment>se cambia nomnre de procedimiento  de USP_TareaProgramadaLog a USP_RegistrarTareaProgramadaLog </comment>
<sql endDelimiter="GO" splitStatements="true">
<![CDATA[
IF OBJECT_ID('dbo.USP_ActualizarLibroVacaciones', 'P') IS NULL
BEGIN
    EXECUTE ('CREATE PROCEDURE dbo.USP_ActualizarLibroVacaciones as SELECT 1');
END;
GO
-- =============================================
-- Author:		Laura Katherine Estrada Arango
-- Create date: 23/04/2020
-- Description:	Procedimiento almacenado, el cual se encarga de actualizar 
--				la información del libro de vacaciones para el funcionario.
-- =============================================
ALTER PROCEDURE [dbo].[USP_ActualizarLibroVacaciones] @Fecha            DATE, 
                                                      @UsuarioOperacion VARCHAR(255), 
                                                      @Alias            VARCHAR(255)
AS
    BEGIN

        --------------------------------------------------------------------------
        -- Instrucciones de configuración y manejo de errores
        --------------------------------------------------------------------------
        SET XACT_ABORT, NOCOUNT, ANSI_NULLS, QUOTED_IDENTIFIER ON;
        DECLARE @Parametros VARCHAR(MAX)= CONCAT('@UsuarioOperacion=', CONVERT(VARCHAR, @UsuarioOperacion), '&', '@Fecha=', CONVERT(VARCHAR, @Fecha), '&', '@Alias=', CONVERT(VARCHAR, @Alias));
        DECLARE @NombreObjeto VARCHAR(256)= OBJECT_NAME(@@PROCID);

        --------------------------------------------------------------------------
        -- Variables
        --------------------------------------------------------------------------
        DECLARE @FuncionarioId INT;
        DECLARE @ContratoId INT;
        DECLARE @EstadoContrato VARCHAR(255);
        DECLARE @Tipo VARCHAR(255);
        DECLARE @LibroVacacionesId INT;
        DECLARE @InicioCausacion DATE;
        DECLARE @FinCausacion DATE;
        DECLARE @FechaActual DATE= CONVERT(DATE, GETDATE());
        DECLARE @DiasCausados INT;
        DECLARE @DiasDisponibles FLOAT;
        DECLARE @DiasDisfrute INT;
        DECLARE @DiasDinero INT;
        DECLARE @DiasInterrupcion INT;
        DECLARE @DiasDebe FLOAT;
        DECLARE @DiasDebeAnteriores FLOAT;
        DECLARE @BanderaActualizar BIT;
        DECLARE @Cantidad INT;
        DECLARE @DiasTrabajados INT;
        DECLARE @Contador INT= 0;
        DECLARE @Resultado VARCHAR(255)= '';
        --------------------------------------------------------------------------
        -- Proceso
        --------------------------------------------------------------------------
        BEGIN TRY
            DECLARE @AuditoriaActivo VARCHAR(255);
            DECLARE @LibroVacacionesAnticipado VARCHAR(255);
            DECLARE @LibroVacacionesCausado VARCHAR(255);
            DECLARE @ContratoVigente VARCHAR(255);
            DECLARE @ContratoTerminado VARCHAR(255);
            DECLARE @SolicitudVacacionesAutorizada VARCHAR(255);
            DECLARE @SolicitudVacacionesEnCurso VARCHAR(255);
            DECLARE @SolicitudVacacionesTerminada VARCHAR(255);
            DECLARE @TareaProgramadaLogExitoso VARCHAR(255);
            DECLARE @TareaProgramadaLogFallido VARCHAR(255);
            SELECT @AuditoriaActivo = AUDITORIA_ACTIVO, 
                   @LibroVacacionesAnticipado = LIBROVACACIONES_ANTICIPADO, 
                   @LibroVacacionesCausado = LIBROVACACIONES_CAUSADO, 
                   @ContratoVigente = CONTRATO_VIGENTE, 
                   @ContratoTerminado = CONTRATO_TERMINADO, 
                   @SolicitudVacacionesAutorizada = SOLICITUDVACACIONES_AUTORIZADA, 
                   @SolicitudVacacionesEnCurso = SOLICITUDVACACIONES_ENCURSO, 
                   @SolicitudVacacionesTerminada = SOLICITUDVACACIONES_TERMINADA, 
                   @TareaProgramadaLogExitoso = TAREAPROGRAMADALOG_EXITOSO, 
                   @TareaProgramadaLogFallido = TAREAPROGRAMADALOG_FALLIDO
            FROM util.VW_ConstanteEstado;

            IF(
            (
                SELECT EnEjecucion
                FROM dbo.TareaProgramada
                WHERE Alias = @Alias
            ) = 1)
                BEGIN
                    EXECUTE [dbo].[USP_RegistrarTareaProgramadaLog] 
                            @UsuarioOperacion = @UsuarioOperacion, 
                            @Estado = @TareaProgramadaLogFallido, 
                            @Resultado = @Resultado, 
                            @Alias = @Alias;
            END;
                ELSE
                BEGIN
                    IF @Fecha IS NOT NULL
                        BEGIN
                            SET @FechaActual = @Fecha;
                    END;
                    DECLARE @DiasLey INT=
                    (
                        SELECT util.UFS_ObtenerParametro
                        (
                        (
                            SELECT DIASLEY
                            FROM util.VW_ConstanteParametroGeneral
                        ), null
                        )
                    );
                    DECLARE @DiasAno INT=
                    (
                        SELECT util.UFS_ObtenerParametro
                        (
                        (
                            SELECT DIASTRABAJADOS
                            FROM util.VW_ConstanteParametroGeneral
                        ), null
                        )
                    );

                    -- Inicio de la transacción
                    BEGIN TRAN LibroVacaciones;

                    -- Actualiza el registro de la tarea programada
                    UPDATE dbo.TareaProgramada
                      SET 
                          dbo.TareaProgramada.EnEjecucion = 1
                    WHERE Alias = @Alias;

                    -- Crea Cursor
                    DECLARE CUR_LibroVacaciones CURSOR LOCAL
                    FOR SELECT lib.Id, 
                               con.FuncionarioId, 
                               lib.ContratoId, 
                               lib.DiasCausados, 
                               con.Estado, 
                               lib.InicioCausacion, 
                               lib.FinCausacion
                        FROM LibroVacaciones lib
                             INNER JOIN Contrato con ON con.Id = lib.ContratoId
                        WHERE lib.EstadoRegistro = @AuditoriaActivo
                              AND con.EstadoRegistro = @AuditoriaActivo
                              AND lib.Tipo = @LibroVacacionesAnticipado
                              AND (con.Estado = @ContratoVigente
                                   OR con.Estado = @ContratoTerminado);
                    OPEN CUR_LibroVacaciones;
                    FETCH NEXT FROM CUR_LibroVacaciones INTO @LibroVacacionesId, @FuncionarioId, @ContratoId, @DiasCausados, @EstadoContrato, @InicioCausacion, @FinCausacion;
                    WHILE @@fetch_status = 0
                        BEGIN
                            SET @BanderaActualizar = 0;
                            SET @DiasTrabajados = 0;
                            SET @DiasCausados = 0;
                            SET @DiasDisponibles = 0;
                            SET @DiasDisfrute = 0;
                            SET @DiasDinero = 0;
                            SET @DiasDebe = 0;
                            SET @DiasDebeAnteriores = 0;

                            --Obtener días interrupción 
                            EXECUTE @DiasInterrupcion = [dbo].[USP_ObtenerDiasInterrupcion] 
                                    @LibroVacacionesId;

                            -- Consulta Días a pagar del funcionario.
						EXEC @DiasTrabajados = [dbo].[USP_ObtenerDiasApagar] 
							 @FuncionarioId = @FuncionarioId, 
							 @FechaInicial = @InicioCausacion, 
							 @FechaFinal = @FechaActual, 
							 @Cantidad = @Cantidad;

                            -- Calcula días causados
                            SET @DiasCausados = (@DiasLey * @DiasTrabajados) / @DiasAno;

                            -- Obtener días disfrute, días en dinero
                            IF(
                            (
                                SELECT COUNT(Id)
                                FROM SolicitudVacaciones
                                WHERE LibroVacacionesId = @LibroVacacionesId
                                      AND (Estado = @SolicitudVacacionesAutorizada
                                           OR Estado = @SolicitudVacacionesEnCurso
                                           OR Estado = @SolicitudVacacionesTerminada)
                            ) >= 1)
                                BEGIN
                                    SELECT @DiasDisfrute = SUM(DiasDisfrute), 
                                           @DiasDinero = SUM(DiasDinero)
                                    FROM SolicitudVacaciones
                                    WHERE LibroVacacionesId = @LibroVacacionesId
                                          AND (Estado = @SolicitudVacacionesAutorizada
                                               OR Estado = @SolicitudVacacionesEnCurso
                                               OR Estado = @SolicitudVacacionesTerminada);
                            END;

                            -- Obtener días que debe de períodos anteriores
                            IF(
                            (
                                SELECT COUNT(Id)
                                FROM dbo.LibroVacaciones
                                WHERE ContratoId = @ContratoId
                                      AND DiasDebe <> 0
                                      AND Id <> @LibroVacacionesId
                            ) >= 1)
                                BEGIN
                                    SELECT @DiasDebeAnteriores = SUM(DiasDebe)
                                    FROM dbo.LibroVacaciones
                                    WHERE ContratoId = @ContratoId;
                            END;

                            -- Calcula días disponibles 
                            IF((@DiasDisfrute + @DiasDinero) > (@DiasCausados + @DiasInterrupcion))
                                BEGIN
                                    SET @DiasDisponibles = 0;
                                    SET @DiasDebe = (@DiasDisfrute + @DiasDinero + @DiasDebeAnteriores) - (@DiasCausados + @DiasInterrupcion);
                            END;
                                ELSE
                                BEGIN
                                    SET @DiasDisponibles = (@DiasCausados + @DiasInterrupcion) - (@DiasDisfrute + @DiasDinero + @DiasDebeAnteriores);
                                    SET @DiasDebe = 0;
                            END;

                            -- Actualiza tipo a Causado si el contrato está en terminado
                            IF @EstadoContrato = @ContratoTerminado
                                BEGIN
                                    SET @Tipo = @LibroVacacionesCausado;
                                    SET @BanderaActualizar = 1;
                            END;

                            -- Valida que el estado del contrato sea vigente
                            IF @EstadoContrato = @ContratoVigente
                                BEGIN
                                    IF(@FinCausacion = @FechaActual)
                                        BEGIN
                                            SET @Tipo = @LibroVacacionesCausado;
                                            SET @BanderaActualizar = 1;

                                            -- Crear un nuevo registro en el libro de vacaciones
                                            INSERT INTO LibroVacaciones
                                            (EstadoRegistro, 
                                             CreadoPor, 
                                             FechaCreacion, 
                                             ContratoId, 
                                             InicioCausacion, 
                                             FinCausacion, 
                                             Tipo, 
                                             DiasTrabajados, 
                                             DiasCausados, 
                                             DiasDisponibles, 
                                             DiasDebe
                                            )
                                            VALUES
                                            (@AuditoriaActivo, 
                                             @UsuarioOperacion, 
                                             GETDATE(), 
                                             @ContratoId, 
                                             DATEADD(DAY, 1, @FinCausacion), 
                                             @FinCausacion, 
                                             @LibroVacacionesAnticipado, 
                                             @DiasTrabajados, 
                                             @DiasCausados, 
                                             @DiasDisponibles, 
                                             @DiasDebe
                                            );
                                            SET @Contador = @Contador + 1;
                                    END;
                                    IF(@FinCausacion > @FechaActual)
                                        BEGIN
                                            SET @Tipo = @LibroVacacionesAnticipado;
                                            SET @BanderaActualizar = 1;
                                    END;
                            END;
                            IF(@BanderaActualizar = 1)
                                BEGIN
                                    SET @Contador = @Contador + 1;
                                    -- Actualiza tipo a Causado
                                    UPDATE LibroVacaciones
                                      SET 
                                          ModificadoPor = @UsuarioOperacion, 
                                          FechaModificacion = GETDATE(), 
                                          DiasTrabajados = @DiasTrabajados, 
                                          DiasCausados = @DiasCausados, 
                                          DiasDisponibles = @DiasDisponibles, 
                                          Tipo = @Tipo, 
                                          DiasDebe = @DiasDebe
                                    WHERE Id = @LibroVacacionesId;
                            END;
                            FETCH NEXT FROM CUR_LibroVacaciones INTO @LibroVacacionesId, @FuncionarioId, @ContratoId, @DiasCausados, @EstadoContrato, @InicioCausacion, @FinCausacion;
            END;
                    CLOSE CUR_LibroVacaciones;
                    DEALLOCATE CUR_LibroVacaciones;
                    SET @Resultado = 'Se afectaron ' + CONVERT(VARCHAR, @Contador) + ' registros.';
                    EXECUTE [dbo].[USP_RegistrarTareaProgramadaLog] 
                            @UsuarioOperacion = @UsuarioOperacion, 
                            @Estado = @TareaProgramadaLogExitoso, 
                            @Resultado = @Resultado, 
                            @Alias = @Alias;

                    -- Actualiza el registro de la tarea programada
                    UPDATE dbo.TareaProgramada
                      SET 
                          dbo.TareaProgramada.EnEjecucion = 0
                    WHERE Alias = @Alias;
                    -- Cierre de la transacción

                    IF @@TRANCOUNT > 0
                        BEGIN
                            IF XACT_STATE() = 1
                                BEGIN
                                    COMMIT TRAN LibroVacaciones;
                            END;
                                ELSE
                                BEGIN
                                    EXEC util.USP_GenerarExcepcion 
                                         50000, 
                                         'No se puede confirmar la transacción.  Error desconocido.';
                            END;
                    END;
            END;
        END TRY
        BEGIN CATCH

            -- Rollback de la transacción
            IF XACT_STATE() <> 0
               AND @@TRANCOUNT > 0
                BEGIN
                    ROLLBACK;
            END;

            -- Se almacena la información del error
            EXEC util.USP_Registrarerror 
                 @NombreObjeto, 
                 @Parametros;

            -- Se lanza la excepción
            EXEC util.USP_LanzarExcepcion;
        END CATCH;
    END;

]]>
</sql>
<rollback>
<sql endDelimiter="GO" splitStatements="true">
<![CDATA[
DROP PROCEDURE [dbo].[USP_ActualizarLibroVacaciones];
]]>
</sql>
</rollback>
</changeSet>

</databaseChangeLog>