<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd">

<changeSet author="dvillega" id="TR_CargarNovedades_V1">
<comment>HU054</comment>
<sql endDelimiter="GO" splitStatements="true">
<![CDATA[
IF OBJECT_ID('dbo.TR_CargarNovedades', 'TR') IS NULL
BEGIN
    EXECUTE ('CREATE TRIGGER dbo.TR_CargarNovedades ON dbo.NominaFuncionario AFTER INSERT as SELECT 1');
END;
GO

ALTER TRIGGER [dbo].[TR_CargarNovedades] ON [dbo].[NominaFuncionario]
AFTER INSERT
AS
     BEGIN

         --------------------------------------------------------------------------
         -- Instrucciones de configuración y manejo de errores
         --------------------------------------------------------------------------
         SET XACT_ABORT, NOCOUNT, ANSI_NULLS, QUOTED_IDENTIFIER ON;
         DECLARE @Parametros VARCHAR(MAX)= ''; -- = CONCAT('@Columna1=', CONVERT(VARCHAR, inserted.Columna1), '&', '@Columna2=', CONVERT(VARCHAR, @inserted.Columna2))
         DECLARE @NombreObjeto VARCHAR(256)= OBJECT_NAME(@@PROCID);
         DECLARE @MensajeExcepcion VARCHAR(255);

         --------------------------------------------------------------------------
         -- Variables
         --------------------------------------------------------------------------
         DECLARE @NominaId INT;
         DECLARE @FuncionarioId INT;
         DECLARE @NominaFuncionarioId INT;
         DECLARE @FechaInicio DATE;
         DECLARE @FechaFinal DATE;
         DECLARE @SubperiodoId INT;
         DECLARE @TipoLiquidacionId INT;
         DECLARE @TipoLiquidacionAnteriorId INT;
         DECLARE @UsuarioOperacion VARCHAR(255);
         DECLARE @ConceptoAnticipoCesantiasId INT;
         DECLARE @ConceptoVacacionesAnticipadasId INT;
         DECLARE @ConceptoVacacionesDineroId INT;
         DECLARE @ConceptoVacacionesTiempoId INT;

         DECLARE @AuditoriaActivo VARCHAR(255);
         DECLARE @ModuloLibranzas VARCHAR(255);
         DECLARE @ModuloEmbargos VARCHAR(255);
         DECLARE @ModuloAusentismos VARCHAR(255);
         DECLARE @ModuloBeneficios VARCHAR(255);
         DECLARE @ModuloHorasExtra VARCHAR(255);
         DECLARE @ModuloGastosDeViaje VARCHAR(255);
         DECLARE @ModuloOtrasNovedades VARCHAR(255);
         DECLARE @ModuloVacaciones VARCHAR(255);
         DECLARE @ModuloAnticipoCesatias VARCHAR(255);

         DECLARE @CargarLibranzas BIT;
         DECLARE @CargarEmbargos BIT;
         DECLARE @CargarAusentismos BIT;
         DECLARE @CargarBeneficios BIT;
         DECLARE @CargarHorasExtra BIT;
         DECLARE @CargarGastosDeViaje BIT;
         DECLARE @CargarOtrasNovedades BIT;
         DECLARE @CargarVacaciones BIT;
         DECLARE @CargarAnticipoCesatias BIT;

         --------------------------------------------------------------------------
         -- Proceso
         --------------------------------------------------------------------------
         BEGIN TRY

             -- Se consultan las constantes de los estados
             SELECT @AuditoriaActivo = vce.AUDITORIA_ACTIVO
             FROM util.VW_ConstanteEstado AS vce;

             -- Se consultan los módulos del sistema
             SELECT @ModuloLibranzas = vcms.LIBRANZAS,
                    @ModuloEmbargos = vcms.EMBARGOS,
                    @ModuloAusentismos = vcms.AUSENTISMOS,
                    @ModuloBeneficios = vcms.BENEFICIOS,
                    @ModuloHorasExtra = vcms.HORASEXTRA,
                    @ModuloGastosDeViaje = vcms.GASTOSVIAJE,
                    @ModuloOtrasNovedades = vcms.OTRASNOVEDADES,
                    @ModuloVacaciones = vcms.VACACIONES,
                    @ModuloAnticipoCesatias = vcms.ANTICIPOCESANTIAS
             FROM util.VW_ConstanteModuloSistema AS vcms;

             -- Se obtiene el concepto de anticipo de cesantías
             SET @ConceptoAnticipoCesantiasId =
             (
                 SELECT con.Id
                 FROM dbo.ConceptoNomina AS con
                 WHERE con.Alias =
                 (
                     SELECT util.UFS_ObtenerParametro
                     (
                     (
                         SELECT CONCEPTOANTICIPOCESANTIAS
                         FROM util.VW_ConstanteParametroGeneral
                     ), NULL
                     )
                 )
             );

             -- No se ha definido el procedimiento asociado a la fórmula para calcular el valor del concepto en conceptos no agrupadores
             IF @ConceptoAnticipoCesantiasId IS NULL
             BEGIN
                 SET @MensajeExcepcion = 'No se ha encontrado el concepto para los anticipos de cesantías.';
                 EXEC util.USP_GenerarExcepcion
                      50000,
                      @MensajeExcepcion;
             END;

             -- Se obtiene el concepto de vacaciones anticipadas
             SET @ConceptoVacacionesAnticipadasId =
             (
                 SELECT con.Id
                 FROM dbo.ConceptoNomina AS con
                 WHERE con.Alias =
                 (
                     SELECT util.UFS_ObtenerParametro
                     (
                     (
                         SELECT CONCEPTOVACACIONESANTICIPADAS
                         FROM util.VW_ConstanteParametroGeneral
                     ), NULL
                     )
                 )
             );

             -- No se ha definido el procedimiento asociado a la fórmula para calcular el valor del concepto en conceptos no agrupadores
             IF @ConceptoVacacionesAnticipadasId IS NULL
             BEGIN
                 SET @MensajeExcepcion = 'No se ha encontrado el concepto para las vacaciones anticipadas.';
                 EXEC util.USP_GenerarExcepcion
                      50000,
                      @MensajeExcepcion;
             END;

             -- Se obtiene el concepto de vacaciones en dinero
             SET @ConceptoVacacionesDineroId =
             (
                 SELECT con.Id
                 FROM dbo.ConceptoNomina AS con
                 WHERE con.Alias =
                 (
                     SELECT util.UFS_ObtenerParametro
                     (
                     (
                         SELECT CONCEPTOVACACIONESDINERO
                         FROM util.VW_ConstanteParametroGeneral
                     ), NULL
                     )
                 )
             );

             -- No se ha definido el procedimiento asociado a la fórmula para calcular el valor del concepto en conceptos no agrupadores
             IF @ConceptoVacacionesDineroId IS NULL
             BEGIN
                 SET @MensajeExcepcion = 'No se ha encontrado el concepto para las vacaciones en dinero.';
                 EXEC util.USP_GenerarExcepcion
                      50000,
                      @MensajeExcepcion;
             END;

             -- Se obtiene el concepto de vacaciones en tiempo
             SET @ConceptoVacacionesTiempoId =
             (
                 SELECT con.Id
                 FROM dbo.ConceptoNomina AS con
                 WHERE con.Alias =
                 (
                     SELECT util.UFS_ObtenerParametro
                     (
                     (
                         SELECT CONCEPTOVACACIONESTIEMPO
                         FROM util.VW_ConstanteParametroGeneral
                     ), NULL
                     )
                 )
             );

             -- No se ha definido el procedimiento asociado a la fórmula para calcular el valor del concepto en conceptos no agrupadores
             IF @ConceptoVacacionesTiempoId IS NULL
             BEGIN
                 SET @MensajeExcepcion = 'No se ha encontrado el concepto para las vacaciones en tiempo.';
                 EXEC util.USP_GenerarExcepcion
                      50000,
                      @MensajeExcepcion;
             END;

             -- Inicio de la transacción
             BEGIN TRAN CargarNovedades;

             -- Cursor para obtener la información de los funcionarios y de la nómina a la que se encuentran vinculado
             DECLARE CUR_Funcionarios CURSOR LOCAL
             FOR SELECT ins.FuncionarioId,
                        nom.Id,
                        nom.FechaInicio,
                        nom.FechaFinal,
                        nom.SubperiodoId,
                        nom.TipoLiquidacionId,
                        ins.CreadoPor,
                        ins.Id
                 FROM inserted AS ins
                      INNER JOIN dbo.Nomina AS nom ON(ins.NominaId = nom.Id);

             OPEN CUR_Funcionarios;

             FETCH NEXT FROM CUR_Funcionarios INTO @FuncionarioId, @NominaId, @FechaInicio, @FechaFinal, @SubperiodoId, @TipoLiquidacionId, @UsuarioOperacion, @NominaFuncionarioId;

             WHILE @@FETCH_STATUS = 0

             BEGIN

                 -- Si el tipo de liquidación es igual al de la iteración anterior no se vuelve a consultar la información
                 IF @TipoLiquidacionAnteriorId IS NULL OR @TipoLiquidacionAnteriorId != @TipoLiquidacionId
                 BEGIN
                     -- Se determina si se debe cargar las novedades
                     SET @CargarLibranzas =
                     (
                         SELECT Id
                         FROM dbo.TipoLiquidacionModulo AS tlm
                         WHERE tlm.TipoLiquidacionId = @TipoLiquidacionId
                               AND tlm.Modulo = @ModuloLibranzas
                               AND tlm.EstadoRegistro = @AuditoriaActivo
                     );

                     SET @CargarEmbargos =
                     (
                         SELECT Id
                         FROM dbo.TipoLiquidacionModulo AS tlm
                         WHERE tlm.TipoLiquidacionId = @TipoLiquidacionId
                               AND tlm.Modulo = @ModuloEmbargos
                               AND tlm.EstadoRegistro = @AuditoriaActivo
                     );

                     SET @CargarAusentismos =
                     (
                         SELECT Id
                         FROM dbo.TipoLiquidacionModulo AS tlm
                         WHERE tlm.TipoLiquidacionId = @TipoLiquidacionId
                               AND tlm.Modulo = @ModuloAusentismos
                               AND tlm.EstadoRegistro = @AuditoriaActivo
                     );

                     SET @CargarBeneficios =
                     (
                         SELECT Id
                         FROM dbo.TipoLiquidacionModulo AS tlm
                         WHERE tlm.TipoLiquidacionId = @TipoLiquidacionId
                               AND tlm.Modulo = @ModuloBeneficios
                               AND tlm.EstadoRegistro = @AuditoriaActivo
                     );

                     SET @CargarHorasExtra =
                     (
                         SELECT Id
                         FROM dbo.TipoLiquidacionModulo AS tlm
                         WHERE tlm.TipoLiquidacionId = @TipoLiquidacionId
                               AND tlm.Modulo = @ModuloHorasExtra
                               AND tlm.EstadoRegistro = @AuditoriaActivo
                     );

                     SET @CargarGastosDeViaje =
                     (
                         SELECT Id
                         FROM dbo.TipoLiquidacionModulo AS tlm
                         WHERE tlm.TipoLiquidacionId = @TipoLiquidacionId
                               AND tlm.Modulo = @ModuloGastosDeViaje
                               AND tlm.EstadoRegistro = @AuditoriaActivo
                     );

                     SET @CargarOtrasNovedades =
                     (
                         SELECT Id
                         FROM dbo.TipoLiquidacionModulo AS tlm
                         WHERE tlm.TipoLiquidacionId = @TipoLiquidacionId
                               AND tlm.Modulo = @ModuloOtrasNovedades
                               AND tlm.EstadoRegistro = @AuditoriaActivo
                     );

                     SET @CargarVacaciones =
                     (
                         SELECT Id
                         FROM dbo.TipoLiquidacionModulo AS tlm
                         WHERE tlm.TipoLiquidacionId = @TipoLiquidacionId
                               AND tlm.Modulo = @ModuloVacaciones
                               AND tlm.EstadoRegistro = @AuditoriaActivo
                     );

                     SET @CargarAnticipoCesatias =
                     (
                         SELECT Id
                         FROM dbo.TipoLiquidacionModulo AS tlm
                         WHERE tlm.TipoLiquidacionId = @TipoLiquidacionId
                               AND tlm.Modulo = @ModuloAnticipoCesatias
                               AND tlm.EstadoRegistro = @AuditoriaActivo
                     );
                 END;

                 -- Se carga cada una de las novedades
                 --
                 -- Carga de novedades de horas extras
                 IF @CargarHorasExtra = 1
                 BEGIN

                     EXEC [dbo].[USP_CargarNovedadesHorasExtras]
                          @NominaId = @NominaId,
                          @FuncionarioId = @FuncionarioId,
                          @NominaFuncionarioId = @NominaFuncionarioId,
                          @NominaFechaFinal = @FechaFinal,
                          @Id = NULL,
                          @UsuarioOperacion = @UsuarioOperacion;
                 END;

                 -- Carga de novedades de libranzas
                 IF @CargarLibranzas = 1
                 BEGIN

                     EXEC [dbo].USP_CargarNovedadesLibranzas
                          @NominaId,
                          @FuncionarioId,
                          @SubperiodoId,
                          NULL,
                          @UsuarioOperacion;
                 END;

                 -- Carga de novedades de embargos
                 IF @CargarEmbargos = 1
                 BEGIN
                     EXEC [dbo].USP_CargarNovedadesEmbargos
                          @NominaId,
                          @FuncionarioId,
                          @SubperiodoId,
                          NULL,
                          @UsuarioOperacion;
                 END;

                 -- Carga de novedades de beneficios
                 IF @CargarBeneficios = 1
                 BEGIN
                     EXEC [dbo].USP_CargarNovedadesBeneficios
                          @NominaId,
                          @FuncionarioId,
                          @SubperiodoId,
                          NULL,
                          @UsuarioOperacion;
                 END;

                 -- Carga gastos de viaje
                 IF @CargarGastosDeViaje = 1
                 BEGIN
                     EXEC [dbo].[USP_CargarNovedadesGastosViaje]
                          @NominaId = @NominaId,
                          @FuncionarioId = @FuncionarioId,
                          @NominaFuncionarioId = @NominaFuncionarioId,
                          @NominaFechaFinal = @FechaFinal,
                          @SubperiodoId = @SubperiodoId,
                          @Id = NULL,
                          @UsuarioOperacion = @UsuarioOperacion;
                 END;

                 -- Carga otras novedades
                 IF @CargarOtrasNovedades = 1
                 BEGIN
                     EXEC [dbo].[USP_CargarNovedadesOtras]
                          @NominaId = @NominaId,
                          @FuncionarioId = @FuncionarioId,
                          @NominaFuncionarioId = @NominaFuncionarioId,
                          @NominaFechaFinal = @FechaFinal,
                          @SubperiodoId = @SubperiodoId,
                          @Id = NULL,
                          @UsuarioOperacion = @UsuarioOperacion;
                 END;

                 -- Carga de novedades de ausentismos
                 IF @CargarAusentismos = 1
                 BEGIN
                     EXEC USP_CargarNovedadesAusentismos
                          @NominaId,
                          @FuncionarioId,
                          @SubperiodoId,
                          NULL,
                          @UsuarioOperacion;
                 END;

                 -- Carga de novedades de vacaciones
                 IF @CargarVacaciones = 1
                 BEGIN
                     EXEC [dbo].[USP_CargarNovedadesVacaciones]
                          @NominaId = @NominaId,
                          @FuncionarioId = @FuncionarioId,
                          @NominaFuncionarioId = @NominaFuncionarioId,
                          @ConceptoVacacionesAnticipadasId = @ConceptoVacacionesAnticipadasId,
                          @ConceptoVacacionesDineroId = @ConceptoVacacionesDineroId,
                          @ConceptoVacacionesTiempoId = @ConceptoVacacionesTiempoId,
                          @Id = NULL,
                          @UsuarioOperacion = @UsuarioOperacion;
                 END;

                 -- Carga de novedades anticipo de cesantías
                 IF @CargarAnticipoCesatias = 1
                 BEGIN

                     EXEC [dbo].[USP_CargarNovedadesAnticipoCesantias]
                          @NominaId = @NominaId,
                          @FuncionarioId = @FuncionarioId,
                          @NominaFuncionarioId = @NominaFuncionarioId,
                          @NominaFechaFinal = @FechaFinal,
                          @ConceptoNominaId = @ConceptoAnticipoCesantiasId,
                          @Id = NULL,
                          @UsuarioOperacion = @UsuarioOperacion;

                 END;

                 FETCH NEXT FROM CUR_Funcionarios INTO @FuncionarioId, @NominaId, @FechaInicio, @FechaFinal, @SubperiodoId, @TipoLiquidacionId, @UsuarioOperacion, @NominaFuncionarioId;
             END;

             CLOSE CUR_Funcionarios;

             DEALLOCATE CUR_Funcionarios;

             -- Cierre de la transacción
             IF @@TRANCOUNT > 0
             BEGIN
                 IF XACT_STATE() = 1
                 BEGIN
                     COMMIT TRAN CargarNovedades;
                 END;
                 ELSE
                 BEGIN
                     EXEC util.USP_GenerarExcepcion
                          50000,
                          'No se puede confirmar la transacción.  Error desconocido.';
                 END;
             END;
         END TRY
         BEGIN CATCH

             -- Rollback de la transacción
             IF XACT_STATE() <> 0
                AND @@TRANCOUNT > 0
             BEGIN
                 ROLLBACK;
             END;

             -- Se almacena la información del error
             EXEC util.USP_Registrarerror
                  @NombreObjeto,
                  @Parametros;

             -- Se lanza la excepción
             EXEC util.USP_LanzarExcepcion;
         END CATCH;

     END;
GO
]]>
</sql>
<rollback>
<sql endDelimiter="GO" splitStatements="true">
<![CDATA[
DROP TRIGGER [dbo].[TR_CargarNovedades];
GO
]]>
</sql>
</rollback>
</changeSet>

</databaseChangeLog>