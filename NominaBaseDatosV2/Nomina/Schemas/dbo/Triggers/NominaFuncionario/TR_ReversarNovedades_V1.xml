<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd">

<changeSet author="dvillega" id="TR_ReversarNovedades_V1">
<comment>Migración general</comment>
<sql endDelimiter="GO" splitStatements="true">
<![CDATA[
IF OBJECT_ID('dbo.TR_ReversarNovedades', 'TR') IS NULL
    BEGIN
        EXECUTE ('CREATE TRIGGER dbo.TR_ReversarNovedades ON dbo.NominaFuncionario AFTER INSERT as SELECT 1');
END;
GO

-- ==========================================================================================
-- Author:      Diego Fernando Villegas Flórez
-- Create date: 22/04/2020
-- Description: Reversar las novedades del funcionario cargadas en la nómina
-- ==========================================================================================
ALTER TRIGGER dbo.TR_ReversarNovedades ON dbo.NominaFuncionario
INSTEAD OF DELETE
AS
     BEGIN

         --------------------------------------------------------------------------
         -- Instrucciones de configuración y manejo de errores
         --------------------------------------------------------------------------
         SET XACT_ABORT, NOCOUNT, ANSI_NULLS, QUOTED_IDENTIFIER ON;
         DECLARE @Parametros VARCHAR(MAX)= ''; -- = CONCAT('@Columna1=', CONVERT(VARCHAR, inserted.Columna1), '&', '@Columna2=', CONVERT(VARCHAR, @inserted.Columna2))
         DECLARE @NombreObjeto VARCHAR(256)= OBJECT_NAME(@@PROCID);

         --------------------------------------------------------------------------
         -- Variables
         --------------------------------------------------------------------------
         DECLARE @NominaFuenteNovedadId INT;
         DECLARE @Modulo VARCHAR(255);
         DECLARE @ModuloRegistroId INT;
         DECLARE @UsuarioOperacion VARCHAR(255);

         --------------------------------------------------------------------------
         -- Proceso
         --------------------------------------------------------------------------
         BEGIN TRY

             -- Inicio de la transacción
             BEGIN TRAN ReversarNovedades;

             -- Se crea tabla temporal con las novedades
             SELECT nfn.Id
             INTO #TmpNovedadesEliminar
             FROM deleted AS del
                  INNER JOIN dbo.NominaDetalle AS nde ON(nde.NominaFuncionarioId = del.Id)
                  INNER JOIN dbo.NominaFuenteNovedad AS nfn ON(nfn.Id = nde.NominaFuenteNovedadId);

             -- Se borra el detalle nomina asociado a las novedades
             DELETE FROM dbo.NominaDetalle
             WHERE NominaFuenteNovedadId IN
             (
                 SELECT Id
                 FROM #TmpNovedadesEliminar
             );

             -- Se borra el registro de la fuentes de las novedades
             DELETE FROM dbo.NominaFuenteNovedad
             WHERE Id IN
             (
                 SELECT Id
                 FROM #TmpNovedadesEliminar
             );

             -- Se elimina el detalle que no corresponde a novedades
             DELETE FROM dbo.NominaDetalle
             WHERE dbo.NominaDetalle.NominaFuncionarioId IN
             (
                 SELECT del.Id
                 FROM deleted AS del
             );

             -- Se elimina el registro del funcionario en la nómina
             DELETE FROM dbo.NominaFuncionario
             WHERE Id IN
             (
                 SELECT del.Id
                 FROM deleted AS del
             );

             -- Cierre de la transacción
             IF @@TRANCOUNT > 0
             BEGIN
                 IF XACT_STATE() = 1
                 BEGIN
                     COMMIT TRAN ReversarNovedades;
                 END;
                 ELSE
                 BEGIN
                     EXEC util.USP_GenerarExcepcion
                          50000,
                          'No se puede confirmar la transacción.  Error desconocido.';
                 END;
             END;
         END TRY
         BEGIN CATCH

             -- Rollback de la transacción
             IF XACT_STATE() <> 0
                AND @@TRANCOUNT > 0
             BEGIN
                 ROLLBACK;
             END;

             -- Se almacena la información del error
             EXEC util.USP_Registrarerror
                  @NombreObjeto,
                  @Parametros;

             -- Se lanza la excepción
             EXEC util.USP_LanzarExcepcion;
         END CATCH;

     END;
GO
]]>
</sql>
<rollback>
<sql endDelimiter="GO" splitStatements="true">
<![CDATA[
DROP TRIGGER [dbo].[TR_ReversarNovedades];
GO
]]>
</sql>
</rollback>
</changeSet>

</databaseChangeLog>