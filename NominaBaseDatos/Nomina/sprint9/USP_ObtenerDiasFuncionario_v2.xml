<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd">

<changeSet author="lestrada" id="USP_ObtenerDiasFuncionario_v2_1">
<sql endDelimiter="GO" splitStatements="true">
<![CDATA[
GO
IF OBJECT_ID('dbo.USP_ObtenerDiasFuncionario ', 'P') IS NULL
BEGIN
    EXECUTE ('CREATE PROCEDURE dbo.USP_ObtenerDiasFuncionario as SELECT 1');
END;
GO
-- ==========================================================================================
-- Author:      Laura Estrada, Diego Villegas
-- Create date: 12/03/2020
-- Description: Permite obtener los días a trabajados o a pagar de un funcionario en un 
--				período de tiempo.
--
-- Parameters:
--   @FuncionarioId:			Identificador del funcionario
--   @FechaInicial:				Fecha inicial del período
--   @FechaFinal:				Fecha final del período
--   @TipoDias:					Tipo de días a obtener TRABAJADOS o APAGAR
--
-- Returns:						
--	 Dias:						Número de días
-- ==========================================================================================
ALTER PROCEDURE [dbo].[USP_ObtenerDiasFuncionario] 
(
	@FuncionarioId INT, 
	@FechaInicial DATE, 
	@FechaFinal DATE, 
	@TipoDias VARCHAR(24)
)  
AS
BEGIN
	--------------------------------------------------------------------------
    -- Instrucciones de configuración y manejo de errores
    --------------------------------------------------------------------------
    SET XACT_ABORT, NOCOUNT, ANSI_NULLS, QUOTED_IDENTIFIER ON;
    DECLARE @Parametros VARCHAR(MAX)= CONCAT('@FuncionarioId=', CONVERT(VARCHAR, @FuncionarioId), '&', '@FechaInicial=', CONVERT(VARCHAR, @FechaInicial), '&', '@FechaFinal=', CONVERT(VARCHAR, @FechaFinal),'&', '@TipoDias=', CONVERT(VARCHAR, @TipoDias));
    DECLARE @NombreObjeto VARCHAR(256)= OBJECT_NAME(@@PROCID);

	---------------------------------------------
	-- Declaraciones
	---------------------------------------------
	DECLARE @FechaLimiteInferior DATE;
	DECLARE @FechaLimiteSuperior DATE;
	DECLARE @AusentismoFechaInicio DATE;
	DECLARE @AusentismoFechaFin DATE;
	DECLARE @AusentismoHoraInicio TIME;
	DECLARE @AusentismoHoraFin TIME;
	DECLARE @AusentismoUnidadTiempo VARCHAR(MAX);
	DECLARE @FechaAusentismoInferior DATE;
	DECLARE @FechaAusentismoSuperior DATE;
	DECLARE @DiasAusentismos INT = 0;
	DECLARE @DiasFuncionario INT = 0;
	DECLARE @FechaIteracion DATE = NULL;
	DECLARE @AcumuladorHoras INT = 0;
	DECLARE @AusentismoId INT = 0;


	---------------------------------------------
	-- Proceso
	---------------------------------------------
	
    BEGIN TRY

			-- 2. Obtener fecha inicio del funcionario
			SELECT @FechaLimiteInferior = con.FechaInicio
			FROM dbo.Contrato con 
			WHERE con.FuncionarioId = @FuncionarioId
			AND con.EstadoRegistro = 'Activo'
			AND con.FechaInicio <= @FechaFinal
			ORDER BY con.FechaInicio DESC;
		
			IF @FechaLimiteInferior < @FechaInicial
			BEGIN
				SET @FechaLimiteInferior = @FechaInicial
			END
		
			-- 3. Obtener fecha terminación del funcionario
			SELECT @FechaLimiteSuperior = con.FechaTerminacion
			FROM dbo.Contrato con 
			WHERE con.FuncionarioId = @FuncionarioId
			AND con.EstadoRegistro = 'Activo'
			AND con.FechaTerminacion >= @FechaInicial
			ORDER BY con.FechaTerminacion DESC;
		
			IF @FechaLimiteSuperior > @FechaFinal OR @FechaLimiteSuperior IS NULL
			BEGIN
				SET @FechaLimiteSuperior = @FechaFinal
			END
		
			-- 4. Obtener dias de ausentismos del funcionario dentro del periodo (Según tipo)
			DECLARE CUR_Ausentismos CURSOR LOCAL FOR 
		
				SELECT auf.FechaInicio, auf.FechaFin, auf.HoraInicio, auf.HoraFin, tia.UnidadTiempo, auf.Id
				FROM dbo.AusentismoFuncionario auf INNER JOIN dbo.TipoAusentismo tia ON (auf.TipoAusentismoId = tia.Id)
				INNER JOIN dbo.ClaseAusentismo cla ON (tia.ClaseAusentismoId = cla.Id)
				WHERE auf.FuncionarioId = @FuncionarioId
				AND ((@TipoDias = 'TRABAJADOS' AND cla.AfectaDiaTrabajado = 1) OR (@TipoDias = 'APAGAR' AND cla.AfectaDiaPagar = 1))
				AND auf.EstadoRegistro = 'Activo'
				AND auf.Estado IN ('Aprobado', 'Procesado')
				AND (
					(auf.FechaInicio BETWEEN @FechaLimiteInferior AND @FechaLimiteSuperior)
					OR (auf.FechaFin BETWEEN @FechaLimiteInferior AND @FechaLimiteSuperior)
					OR (auf.FechaInicio < @FechaLimiteInferior AND auf.FechaFin > @FechaLimiteSuperior)
				)
				ORDER BY auf.FechaInicio ASC
		
			OPEN CUR_Ausentismos
		
			FETCH NEXT FROM CUR_Ausentismos INTO @AusentismoFechaInicio, @AusentismoFechaFin, @AusentismoHoraInicio, @AusentismoHoraFin, @AusentismoUnidadTiempo, @AusentismoId
		
			WHILE @@fetch_status = 0
			BEGIN
				
				-- 5. Calcular días
		
				-- Se establecen los límites superior e inferior del ausentismo para el cálculo de los días de trabajo
				SET @FechaAusentismoInferior = @AusentismoFechaInicio;
				SET @FechaAusentismoSuperior = @AusentismoFechaFin;
		
				IF @AusentismoFechaInicio < @FechaLimiteInferior
				BEGIN
					SET @FechaAusentismoInferior = @FechaLimiteInferior;
				END
		
				IF @AusentismoFechaFin > @FechaLimiteSuperior
				BEGIN
					SET @FechaAusentismoSuperior = @FechaLimiteSuperior;
				END
				
				-- Inicializar la fecha de iteración para el cálculo de horas de ausentismo en una misma fecha
				IF @FechaIteracion IS NULL
				BEGIN
					SET @FechaIteracion = @FechaAusentismoInferior;
				END
		
				-- Si la fecha del ausenstimo inferior es diferente de la superior o el ausentismo no 
				-- requiere horas, se calcula la diferencia de días
				IF @FechaAusentismoInferior <> @FechaAusentismoSuperior OR @AusentismoUnidadTiempo = 'Días'
				BEGIN
					SET @DiasAusentismos = @DiasAusentismos + (DATEDIFF(day, @FechaAusentismoInferior, @FechaAusentismoSuperior) + 1);
				END
				
				-- Si la fecha del ausenstimo inferior es igual a la superior se calcula las horas
				-- de ausentismo para la fecha
				ELSE
				BEGIN
					
					IF @FechaIteracion = @FechaAusentismoInferior
					BEGIN
						SET @AcumuladorHoras = @AcumuladorHoras + (DATEDIFF(hour, @AusentismoHoraInicio, @AusentismoHoraFin));
					END
					ELSE
					BEGIN
						-- Si se acumularon 8 o más horas debe sumarse como un día de ausentismo 
						IF @AcumuladorHoras >= 8
						BEGIN
							SET @DiasAusentismos = @DiasAusentismos + 1;
						END
						SET @AcumuladorHoras = 0;
					END
		
				END
				
				SET @FechaIteracion = @FechaAusentismoInferior;
				
				FETCH NEXT FROM CUR_Ausentismos INTO @AusentismoFechaInicio, @AusentismoFechaFin, @AusentismoHoraInicio, @AusentismoHoraFin, @AusentismoUnidadTiempo, @AusentismoId
			END
			
			-- Caso Especial, si el la ultima iteracion se acumularon 8 o más horas debe sumarse como un día de ausentismo.
			-- Esto se calcular fuera del cursor, ya que dentro de este no se cumple la condición para su calculo.
			IF @AcumuladorHoras >= 8
			BEGIN
				SET @DiasAusentismos = @DiasAusentismos + 1;
			END
		
			CLOSE CUR_Ausentismos
			DEALLOCATE CUR_Ausentismos
		
			-- Días totales 
			EXEC @DiasFuncionario = [dbo].[USP_ObtenerDiasLaborales]
					@FechaInicial = @FechaLimiteInferior,
					@FechaFinal = @FechaLimiteSuperior
		
			SET @DiasFuncionario = @DiasFuncionario - @DiasAusentismos;
		
			RETURN @DiasFuncionario;
		      
    END TRY
    BEGIN CATCH

        -- Se almacena la información del error
        EXEC util.USP_Registrarerror
             @NombreObjeto,
             @Parametros;

        -- Se lanza la excepción
        EXEC util.USP_LanzarExcepcion;
    END CATCH;
END;
GO
]]>
</sql>
<rollback>
<sql endDelimiter="GO" splitStatements="true">
<![CDATA[
GO
/****** Objeto: SqlProcedure [dbo].[USP_ObtenerDiasFuncionario] Fecha del script: 21/04/2020 9:17:27 p. m. ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- ==========================================================================================
-- Author:      Laura Estrada, Diego Villegas
-- Create date: 12/03/2020
-- Description: Permite obtener los días a trabajados o a pagar de un funcionario en un 
--				período de tiempo.
--
-- Parameters:
--   @FuncionarioId:			Identificador del funcionario
--   @FechaInicial:				Fecha inicial del período
--   @FechaFinal:				Fecha final del período
--   @TipoDias:					Tipo de días a obtener TRABAJADOS o APAGAR
--
-- Returns:						
--	 Dias:						Número de días
-- ==========================================================================================
ALTER PROCEDURE [dbo].[USP_ObtenerDiasFuncionario] 
(
	@FuncionarioId INT, 
	@FechaInicial DATE, 
	@FechaFinal DATE, 
	@TipoDias VARCHAR(24)
)  
AS
BEGIN
	--------------------------------------------------------------------------
    -- Instrucciones de configuración y manejo de errores
    --------------------------------------------------------------------------
    SET XACT_ABORT, NOCOUNT, ANSI_NULLS, QUOTED_IDENTIFIER ON;
    DECLARE @Parametros VARCHAR(MAX)= CONCAT('@FuncionarioId=', CONVERT(VARCHAR, @FuncionarioId), '&', '@FechaInicial=', CONVERT(VARCHAR, @FechaInicial), '&', '@FechaFinal=', CONVERT(VARCHAR, @FechaFinal),'&', '@TipoDias=', CONVERT(VARCHAR, @TipoDias));
    DECLARE @NombreObjeto VARCHAR(256)= OBJECT_NAME(@@PROCID);

	---------------------------------------------
	-- Declaraciones
	---------------------------------------------
	DECLARE @FechaLimiteInferior DATE;
	DECLARE @FechaLimiteSuperior DATE;
	DECLARE @AusentismoFechaInicio DATE;
	DECLARE @AusentismoFechaFin DATE;
	DECLARE @AusentismoHoraInicio TIME;
	DECLARE @AusentismoHoraFin TIME;
	DECLARE @AusentismoUnidadTiempo VARCHAR(MAX);
	DECLARE @FechaAusentismoInferior DATE;
	DECLARE @FechaAusentismoSuperior DATE;
	DECLARE @DiasAusentismos INT = 0;
	DECLARE @DiasFuncionario INT = 0;
	DECLARE @FechaIteracion DATE = NULL;
	DECLARE @AcumuladorHoras INT = 0;
	DECLARE @AusentismoId INT = 0;


	---------------------------------------------
	-- Proceso
	---------------------------------------------
	
    BEGIN TRY

        -- Inicio de la transacción
        BEGIN TRAN NombreTransaccion1;

			-- 2. Obtener fecha inicio del funcionario
			SELECT @FechaLimiteInferior = con.FechaInicio
			FROM dbo.Contrato con 
			WHERE con.FuncionarioId = @FuncionarioId
			AND con.EstadoRegistro = 'Activo'
			AND con.FechaInicio <= @FechaFinal
			ORDER BY con.FechaInicio DESC;
		
			IF @FechaLimiteInferior < @FechaInicial
			BEGIN
				SET @FechaLimiteInferior = @FechaInicial
			END
		
			-- 3. Obtener fecha terminación del funcionario
			SELECT @FechaLimiteSuperior = con.FechaTerminacion
			FROM dbo.Contrato con 
			WHERE con.FuncionarioId = @FuncionarioId
			AND con.EstadoRegistro = 'Activo'
			AND con.FechaTerminacion >= @FechaInicial
			ORDER BY con.FechaTerminacion DESC;
		
			IF @FechaLimiteSuperior > @FechaFinal OR @FechaLimiteSuperior IS NULL
			BEGIN
				SET @FechaLimiteSuperior = @FechaFinal
			END
		
			-- 4. Obtener dias de ausentismos del funcionario dentro del periodo (Según tipo)
			DECLARE CUR_Ausentismos CURSOR LOCAL FOR 
		
				SELECT auf.FechaInicio, auf.FechaFin, auf.HoraInicio, auf.HoraFin, tia.UnidadTiempo, auf.Id
				FROM dbo.AusentismoFuncionario auf INNER JOIN dbo.TipoAusentismo tia ON (auf.TipoAusentismoId = tia.Id)
				INNER JOIN dbo.ClaseAusentismo cla ON (tia.ClaseAusentismoId = cla.Id)
				WHERE auf.FuncionarioId = @FuncionarioId
				AND ((@TipoDias = 'TRABAJADOS' AND cla.AfectaDiaTrabajado = 1) OR (@TipoDias = 'APAGAR' AND cla.AfectaDiaPagar = 1))
				AND auf.EstadoRegistro = 'Activo'
				AND auf.Estado IN ('Aprobado', 'Procesado')
				AND (
					(auf.FechaInicio BETWEEN @FechaLimiteInferior AND @FechaLimiteSuperior)
					OR (auf.FechaFin BETWEEN @FechaLimiteInferior AND @FechaLimiteSuperior)
					OR (auf.FechaInicio < @FechaLimiteInferior AND auf.FechaFin > @FechaLimiteSuperior)
				)
				ORDER BY auf.FechaInicio ASC
		
			OPEN CUR_Ausentismos
		
			FETCH NEXT FROM CUR_Ausentismos INTO @AusentismoFechaInicio, @AusentismoFechaFin, @AusentismoHoraInicio, @AusentismoHoraFin, @AusentismoUnidadTiempo, @AusentismoId
		
			WHILE @@fetch_status = 0
			BEGIN
				
				-- 5. Calcular días
		
				-- Se establecen los límites superior e inferior del ausentismo para el cálculo de los días de trabajo
				SET @FechaAusentismoInferior = @AusentismoFechaInicio;
				SET @FechaAusentismoSuperior = @AusentismoFechaFin;
		
				IF @AusentismoFechaInicio < @FechaLimiteInferior
				BEGIN
					SET @FechaAusentismoInferior = @FechaLimiteInferior;
				END
		
				IF @AusentismoFechaFin > @FechaLimiteSuperior
				BEGIN
					SET @FechaAusentismoSuperior = @FechaLimiteSuperior;
				END
				
				-- Inicializar la fecha de iteración para el cálculo de horas de ausentismo en una misma fecha
				IF @FechaIteracion IS NULL
				BEGIN
					SET @FechaIteracion = @FechaAusentismoInferior;
				END
		
				-- Si la fecha del ausenstimo inferior es diferente de la superior o el ausentismo no 
				-- requiere horas, se calcula la diferencia de días
				IF @FechaAusentismoInferior <> @FechaAusentismoSuperior OR @AusentismoUnidadTiempo = 'Días'
				BEGIN
					SET @DiasAusentismos = @DiasAusentismos + (DATEDIFF(day, @FechaAusentismoInferior, @FechaAusentismoSuperior) + 1);
				END
				
				-- Si la fecha del ausenstimo inferior es igual a la superior se calcula las horas
				-- de ausentismo para la fecha
				ELSE
				BEGIN
					
					IF @FechaIteracion = @FechaAusentismoInferior
					BEGIN
						SET @AcumuladorHoras = @AcumuladorHoras + (DATEDIFF(hour, @AusentismoHoraInicio, @AusentismoHoraFin));
					END
					ELSE
					BEGIN
						-- Si se acumularon 8 o más horas debe sumarse como un día de ausentismo 
						IF @AcumuladorHoras >= 8
						BEGIN
							SET @DiasAusentismos = @DiasAusentismos + 1;
						END
						SET @AcumuladorHoras = 0;
					END
		
				END
				
				SET @FechaIteracion = @FechaAusentismoInferior;
				
				FETCH NEXT FROM CUR_Ausentismos INTO @AusentismoFechaInicio, @AusentismoFechaFin, @AusentismoHoraInicio, @AusentismoHoraFin, @AusentismoUnidadTiempo, @AusentismoId
			END
			
			-- Caso Especial, si el la ultima iteracion se acumularon 8 o más horas debe sumarse como un día de ausentismo.
			-- Esto se calcular fuera del cursor, ya que dentro de este no se cumple la condición para su calculo.
			IF @AcumuladorHoras >= 8
			BEGIN
				SET @DiasAusentismos = @DiasAusentismos + 1;
			END
		
			CLOSE CUR_Ausentismos
			DEALLOCATE CUR_Ausentismos
		
			-- Días totales 
			EXEC @DiasFuncionario = [dbo].[USP_ObtenerDiasLaborales]
					@FechaInicial = @FechaLimiteInferior,
					@FechaFinal = @FechaLimiteSuperior
		
			SET @DiasFuncionario = @DiasFuncionario - @DiasAusentismos;
		
			RETURN @DiasFuncionario;
		
		-- Cierre de la transacción
        IF @@TRANCOUNT > 0
        BEGIN
            IF XACT_STATE() = 1
            BEGIN
                COMMIT TRAN NombreTransaccion1;
            END;
            ELSE
            BEGIN
                EXEC util.USP_GenerarExcepcion
                     50000,'No se puede confirmar la transacción.  Error desconocido.';
            END;
        END;
    END TRY
    BEGIN CATCH

        -- Rollback de la transacción
        IF XACT_STATE() <> 0
           AND @@TRANCOUNT > 0
        BEGIN
            ROLLBACK;
        END;

        -- Se almacena la información del error
        EXEC util.USP_Registrarerror
             @NombreObjeto,
             @Parametros;

        -- Se lanza la excepción
        EXEC util.USP_LanzarExcepcion;
    END CATCH;
	
END
]]>
</sql>
</rollback>
</changeSet>
</databaseChangeLog>