// <auto-generated />
using System;
using ApiV3.Infraestructura.DbContexto;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ApiV3.Migrations
{
    [DbContext(typeof(NominaDbContext))]
    [Migration("20210225162949_sprint14054")]
    partial class sprint14054
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ApiV3.Models.Actividad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("PromedioProductividad")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorComplejidad")
                        .HasColumnType("decimal(19, 6)");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique();

                    b.ToTable("Actividad");

                    b.HasCheckConstraint("CK_Actividad_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.ActividadCentroCosto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActividadId")
                        .HasColumnType("int");

                    b.Property<int>("CentroCostoId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("MunicipioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActividadId");

                    b.HasIndex("CentroCostoId");

                    b.HasIndex("MunicipioId");

                    b.ToTable("ActividadCentroCosto");

                    b.HasCheckConstraint("CK_ActividadCentroCosto_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.ActividadEconomica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("ActividadEconomica");

                    b.HasCheckConstraint("CK_ActividadEconomica_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.ActividadFuncionario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActividadId")
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaFinalizacion")
                        .IsRequired()
                        .HasColumnType("date");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FuncionarioId")
                        .HasColumnType("int");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("MunicipioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActividadId");

                    b.HasIndex("FuncionarioId");

                    b.HasIndex("MunicipioId");

                    b.ToTable("ActividadFuncionario");

                    b.HasCheckConstraint("CK_ActividadFuncionario_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");

                    b.HasCheckConstraint("CK_ActividadFuncionario_Estado", "([Estado]='Pendiente' OR [Estado]='Aplicado' )");
                });

            modelBuilder.Entity("ApiV3.Models.ActividadFuncionarioCentroCosto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActividadFuncionarioId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FuncionarioCentroCostoId")
                        .HasColumnType("int");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ActividadFuncionarioId");

                    b.HasIndex("FuncionarioCentroCostoId");

                    b.ToTable("ActividadFuncionarioCentroCosto");

                    b.HasCheckConstraint("CK_ActividadFuncionarioCentroCosto_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.Administradora", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Dv")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nit")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TipoAdministradoraId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TipoAdministradoraId");

                    b.ToTable("Administradora");

                    b.HasCheckConstraint("CK_Administradora_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.AnnoVigencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Anno")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("AnnoVigencia");

                    b.HasCheckConstraint("CK_AnnoVigencia_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");

                    b.HasCheckConstraint("CK_AnnoVigencia_Estado", "([Estado]='Vigente' OR [Estado]='Cerrado')");
                });

            modelBuilder.Entity("ApiV3.Models.AplicacionExterna", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Aprueba")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Autoriza")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Revisa")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("AplicacionExterna");

                    b.HasCheckConstraint("CK_AplicacionExterna_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");

                    b.HasCheckConstraint("CK_TipoAplicacionExterna_Revisa", "([Revisa]='JefeInmediato' OR [Revisa]='Otro' OR [Revisa]='NoAplica')");

                    b.HasCheckConstraint("CK_TipoAplicacionExterna_Aprueba", "([Aprueba]='JefeInmediato' OR [Aprueba]='Otro' OR [Aprueba]='NoAplica')");

                    b.HasCheckConstraint("CK_TipoAplicacionExterna_Autoriza", "([Autoriza]='JefeInmediato' OR [Autoriza]='Otro' OR [Autoriza]='NoAplica')");
                });

            modelBuilder.Entity("ApiV3.Models.AplicacionExternaCargo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AplicacionExternaId")
                        .HasColumnType("int");

                    b.Property<int>("CargoDependenciaIndependienteId")
                        .HasColumnType("int");

                    b.Property<int?>("CentroOperativoDependienteId")
                        .HasColumnType("int");

                    b.Property<int?>("CentroOperativoIndependienteId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AplicacionExternaId");

                    b.HasIndex("CargoDependenciaIndependienteId");

                    b.HasIndex("CentroOperativoDependienteId");

                    b.HasIndex("CentroOperativoIndependienteId");

                    b.ToTable("AplicacionExternaCargo");

                    b.HasCheckConstraint("CK_AplicacionExternaCargo_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");

                    b.HasCheckConstraint("CK_AplicacionExternaCargo_Tipo", "([Tipo]='Aprobacion' OR [Tipo]='Autorizacion' OR [Tipo]='Revision')");
                });

            modelBuilder.Entity("ApiV3.Models.AplicacionExternaCargoDependiente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AplicacionExternaCargoId")
                        .HasColumnType("int");

                    b.Property<int>("CargoDependenciaId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AplicacionExternaCargoId");

                    b.HasIndex("CargoDependenciaId");

                    b.ToTable("AplicacionExternaCargoDependiente");

                    b.HasCheckConstraint("CK_AplicacionExternaCargoDependiente_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.AusentismoFuncionario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adjunto")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("DiagnosticoCieId")
                        .HasColumnType("int");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaFinalReal")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaIniciaReal")
                        .HasColumnType("date");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FuncionarioId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("HoraFin")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("HoraInicio")
                        .HasColumnType("time");

                    b.Property<string>("Justificacion")
                        .HasColumnType("text");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NumeroIncapacidad")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Observacion")
                        .HasColumnType("text");

                    b.Property<int>("TipoAusentismoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosticoCieId");

                    b.HasIndex("FuncionarioId");

                    b.HasIndex("TipoAusentismoId");

                    b.ToTable("AusentismoFuncionario");

                    b.HasCheckConstraint("CK_AusentismoFuncionario_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.Beneficio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CantidadHoraSemana")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaFinalizacionEstudio")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaInicioEstudio")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("FechaSolicitud")
                        .HasColumnType("date");

                    b.Property<int>("FuncionarioId")
                        .HasColumnType("int");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<double?>("NotaAcademica")
                        .HasColumnType("float");

                    b.Property<string>("Observacion")
                        .HasColumnType("text");

                    b.Property<string>("ObservacionAprobacion")
                        .HasColumnType("text");

                    b.Property<string>("ObservacionAutorizacion")
                        .HasColumnType("text");

                    b.Property<string>("ObservacionNotaAcademica")
                        .HasColumnType("text");

                    b.Property<string>("OpcionAuxilioEducativo")
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("PlazoMaximo")
                        .HasColumnType("int");

                    b.Property<decimal>("Saldo")
                        .HasColumnType("money");

                    b.Property<int>("TipoBeneficioId")
                        .HasColumnType("int");

                    b.Property<int?>("TipoPeriodoId")
                        .HasColumnType("int");

                    b.Property<decimal?>("ValorAutorizado")
                        .HasColumnType("money");

                    b.Property<decimal?>("ValorCobrar")
                        .HasColumnType("money");

                    b.Property<decimal?>("ValorSolicitud")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("FuncionarioId");

                    b.HasIndex("TipoBeneficioId");

                    b.HasIndex("TipoPeriodoId");

                    b.ToTable("Beneficio");

                    b.HasCheckConstraint("CK_Beneficio_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");

                    b.HasCheckConstraint("CK_Beneficio_Estado", "([Estado] = 'EnTramite' OR[Estado] = 'Aprobada' OR[Estado] = 'Autorizada' OR[Estado] = 'Otorgada' OR[Estado] = 'EnReembolso' OR[Estado] = 'EnCondonacion' OR[Estado] = 'Condonada' OR[Estado] = 'Rechazada' OR[Estado] = 'Cancelada' OR[Estado] = 'Finalizada')");
                });

            modelBuilder.Entity("ApiV3.Models.BeneficioAdjunto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adjunto")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("BeneficioId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TipoBeneficioRequisitoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BeneficioId");

                    b.HasIndex("TipoBeneficioRequisitoId");

                    b.ToTable("BeneficioAdjunto");

                    b.HasCheckConstraint("CK_BeneficioAdjunto_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.BeneficioSubperiodo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BeneficioId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("SubPeriodoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BeneficioId");

                    b.HasIndex("SubPeriodoId");

                    b.ToTable("BeneficioSubperiodo");

                    b.HasCheckConstraint("CK_BeneficioSubperiodo_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.Calendario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Calendario");

                    b.HasCheckConstraint("CK_Calendario_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.Candidato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdjuntoExamen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdjuntoPruebas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("HojaDeVidaId")
                        .HasColumnType("int");

                    b.Property<string>("Justificacion")
                        .HasColumnType("text");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("RequisicionPersonalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HojaDeVidaId");

                    b.HasIndex("RequisicionPersonalId", "HojaDeVidaId", "EstadoRegistro")
                        .IsUnique()
                        .HasFilter("[EstadoRegistro] IS NOT NULL");

                    b.ToTable("Candidato","dbo");

                    b.HasCheckConstraint("CK_Candidato_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");

                    b.HasCheckConstraint("CK_Candidato_Estado", "([Estado]='Postulado' OR [Estado]='Descartado' OR [Estado]='Competente' OR [Estado]='Elegible' OR [Estado]='NoApto' OR [Estado]='Seleccionado' OR [Estado]='Reprobado' OR [Estado]='Anulado')");
                });

            modelBuilder.Entity("ApiV3.Models.Cargo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Clase")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("CostoSicom")
                        .HasColumnType("bit");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("NivelCargoId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ObjetivoCargo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NivelCargoId");

                    b.ToTable("Cargo");

                    b.HasCheckConstraint("CK_Cargo_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");

                    b.HasCheckConstraint("CK_Cargo_Clase", "([Clase]='CentroOperativo' OR [Clase]='Nacional')");
                });

            modelBuilder.Entity("ApiV3.Models.CargoCentroCosto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActividadCentroCostoId")
                        .HasColumnType("int");

                    b.Property<int>("CargoId")
                        .HasColumnType("int");

                    b.Property<int>("CentroOperativoId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime>("FechaCorte")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<decimal?>("Porcentaje")
                        .HasColumnType("decimal(16,6)");

                    b.HasKey("Id");

                    b.HasIndex("ActividadCentroCostoId");

                    b.HasIndex("CargoId");

                    b.HasIndex("CentroOperativoId");

                    b.ToTable("CargoCentroCosto");

                    b.HasCheckConstraint("CK_CargoCentroCosto_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.CargoDependencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CargoId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("DependenciaId")
                        .HasColumnType("int");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CargoId");

                    b.HasIndex("DependenciaId");

                    b.ToTable("CargoDependencia");

                    b.HasCheckConstraint("CK_CargoDependencia_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.CargoGrado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CargoId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CargoId");

                    b.ToTable("CargoGrado");

                    b.HasCheckConstraint("CK_CargoGrado_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.CargoGrupo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CargoId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Defecto")
                        .HasColumnType("bit");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("GrupoId")
                        .HasColumnType("int");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CargoId");

                    b.HasIndex("GrupoId");

                    b.ToTable("CargoGrupo");

                    b.HasCheckConstraint("CK_CargoGrupo_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.CargoPresupuesto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnnoVigenciaId")
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("CargoId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AnnoVigenciaId");

                    b.HasIndex("CargoId");

                    b.ToTable("CargoPresupuesto");

                    b.HasCheckConstraint("CK_CargoPresupuesto_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.CargoReporta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CargoDependenciaId")
                        .HasColumnType("int");

                    b.Property<int>("CargoDependenciaReportaId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("JefeInmediato")
                        .HasColumnType("bit");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CargoDependenciaId");

                    b.HasIndex("CargoDependenciaReportaId");

                    b.ToTable("CargoReporta");

                    b.HasCheckConstraint("CK_CargoReporta_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.CategoriaNovedad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Clase")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("ConceptoNominaId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Modulo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("RequiereTercero")
                        .HasColumnType("bit");

                    b.Property<string>("UbicacionTercero")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("UsaParametrizacion")
                        .HasColumnType("bit");

                    b.Property<bool>("ValorEditable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ConceptoNominaId");

                    b.ToTable("CategoriaNovedad");

                    b.HasCheckConstraint("CK_CategoriaNovedad_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");

                    b.HasCheckConstraint("CK_CategoriaNovedad_Modulo", "([Modulo]='Libranzas' OR [Modulo]='Embargos' OR [Modulo]='Ausentismos' OR [Modulo]='Beneficios' OR [Modulo]='HorasExtra'  OR [Modulo]='GastosViaje' OR [Modulo]='OtrasNovedades' )");

                    b.HasCheckConstraint("CK_CategoriaNovedad_Clase", "([Clase]='Fija' OR [Clase]='Eventual' )");

                    b.HasCheckConstraint("CK_CategoriaNovedad_UbicacionTercero", "([UbicacionTercero]='EntidadFinanciera' OR [UbicacionTercero]='Administradora' OR [UbicacionTercero]='OtrosTerceros' )");
                });

            modelBuilder.Entity("ApiV3.Models.CategoriaParametro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("CategoriaParametro");

                    b.HasCheckConstraint("CK_CategoriaParametro_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.CausalTerminacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("char(3)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("JustaCausa")
                        .HasColumnType("bit");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("CausalTerminacion");

                    b.HasCheckConstraint("CK_CausalTerminacion_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.CentroCosto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("CentroCosto");

                    b.HasCheckConstraint("CK_CentroCosto_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.CentroOperativo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("char(3)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("CentroOperativo");

                    b.HasCheckConstraint("CK_CentroOperativo_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.CentroTrabajo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<double>("PorcentajeRiesgo")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("CentroTrabajo");

                    b.HasCheckConstraint("CK_CentroTrabajo_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.ClaseAportante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("char(1)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique();

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("ClaseAportante");

                    b.HasCheckConstraint("CK_ClaseAportante_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.ClaseAportanteTipoAportante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClaseAportanteId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TipoAportanteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClaseAportanteId");

                    b.HasIndex("TipoAportanteId");

                    b.ToTable("ClaseAportanteTipoAportante");

                    b.HasCheckConstraint("CK_ClaseAportanteTipoAportante_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.ClaseAportanteTipoCotizante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClaseAportanteId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TipoCotizanteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClaseAportanteId");

                    b.HasIndex("TipoCotizanteId");

                    b.ToTable("ClaseAportanteTipoCotizante");

                    b.HasCheckConstraint("CK_ClaseAportanteTipoCotizante_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.ClaseAusentismo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AfectaDiaPagar")
                        .HasColumnType("bit");

                    b.Property<bool>("AfectaDiaTrabajado")
                        .HasColumnType("bit");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("RequiereHora")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique();

                    b.ToTable("ClaseAusentismo");

                    b.HasCheckConstraint("CK_ClaseAusentismo_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.ClaseLibretaMilitar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("ClaseLibretaMilitar","dbo");

                    b.HasCheckConstraint("CK_ClaseLibretaMilitar_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.ConceptoBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConceptoNominaAgrupadorId")
                        .HasColumnType("int");

                    b.Property<int>("ConceptoNominaId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ConceptoNominaAgrupadorId");

                    b.HasIndex("ConceptoNominaId");

                    b.ToTable("ConceptoBase");

                    b.HasCheckConstraint("CK_ConceptoBase_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.ConceptoNomina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ClaseConceptoNomina")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("ConceptoAgrupador")
                        .HasColumnType("bit");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DigitoVerificacion")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Formula")
                        .HasColumnType("text");

                    b.Property<int?>("FuncionNominaId")
                        .HasColumnType("int");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NitTercero")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<string>("OrigenCentroCosto")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OrigenTercero")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProcedimientoNombre")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("ProcedimientoSql")
                        .HasColumnType("text");

                    b.Property<bool>("RequiereCantidad")
                        .HasColumnType("bit");

                    b.Property<string>("TipoConceptoNomina")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UnidadMedida")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("VisibleImpresion")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Alias");

                    b.HasIndex("FuncionNominaId");

                    b.ToTable("ConceptoNomina");

                    b.HasCheckConstraint("CK_ConceptoNomina_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.ConceptoNominaCuentaContable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CentroCostoId")
                        .HasColumnType("int");

                    b.Property<int>("ConceptoNominaId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("CuentaContableId")
                        .HasColumnType("int");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CentroCostoId");

                    b.HasIndex("ConceptoNominaId");

                    b.HasIndex("CuentaContableId");

                    b.ToTable("ConceptoNominaCuentaContable");

                    b.HasCheckConstraint("CK_ConceptoNominaCuentaContable_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.ConceptoNominaElementoFormula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConceptoNominaId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ElementoFormulaId")
                        .HasColumnType("int");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ConceptoNominaId");

                    b.ToTable("ConceptoNominaElementoFormula");

                    b.HasCheckConstraint("CK_ConceptoNominaElementoFormula_Tipo", "([Tipo]='Concepto' OR [Tipo]='Funcion')");
                });

            modelBuilder.Entity("ApiV3.Models.ConceptoNominaTipoAdministradora", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConceptoNominaId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TipoAdministradoraId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConceptoNominaId");

                    b.HasIndex("TipoAdministradoraId");

                    b.ToTable("ConceptoNominaTipoAdministradora");

                    b.HasCheckConstraint("CK_ConceptoNominaTipoAdministradora_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.Contrato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CargoDependenciaId")
                        .HasColumnType("int");

                    b.Property<int>("CargoGrupoId")
                        .HasColumnType("int");

                    b.Property<int?>("CausalTerminacionId")
                        .HasColumnType("int");

                    b.Property<int>("CentroCostoId")
                        .HasColumnType("int");

                    b.Property<int>("CentroOperativoId")
                        .HasColumnType("int");

                    b.Property<bool>("ColombianoEnElExterior")
                        .HasColumnType("bit");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("DivisionPoliticaNivel2Id")
                        .HasColumnType("int");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("EmpleadoConfianza")
                        .HasColumnType("bit");

                    b.Property<int?>("EntidadFinancieraId")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<bool>("ExtranjeroNoObligadoACotizarAPension")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaFinalizacion")
                        .HasColumnType("date");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaTerminacion")
                        .HasColumnType("date");

                    b.Property<int>("FormaPagoId")
                        .HasColumnType("int");

                    b.Property<int>("FuncionarioId")
                        .HasColumnType("int");

                    b.Property<int>("GrupoNominaId")
                        .HasColumnType("int");

                    b.Property<int>("JornadaLaboralId")
                        .HasColumnType("int");

                    b.Property<string>("Justificacion")
                        .HasColumnType("text");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NumeroContrato")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NumeroCuenta")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ObservacionFinalizacionContrato")
                        .HasColumnType("text");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<int>("PeriodoPrueba")
                        .HasColumnType("int");

                    b.Property<string>("ProcedimientoRetencion")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("RecibeDotacion")
                        .HasColumnType("bit");

                    b.Property<decimal>("Sueldo")
                        .HasColumnType("money");

                    b.Property<int>("TipoContratoId")
                        .HasColumnType("int");

                    b.Property<int>("TipoCotizanteSubtipoCotizanteId")
                        .HasColumnType("int");

                    b.Property<int?>("TipoCuentaId")
                        .HasColumnType("int");

                    b.Property<int>("TipoMonedaId")
                        .HasColumnType("int");

                    b.Property<int>("TipoPeriodoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CargoDependenciaId");

                    b.HasIndex("CargoGrupoId");

                    b.HasIndex("CausalTerminacionId");

                    b.HasIndex("CentroCostoId");

                    b.HasIndex("CentroOperativoId");

                    b.HasIndex("DivisionPoliticaNivel2Id");

                    b.HasIndex("EntidadFinancieraId");

                    b.HasIndex("FormaPagoId");

                    b.HasIndex("FuncionarioId");

                    b.HasIndex("GrupoNominaId");

                    b.HasIndex("JornadaLaboralId");

                    b.HasIndex("TipoContratoId");

                    b.HasIndex("TipoCotizanteSubtipoCotizanteId");

                    b.HasIndex("TipoCuentaId");

                    b.HasIndex("TipoMonedaId");

                    b.HasIndex("TipoPeriodoId");

                    b.ToTable("Contrato");

                    b.HasCheckConstraint("CK_Contrato_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");

                    b.HasCheckConstraint("CK_Contrato_Estado", "([Estado]='Vigente' OR [Estado]='SinIniciar' OR [Estado]='Terminado' OR [Estado]='Cancelado' OR [Estado]='PendientePorLiquidar')");
                });

            modelBuilder.Entity("ApiV3.Models.ContratoAdministradora", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdministradoraId")
                        .HasColumnType("int");

                    b.Property<int>("ContratoId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("date");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Observacion")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdministradoraId");

                    b.HasIndex("ContratoId");

                    b.ToTable("ContratoAdministradora");

                    b.HasCheckConstraint("CK_ContratoAdministradora_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.ContratoCentroTrabajo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CentroTrabajoId")
                        .HasColumnType("int");

                    b.Property<int>("ContratoId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("date");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Observacion")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CentroTrabajoId");

                    b.HasIndex("ContratoId");

                    b.ToTable("ContratoCentroTrabajo");

                    b.HasCheckConstraint("CK_ContratoCentroTrabajo_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.ContratoOtroSi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CargoDependenciaId")
                        .HasColumnType("int");

                    b.Property<int>("CentroOperativoId")
                        .HasColumnType("int");

                    b.Property<int>("ContratoId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("DivisionPoliticaNivel2Id")
                        .HasColumnType("int");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime>("FechaAplicacion")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaFinalizacion")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("NumeroOtroSi")
                        .HasColumnType("int");

                    b.Property<int?>("NumeroProrroga")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Prorroga")
                        .HasColumnType("bit");

                    b.Property<decimal>("Sueldo")
                        .HasColumnType("money");

                    b.Property<int>("TipoContratoId")
                        .HasColumnType("int");

                    b.Property<int?>("TipoOtroSiId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CargoDependenciaId");

                    b.HasIndex("CentroOperativoId");

                    b.HasIndex("ContratoId");

                    b.HasIndex("DivisionPoliticaNivel2Id");

                    b.HasIndex("TipoContratoId");

                    b.HasIndex("TipoOtroSiId");

                    b.ToTable("ContratoOtroSi");

                    b.HasCheckConstraint("CK_ContratoOtroSi_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.CuentaBancaria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("EntidadFinancieraId")
                        .HasColumnType("int");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TipoCuentaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntidadFinancieraId");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.HasIndex("Numero")
                        .IsUnique();

                    b.HasIndex("TipoCuentaId");

                    b.ToTable("CuentaBancaria");

                    b.HasCheckConstraint("CK_CuentaBancaria_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.CuentaContable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Cuenta")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Naturaleza")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("CuentaContable");

                    b.HasCheckConstraint("CK_CuentaContable_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.DeduccionRetefuente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnnoVigenciaId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FuncionarioId")
                        .HasColumnType("int");

                    b.Property<decimal?>("InteresVivienda")
                        .HasColumnType("money");

                    b.Property<decimal?>("MedicinaPrepagada")
                        .HasColumnType("money");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AnnoVigenciaId");

                    b.HasIndex("FuncionarioId");

                    b.ToTable("DeduccionRetefuente");

                    b.HasCheckConstraint("CK_DeduccionRetefuente_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.Dependencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Dependencia");

                    b.HasCheckConstraint("CK_Dependencia_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.DependenciaJerarquia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("DependenciaHijoId")
                        .HasColumnType("int");

                    b.Property<int?>("DependenciaPadreId")
                        .HasColumnType("int");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("DependenciaHijoId");

                    b.HasIndex("DependenciaPadreId");

                    b.ToTable("DependenciaJerarquia");

                    b.HasCheckConstraint("CK_DependenciaJerarquia_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.DiagnosticoCie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("DiagnosticoCie");

                    b.HasCheckConstraint("CK_DiagnosticoCie_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.DivisionPoliticaNivel1", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("PaisId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaisId");

                    b.ToTable("DivisionPoliticaNivel1");

                    b.HasCheckConstraint("CK_DivisionPoliticaNivel1_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.DivisionPoliticaNivel2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("DivisionPoliticaNivel1Id")
                        .HasColumnType("int");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("DivisionPoliticaNivel1Id");

                    b.ToTable("DivisionPoliticaNivel2","dbo");

                    b.HasCheckConstraint("CK_DivisionPoliticaNivel2_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.DocumentoFuncionario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adjunto")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Comentario")
                        .HasColumnType("text");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FuncionarioId")
                        .HasColumnType("int");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TipoSoporteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FuncionarioId");

                    b.HasIndex("TipoSoporteId");

                    b.ToTable("DocumentoFuncionario");

                    b.HasCheckConstraint("CK_DocumentoFuncionario_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.Embargo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("ActualizaPrioridad")
                        .HasColumnType("bit");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Demandante")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<short?>("DigitoVerificacionDemandante")
                        .HasColumnType("smallint");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("EntidadFinancieraId")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaInicio")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FuncionarioId")
                        .HasColumnType("int");

                    b.Property<string>("Justificacion")
                        .HasColumnType("text");

                    b.Property<int?>("JuzgadoId")
                        .HasColumnType("int");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NumeroCuenta")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NumeroDocumentoDemandante")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NumeroProceso")
                        .HasColumnType("varchar(255)");

                    b.Property<decimal?>("PorcentajeCuota")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("Prioridad")
                        .HasColumnType("int");

                    b.Property<int>("TipoEmbargoId")
                        .HasColumnType("int");

                    b.Property<decimal?>("ValorCuota")
                        .HasColumnType("money");

                    b.Property<decimal?>("ValorEmbargo")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("EntidadFinancieraId");

                    b.HasIndex("FuncionarioId");

                    b.HasIndex("JuzgadoId");

                    b.HasIndex("TipoEmbargoId");

                    b.ToTable("Embargo");

                    b.HasCheckConstraint("CK_Embargo_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");

                    b.HasCheckConstraint("CK_Embargo_Estado", "([Estado]='Vigente' OR [Estado]='Pendiente' OR [Estado]='Liquidado' OR [Estado]='Anulado' OR [Estado]='Terminado')");
                });

            modelBuilder.Entity("ApiV3.Models.EmbargoConceptoNomina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConceptoNominaId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("EmbargoId")
                        .HasColumnType("int");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ConceptoNominaId");

                    b.HasIndex("EmbargoId");

                    b.ToTable("EmbargoConceptoNomina");

                    b.HasCheckConstraint("CK_EmbargoConceptoNomina_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.EmbargoSubperiodo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("EmbargoId")
                        .HasColumnType("int");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("SubPeriodoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmbargoId");

                    b.HasIndex("SubPeriodoId");

                    b.ToTable("EmbargoSubperiodo");

                    b.HasCheckConstraint("CK_EmbargoSubperiodo_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.EntidadFinanciera", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("DivisionPoliticaNivel2Id")
                        .HasColumnType("int");

                    b.Property<string>("Dv")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<bool?>("EntidadPorDefecto")
                        .HasColumnType("bit");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nit")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RepresentanteLegal")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("DivisionPoliticaNivel2Id");

                    b.ToTable("EntidadFinanciera");

                    b.HasCheckConstraint("CK_EntidadFinanciera_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.EstadoCivil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("EstadoCivil","dbo");

                    b.HasCheckConstraint("CK_EstadoCivil_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.ExperienciaLaboral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("date");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FuncionarioId")
                        .HasColumnType("int");

                    b.Property<string>("FuncionesCargo")
                        .HasColumnType("text");

                    b.Property<string>("Justificacion")
                        .HasColumnType("text");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MotivoRetiro")
                        .HasColumnType("text");

                    b.Property<string>("NombreCargo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NombreEmpresa")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NombreJefeInmediato")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<string>("Salario")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool?>("TrabajaActualmente")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FuncionarioId");

                    b.ToTable("ExperienciaLaboral");

                    b.HasCheckConstraint("CK_ExperienciaLaboral_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");

                    b.HasCheckConstraint("CK_ExperienciaLaboral_Estado", "([Estado]='Pendiente' OR [Estado]='Rechazado' OR [Estado]='Validado')");
                });

            modelBuilder.Entity("ApiV3.Models.FormaPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("HabilitaEnContrato")
                        .HasColumnType("bit");

                    b.Property<bool>("HabilitaEntidadFinanciera")
                        .HasColumnType("bit");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("FormaPago");

                    b.HasCheckConstraint("CK_FormaPago_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.FuncionNomina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Ayuda")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("FuncionParametro")
                        .HasColumnType("text");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("ParaCantidad")
                        .HasColumnType("bit");

                    b.Property<string>("Proceso")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TipoFuncion")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("FuncionNomina");

                    b.HasCheckConstraint("CK_FuncionNomina_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.FuncionVariable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FuncionNominaId")
                        .HasColumnType("int");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NombreParametro")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<string>("ValorDefecto")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("VariableNominaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FuncionNominaId");

                    b.HasIndex("VariableNominaId");

                    b.ToTable("FuncionVariable");

                    b.HasCheckConstraint("CK_FuncionVariable_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.Funcionario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adjunto")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Celular")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("ClaseLibretaMilitarId")
                        .HasColumnType("int");

                    b.Property<string>("CorreoElectronicoCorporativo")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CorreoElectronicoPersonal")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CriterioBusqueda")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DigitoVerificacion")
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("Distrito")
                        .HasColumnType("int");

                    b.Property<int>("DivisionPoliticaNivel2ExpedicionDocumentoId")
                        .HasColumnType("int");

                    b.Property<int>("DivisionPoliticaNivel2OrigenId")
                        .HasColumnType("int");

                    b.Property<int>("DivisionPoliticaNivel2ResidenciaId")
                        .HasColumnType("int");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("char(30)");

                    b.Property<int>("EstadoCivilId")
                        .HasColumnType("int");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("FechaExpedicionDocumento")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("date");

                    b.Property<DateTime?>("LicenciaConduccionAFechaVencimiento")
                        .HasColumnType("date");

                    b.Property<int?>("LicenciaConduccionAId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LicenciaConduccionBFechaVencimiento")
                        .HasColumnType("date");

                    b.Property<int?>("LicenciaConduccionBId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LicenciaConduccionCFechaVencimiento")
                        .HasColumnType("date");

                    b.Property<int?>("LicenciaConduccionCId")
                        .HasColumnType("int");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nit")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<double?>("NumeroCalzado")
                        .HasColumnType("float");

                    b.Property<string>("NumeroDocumento")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NumeroLibreta")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("OcupacionId")
                        .HasColumnType("int");

                    b.Property<bool>("Pensionado")
                        .HasColumnType("bit");

                    b.Property<string>("PrimerApellido")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PrimerNombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SegundoApellido")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SegundoNombre")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("SexoId")
                        .HasColumnType("int");

                    b.Property<string>("TallaCamisa")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TallaPantalon")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TelefonoFijo")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TipoDocumentoId")
                        .HasColumnType("int");

                    b.Property<int>("TipoSangreId")
                        .HasColumnType("int");

                    b.Property<int>("TipoViviendaId")
                        .HasColumnType("int");

                    b.Property<bool>("UsaLentes")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ClaseLibretaMilitarId");

                    b.HasIndex("DivisionPoliticaNivel2ExpedicionDocumentoId");

                    b.HasIndex("DivisionPoliticaNivel2OrigenId");

                    b.HasIndex("DivisionPoliticaNivel2ResidenciaId");

                    b.HasIndex("EstadoCivilId");

                    b.HasIndex("LicenciaConduccionAId");

                    b.HasIndex("LicenciaConduccionBId");

                    b.HasIndex("LicenciaConduccionCId");

                    b.HasIndex("OcupacionId");

                    b.HasIndex("SexoId");

                    b.HasIndex("TipoDocumentoId");

                    b.HasIndex("TipoSangreId");

                    b.HasIndex("TipoViviendaId");

                    b.ToTable("Funcionario");

                    b.HasCheckConstraint("CK_Funcionario_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");

                    b.HasCheckConstraint("CK_Funcionario_Estado", "([Estado]='Activo' OR [Estado]='EnVacaciones' OR [Estado]='Retirado' OR [Estado]='Seleccionado' OR [Estado]='Incapacitado')");
                });

            modelBuilder.Entity("ApiV3.Models.FuncionarioCentroCosto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActividadCentroCostoId")
                        .HasColumnType("int");

                    b.Property<int?>("Cantidad")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime>("FechaCorte")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("FormaRegistro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FuncionarioId")
                        .HasColumnType("int");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<decimal?>("Ponderado")
                        .HasColumnType("decimal(16,6)");

                    b.Property<decimal?>("Porcentaje")
                        .HasColumnType("decimal(16,6)");

                    b.HasKey("Id");

                    b.HasIndex("ActividadCentroCostoId");

                    b.HasIndex("FuncionarioId");

                    b.ToTable("FuncionarioCentroCosto");

                    b.HasCheckConstraint("CK_FuncionarioCentroCosto_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");

                    b.HasCheckConstraint("CK_FuncionarioCentroCosto_Estado", "([Estado]='Pendiente' OR [Estado]='Aplicado' )");
                });

            modelBuilder.Entity("ApiV3.Models.FuncionarioEstudio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AnioDeFin")
                        .HasColumnType("date");

                    b.Property<DateTime>("AnioDeInicio")
                        .HasColumnType("date");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoEstudio")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FuncionarioId")
                        .HasColumnType("int");

                    b.Property<string>("InstitucionEducativa")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Justificacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("NivelEducativoId")
                        .HasColumnType("int");

                    b.Property<string>("Observacion")
                        .HasColumnType("text");

                    b.Property<int>("PaisId")
                        .HasColumnType("int");

                    b.Property<int?>("ProfesionId")
                        .HasColumnType("int");

                    b.Property<string>("TarjetaProfesional")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("FuncionarioId");

                    b.HasIndex("NivelEducativoId");

                    b.HasIndex("PaisId");

                    b.HasIndex("ProfesionId");

                    b.ToTable("FuncionarioEstudio");

                    b.HasCheckConstraint("CK_FuncionarioEstudio_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");

                    b.HasCheckConstraint("CK_FuncionarioEstudio_Estado", "([Estado]='Pendiente' OR [Estado]='Rechazado' OR [Estado]='Validado')");
                });

            modelBuilder.Entity("ApiV3.Models.GastoViaje", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FuncionarioId")
                        .HasColumnType("int");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TipoGastoViajeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Valor")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("FuncionarioId");

                    b.HasIndex("TipoGastoViajeId");

                    b.ToTable("GastoViaje");

                    b.HasCheckConstraint("CK_GastoViaje_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");

                    b.HasCheckConstraint("CK_GastoViaje_Estado", "([Estado]='Pendiente' OR [Estado]='Aplicada')");
                });

            modelBuilder.Entity("ApiV3.Models.Grupo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Grupo");

                    b.HasCheckConstraint("CK_Grupo_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.GrupoNomina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("GrupoNomina");

                    b.HasCheckConstraint("CK_GrupoNomina_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.HojaDeVida", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adjunto")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Celular")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("ClaseLibretaMilitarId")
                        .HasColumnType("int");

                    b.Property<string>("CorreoElectronicoPersonal")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("DigitoVerificacion")
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("Distrito")
                        .HasColumnType("int");

                    b.Property<int?>("DivisionPoliticaNivel2ExpedicionDocumentoId")
                        .HasColumnType("int");

                    b.Property<int?>("DivisionPoliticaNivel2OrigenId")
                        .HasColumnType("int");

                    b.Property<int?>("DivisionPoliticaNivel2ResidenciaId")
                        .HasColumnType("int");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("EstadoCivilId")
                        .HasColumnType("int");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaExpedicionDocumento")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("date");

                    b.Property<DateTime?>("LicenciaConduccionAFechaVencimiento")
                        .HasColumnType("date");

                    b.Property<int?>("LicenciaConduccionAId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LicenciaConduccionBFechaVencimiento")
                        .HasColumnType("date");

                    b.Property<int?>("LicenciaConduccionBId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LicenciaConduccionCFechaVencimiento")
                        .HasColumnType("date");

                    b.Property<int?>("LicenciaConduccionCId")
                        .HasColumnType("int");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nit")
                        .HasColumnType("varchar(255)");

                    b.Property<double?>("NumeroCalzado")
                        .HasColumnType("float");

                    b.Property<string>("NumeroDocumento")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NumeroLibreta")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("OcupacionId")
                        .HasColumnType("int");

                    b.Property<bool?>("Pensionado")
                        .HasColumnType("bit");

                    b.Property<string>("PrimerApellido")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PrimerNombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SegundoApellido")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SegundoNombre")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("SexoId")
                        .HasColumnType("int");

                    b.Property<string>("TallaCamisa")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TallaPantalon")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TelefonoFijo")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TipoDocumentoId")
                        .HasColumnType("int");

                    b.Property<int?>("TipoSangreId")
                        .HasColumnType("int");

                    b.Property<int?>("TipoViviendaId")
                        .HasColumnType("int");

                    b.Property<bool?>("UsaLentes")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ClaseLibretaMilitarId");

                    b.HasIndex("DivisionPoliticaNivel2ExpedicionDocumentoId");

                    b.HasIndex("DivisionPoliticaNivel2OrigenId");

                    b.HasIndex("DivisionPoliticaNivel2ResidenciaId");

                    b.HasIndex("EstadoCivilId");

                    b.HasIndex("LicenciaConduccionAId");

                    b.HasIndex("LicenciaConduccionBId");

                    b.HasIndex("LicenciaConduccionCId");

                    b.HasIndex("OcupacionId");

                    b.HasIndex("SexoId");

                    b.HasIndex("TipoDocumentoId");

                    b.HasIndex("TipoSangreId");

                    b.HasIndex("TipoViviendaId");

                    b.ToTable("HojaDeVida","dbo");

                    b.HasCheckConstraint("CK_HojaDeVida_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.HojaDeVidaDocumento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adjunto")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Comentario")
                        .HasColumnType("text");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("HojaDeVidaId")
                        .HasColumnType("int");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TipoSoporteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HojaDeVidaId");

                    b.HasIndex("TipoSoporteId");

                    b.ToTable("HojaDeVidaDocumento","dbo");

                    b.HasCheckConstraint("CK_HojaDeVidaDocumento_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.HojaDeVidaEstudio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoEstudio")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("date");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("HojaDeVidaId")
                        .HasColumnType("int");

                    b.Property<string>("InstitucionEducativa")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("NivelEducativoId")
                        .HasColumnType("int");

                    b.Property<string>("Observacion")
                        .HasColumnType("text");

                    b.Property<int>("PaisId")
                        .HasColumnType("int");

                    b.Property<int?>("ProfesionId")
                        .HasColumnType("int");

                    b.Property<string>("TarjetaProfesional")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("HojaDeVidaId");

                    b.HasIndex("NivelEducativoId");

                    b.HasIndex("PaisId");

                    b.HasIndex("ProfesionId");

                    b.ToTable("HojaDeVidaEstudio","dbo");

                    b.HasCheckConstraint("CK_HojaDeVidaEstudio_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");

                    b.HasCheckConstraint("CK_HojaDeVidaEstudio_EstadoEstudio", "([EstadoEstudio]='EnCurso' OR [EstadoEstudio]='Aplazado' OR [EstadoEstudio]='Abandonado' OR [EstadoEstudio]='Culminado')");
                });

            modelBuilder.Entity("ApiV3.Models.HojaDeVidaExperienciaLaboral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("date");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("FuncionesCargo")
                        .HasColumnType("text");

                    b.Property<int>("HojaDeVidaId")
                        .HasColumnType("int");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MotivoRetiro")
                        .HasColumnType("text");

                    b.Property<string>("NombreCargo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NombreEmpresa")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NombreJefeInmediato")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<string>("Salario")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool?>("TrabajaActualmente")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("HojaDeVidaId");

                    b.ToTable("HojaDeVidaExperienciaLaboral","dbo");

                    b.HasCheckConstraint("CK_HojaDeVidaExperienciaLaboral_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.HoraExtra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cantidad")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("FormaRegistro")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("FuncionarioId")
                        .HasColumnType("int");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Observacion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrigenId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TipoHoraExtraId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Valor")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("FuncionarioId");

                    b.HasIndex("TipoHoraExtraId");

                    b.ToTable("HoraExtra");

                    b.HasCheckConstraint("CK_HoraExtra_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");

                    b.HasCheckConstraint("CK_HoraExtra_FormaRegistro", "([FormaRegistro]='Manual' OR [FormaRegistro]='Automatico' )");

                    b.HasCheckConstraint("CK_HoraExtra_Estado", "([Estado]='Pendiente' OR [Estado]='Aplicada')");
                });

            modelBuilder.Entity("ApiV3.Models.Idioma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Idioma");

                    b.HasCheckConstraint("CK_Idioma_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.InformacionBasica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActividadEconomicaId")
                        .HasColumnType("int");

                    b.Property<int>("ArlId")
                        .HasColumnType("int");

                    b.Property<bool>("BeneficiarioImpuestoEquidad")
                        .HasColumnType("bit");

                    b.Property<bool>("BeneficiarioLey1429De2010")
                        .HasColumnType("bit");

                    b.Property<int>("CargoId")
                        .HasColumnType("int");

                    b.Property<int>("ClaseAportanteTipoAportanteId")
                        .HasColumnType("int");

                    b.Property<string>("CorreoElectronico")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DigitoVerificacion")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Direccion")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("DivisionPoliticaNivel2Id")
                        .HasColumnType("int");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<string>("Fax")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("FechaConstitucion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("NaturalezaJuridicaId")
                        .HasColumnType("int");

                    b.Property<string>("Nit")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("OperadorPagoId")
                        .HasColumnType("int");

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Telefono")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TipoContribuyenteId")
                        .HasColumnType("int");

                    b.Property<int>("TipoDocumentoId")
                        .HasColumnType("int");

                    b.Property<int>("TipoPersonaId")
                        .HasColumnType("int");

                    b.Property<string>("Web")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ActividadEconomicaId");

                    b.HasIndex("ArlId");

                    b.HasIndex("CargoId");

                    b.HasIndex("ClaseAportanteTipoAportanteId");

                    b.HasIndex("DivisionPoliticaNivel2Id");

                    b.HasIndex("NaturalezaJuridicaId");

                    b.HasIndex("OperadorPagoId");

                    b.HasIndex("TipoContribuyenteId");

                    b.HasIndex("TipoDocumentoId");

                    b.HasIndex("TipoPersonaId");

                    b.ToTable("InformacionBasica","dbo");

                    b.HasCheckConstraint("CK_InformacionBasica_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.InformacionFamiliar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Celular")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Dependiente")
                        .HasColumnType("bit");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("DivisionPoliticaNivel2Id")
                        .HasColumnType("int");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("date");

                    b.Property<int>("FuncionarioId")
                        .HasColumnType("int");

                    b.Property<string>("Justificacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("NivelEducativoId")
                        .HasColumnType("int");

                    b.Property<string>("NumeroDocumento")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ParentescoId")
                        .HasColumnType("int");

                    b.Property<string>("PrimerApellido")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PrimerNombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SegundoApellido")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SegundoNombre")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("SexoId")
                        .HasColumnType("int");

                    b.Property<string>("TelefonoFijo")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TipoDocumentoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DivisionPoliticaNivel2Id");

                    b.HasIndex("FuncionarioId");

                    b.HasIndex("NivelEducativoId");

                    b.HasIndex("ParentescoId");

                    b.HasIndex("SexoId");

                    b.HasIndex("TipoDocumentoId");

                    b.ToTable("InformacionFamiliar");

                    b.HasCheckConstraint("CK_InformacionFamiliar_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");

                    b.HasCheckConstraint("CK_InformacionFamiliar_Estado", "([Estado]='Pendiente' OR [Estado]='Rechazado' OR [Estado]='Validado')");
                });

            modelBuilder.Entity("ApiV3.Models.JornadaLaboral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("JornadaLaboral");

                    b.HasCheckConstraint("CK_JornadaLaboral_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.JornadaLaboralDia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Dia")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<TimeSpan?>("HoraFinDescanso")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HoraFinJornada")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("HoraInicioDescanso")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HoraInicioJornada")
                        .HasColumnType("time");

                    b.Property<int>("JornadaLaboralId")
                        .HasColumnType("int");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("JornadaLaboralId");

                    b.ToTable("JornadaLaboralDia");

                    b.HasCheckConstraint("CK_JornadaLaboralDia_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.Juzgado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("DivisionPoliticaNivel2Id")
                        .HasColumnType("int");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NumeroCuentaJudicial")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("DivisionPoliticaNivel2Id");

                    b.ToTable("Juzgado");

                    b.HasCheckConstraint("CK_Juzgado_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.Libranza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("EntidadFinancieraId")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FuncionarioId")
                        .HasColumnType("int");

                    b.Property<string>("Justificacion")
                        .HasColumnType("text");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("NumeroCuotas")
                        .HasColumnType("int");

                    b.Property<string>("Observacion")
                        .HasColumnType("text");

                    b.Property<decimal>("ValorCuota")
                        .HasColumnType("money");

                    b.Property<decimal>("ValorPrestamo")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("EntidadFinancieraId");

                    b.HasIndex("FuncionarioId");

                    b.ToTable("Libranza");

                    b.HasCheckConstraint("CK_Libranza_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");

                    b.HasCheckConstraint("CK_Libranza_Estado", "([Estado]='Vigente' OR [Estado]='Terminada' OR [Estado]='Pendiente' OR [Estado]='Anulada')");
                });

            modelBuilder.Entity("ApiV3.Models.LibranzaSubperiodo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("LibranzaId")
                        .HasColumnType("int");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("SubPeriodoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LibranzaId");

                    b.HasIndex("SubPeriodoId");

                    b.ToTable("LibranzaSubperiodo");

                    b.HasCheckConstraint("CK_LibranzaSubperiodo_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.LibroVacacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContratoId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<byte>("DiasCausados")
                        .HasColumnType("tinyint");

                    b.Property<double?>("DiasDebe")
                        .HasColumnType("float");

                    b.Property<double>("DiasDisponibles")
                        .HasColumnType("float");

                    b.Property<short>("DiasTrabajados")
                        .HasColumnType("smallint");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("FinCausacion")
                        .HasColumnType("date");

                    b.Property<DateTime>("InicioCausacion")
                        .HasColumnType("date");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ContratoId");

                    b.ToTable("LibroVacaciones");

                    b.HasCheckConstraint("CK_LibroVacaciones_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");

                    b.HasCheckConstraint("CK_LibroVacaciones_Tipo", "([Tipo]='Anticipado' OR [Tipo]='Causado')");
                });

            modelBuilder.Entity("ApiV3.Models.LicenciaConduccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Clase")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("LicenciaConduccion","dbo");

                    b.HasCheckConstraint("CK_LicenciaConduccion_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.MotivoSolicitudCesantia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("MotivoSolicitudCesantia");

                    b.HasCheckConstraint("CK_MotivoSolicitudCesantia_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.MotivoVacante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("RequiereNombreAQuienReemplaza")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("MotivoVacante");

                    b.HasCheckConstraint("CK_MotivoVacante_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.NaturalezaJuridica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Codigo")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("NaturalezaJuridica");

                    b.HasCheckConstraint("CK_NaturalezaJuridica_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.NivelCargo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("NivelCargo");

                    b.HasCheckConstraint("CK_NivelCargo_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.NivelEducativo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("NivelEducativo","dbo");

                    b.HasCheckConstraint("CK_NivelEducativo_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.NomenclaturaDian", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("TextoPosterior")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("NomenclaturaDian");

                    b.HasCheckConstraint("CK_NomenclaturaDian_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.Nomina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaAplicacion")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("FechaFinal")
                        .HasColumnType("date");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<int>("PeriodoContableId")
                        .HasColumnType("int");

                    b.Property<int>("SubperiodoId")
                        .HasColumnType("int");

                    b.Property<int>("TipoLiquidacionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PeriodoContableId");

                    b.HasIndex("SubperiodoId");

                    b.HasIndex("TipoLiquidacionId");

                    b.ToTable("Nomina");

                    b.HasCheckConstraint("CK_Nomina_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");

                    b.HasCheckConstraint("CK_Nomina_Estado", "([Estado]='Inicializada' OR [Estado]='Modificada' OR [Estado]='EnLiquidacion' OR [Estado]='Liquidada' OR [Estado]='Aprobada' OR [Estado]='Aplicada')");
                });

            modelBuilder.Entity("ApiV3.Models.NominaCentroCosto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CentroCostoId")
                        .HasColumnType("int");

                    b.Property<int>("ConceptoNominaId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NitTercero")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("NominaFuncionarioId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Valor")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("CentroCostoId");

                    b.HasIndex("ConceptoNominaId");

                    b.HasIndex("NominaFuncionarioId");

                    b.ToTable("NominaCentroCosto");

                    b.HasCheckConstraint("CK_NominaCentroCosto_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.NominaContabilidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CentroCostoId")
                        .HasColumnType("int");

                    b.Property<int?>("ConceptoNominaId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<decimal?>("Credito")
                        .HasColumnType("money");

                    b.Property<int>("CuentaContableId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Debito")
                        .HasColumnType("money");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nit")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("NominaFuncionarioId")
                        .HasColumnType("int");

                    b.Property<string>("TipoComprobante")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CentroCostoId");

                    b.HasIndex("ConceptoNominaId");

                    b.HasIndex("CuentaContableId");

                    b.HasIndex("NominaFuncionarioId");

                    b.ToTable("NominaContabilidad");

                    b.HasCheckConstraint("CK_NominaContabilidad_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.NominaDetalle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Cantidad")
                        .HasColumnType("decimal(16,6)");

                    b.Property<int>("ConceptoNominaId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Inconsistencia")
                        .HasColumnType("text");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("NominaFuenteNovedadId")
                        .HasColumnType("int");

                    b.Property<int>("NominaFuncionarioId")
                        .HasColumnType("int");

                    b.Property<string>("Observacion")
                        .HasColumnType("text");

                    b.Property<string>("UnidadMedida")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("Valor")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("ConceptoNominaId");

                    b.HasIndex("NominaFuenteNovedadId");

                    b.HasIndex("NominaFuncionarioId");

                    b.ToTable("NominaDetalle");

                    b.HasCheckConstraint("CK_NominaDetalle_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");

                    b.HasCheckConstraint("CK_NominaDetalle_UnidadMedida", "([UnidadMedida]='Horas' OR [UnidadMedida]='Dias' OR [UnidadMedida]='Unidad' OR [UnidadMedida]='Porcentaje')");
                });

            modelBuilder.Entity("ApiV3.Models.NominaFuenteNovedad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("DiasCausados")
                        .HasColumnType("int");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Modulo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ModuloRegistroId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("NominaFuenteNovedad");

                    b.HasCheckConstraint("CK_NominaFuenteNovedad_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.NominaFuncionario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("char(30)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FuncionarioId")
                        .HasColumnType("int");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("NetoPagar")
                        .HasColumnType("money");

                    b.Property<int>("NominaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FuncionarioId");

                    b.HasIndex("NominaId", "FuncionarioId")
                        .IsUnique();

                    b.ToTable("NominaFuncionario");

                    b.HasCheckConstraint("CK_NominaFuncionario_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.Notificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("EnEjecucion")
                        .HasColumnType("bit");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Notificacion","dbo");

                    b.HasCheckConstraint("CK_Notificacion_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");

                    b.HasCheckConstraint("CK_Notificacion_Tipo", "([Tipo]='MobilePush' OR [Tipo]='Email')");
                });

            modelBuilder.Entity("ApiV3.Models.NotificacionDestinatario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CorreoElectronico")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("FuncionarioId")
                        .HasColumnType("int");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("NotificacionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FuncionarioId");

                    b.HasIndex("NotificacionId");

                    b.ToTable("NotificacionDestinatario","dbo");

                    b.HasCheckConstraint("CK_NotificacionDestinatario_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");

                    b.HasCheckConstraint("CK_NotificacionDestinatario_Estado", "([Estado]='Pendiente' OR [Estado]='Enviado' OR [Estado]='Fallido')");
                });

            modelBuilder.Entity("ApiV3.Models.NotificacionDestinatarioLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CorreoElectronico")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("FuncionarioId")
                        .HasColumnType("int");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("NotificacionId")
                        .HasColumnType("int");

                    b.Property<string>("Resultado")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FuncionarioId");

                    b.HasIndex("NotificacionId");

                    b.ToTable("NotificacionDestinatarioLog");

                    b.HasCheckConstraint("CK_NotificacionDestinatarioLog_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");

                    b.HasCheckConstraint("CK_NotificacionDestinatarioLog_Estado", "([Estado]='Pendiente' OR [Estado]='Enviado' OR [Estado]='Fallido')");
                });

            modelBuilder.Entity("ApiV3.Models.NotificacionPlantilla", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("Text");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Plantilla")
                        .IsRequired()
                        .HasColumnType("Text");

                    b.HasKey("Id");

                    b.ToTable("NotificacionPlantilla","dbo");

                    b.HasCheckConstraint("CK_NotificacionPlantilla_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.Novedad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Cantidad")
                        .HasColumnType("decimal(16,6)");

                    b.Property<int>("CategoriaNovedadId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime>("FechaAplicacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaFinalizacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FuncionarioId")
                        .HasColumnType("int");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Observacion")
                        .HasColumnType("text");

                    b.Property<int?>("TerceroId")
                        .HasColumnType("int");

                    b.Property<string>("Unidad")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<decimal?>("Valor")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaNovedadId");

                    b.HasIndex("FuncionarioId");

                    b.ToTable("Novedad");

                    b.HasCheckConstraint("CK_Novedad_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");

                    b.HasCheckConstraint("CK_Novedad_Estado", "([Estado]='EnCurso' OR [Estado]='Pendiente' OR [Estado]='Liquidada' OR [Estado]='Anulada' OR [Estado]='Cancelada')");
                });

            modelBuilder.Entity("ApiV3.Models.NovedadSubperiodo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("NovedadId")
                        .HasColumnType("int");

                    b.Property<int>("SubperiodoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NovedadId");

                    b.HasIndex("SubperiodoId");

                    b.ToTable("NovedadSubperiodo");

                    b.HasCheckConstraint("CK_NovedadSubperiodo_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.Ocupacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Ocupacion","dbo");

                    b.HasCheckConstraint("CK_Ocupacion_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.OperadorPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PaginaWeb")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("OperadorPago");

                    b.HasCheckConstraint("CK_OperadorPago_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.Pais", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nacionalidad")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Pais","dbo");

                    b.HasCheckConstraint("CK_Pais_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.ParametroGeneral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AnnoVigenciaId")
                        .HasColumnType("int");

                    b.Property<string>("Ayuda")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CategoriaParametroId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<string>("Etiqueta")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("HtmlOpcion")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Item")
                        .HasColumnType("text");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Obligatorio")
                        .HasColumnType("bit");

                    b.Property<short>("Orden")
                        .HasColumnType("smallint");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Valor")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AnnoVigenciaId");

                    b.HasIndex("CategoriaParametroId");

                    b.ToTable("ParametroGeneral");

                    b.HasCheckConstraint("CK_ParametroGeneral_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.Parentesco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Grado")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("NumeroPersonasPermitidas")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Parentesco");

                    b.HasCheckConstraint("CK_Parentesco_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.PeriodoContable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("char(10)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("PeriodoContable");

                    b.HasCheckConstraint("CK_PeriodoContable_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.Profesion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Profesion","dbo");

                    b.HasCheckConstraint("CK_Profesion_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.ProrrogaAusentismo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AusentismoId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ProrrogaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AusentismoId");

                    b.HasIndex("ProrrogaId");

                    b.ToTable("ProrrogaAusentismo");

                    b.HasCheckConstraint("CK_ProrrogaAusentismo_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.RangoUvt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Adiciona")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Desde")
                        .HasColumnType("int");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("Hasta")
                        .HasColumnType("int");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("Porcentaje")
                        .HasColumnType("decimal(19, 6)");

                    b.Property<int>("Sustrae")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidoDesde")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.ToTable("RangoUvt");

                    b.HasCheckConstraint("CK_RangoUvt_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.RepresentanteEmpresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CargoId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("date");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FuncionarioId")
                        .HasColumnType("int");

                    b.Property<string>("GrupoDocumentoSlug")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CargoId");

                    b.HasIndex("FuncionarioId");

                    b.ToTable("RepresentanteEmpresa");

                    b.HasCheckConstraint("CK_RepresentanteEmpresa_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.RequisicionPersonal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("CargoDependenciaSolicitadoId")
                        .HasColumnType("int");

                    b.Property<int>("CargoDependenciaSolicitanteId")
                        .HasColumnType("int");

                    b.Property<int>("CentroCostoId")
                        .HasColumnType("int");

                    b.Property<int?>("CentroOperativoSolicitadoId")
                        .HasColumnType("int");

                    b.Property<int?>("CentroOperativoSolicitanteId")
                        .HasColumnType("int");

                    b.Property<string>("CompetenciaCargo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("CompetenciaPortalReclutamiento")
                        .HasColumnType("bit");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("DivisionPoliticaNivel2Id")
                        .HasColumnType("int");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaAutorizacion")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("date");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("FuncionarioAQuienReemplazaId")
                        .HasColumnType("int");

                    b.Property<int>("FuncionarioSolicitanteId")
                        .HasColumnType("int");

                    b.Property<string>("Justificacion")
                        .HasColumnType("text");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("MotivoVacanteId")
                        .HasColumnType("int");

                    b.Property<string>("Observacion")
                        .HasColumnType("text");

                    b.Property<string>("PerfilCargo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("PerfilPortalReclutamiento")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Salario")
                        .HasColumnType("money");

                    b.Property<bool?>("SalarioPortalReclutamiento")
                        .HasColumnType("bit");

                    b.Property<int>("TipoContratoId")
                        .HasColumnType("int");

                    b.Property<string>("TipoReclutamiento")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CargoDependenciaSolicitadoId");

                    b.HasIndex("CargoDependenciaSolicitanteId");

                    b.HasIndex("CentroCostoId");

                    b.HasIndex("CentroOperativoSolicitadoId");

                    b.HasIndex("CentroOperativoSolicitanteId");

                    b.HasIndex("DivisionPoliticaNivel2Id");

                    b.HasIndex("FuncionarioAQuienReemplazaId");

                    b.HasIndex("FuncionarioSolicitanteId");

                    b.HasIndex("MotivoVacanteId");

                    b.HasIndex("TipoContratoId");

                    b.ToTable("RequisicionPersonal","dbo");

                    b.HasCheckConstraint("CK_RequisicionPersonal_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");

                    b.HasCheckConstraint("CK_RequisicionPersonal_Estado", "([estado]='Anulada' OR [estado]='Aprobada' OR [estado]='Autorizada' OR [estado]='Cancelada' OR [estado]='Cubierta' OR [estado]='Rechazada' OR [estado]='Revisada' OR [estado]='Solicitada')");

                    b.HasCheckConstraint("CK_RequisicionPersonal_TipoReclutamiento", "([TipoReclutamiento]='Externa' OR [TipoReclutamiento]='Interna' OR [TipoReclutamiento]='Mixta')");
                });

            modelBuilder.Entity("ApiV3.Models.Sexo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Sexo","dbo");

                    b.HasCheckConstraint("CK_Sexo_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.SolicitudCesantia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BaseCalculoCesantia")
                        .HasColumnType("money");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("FechaSolicitud")
                        .HasColumnType("datetime2");

                    b.Property<int>("FuncionarioId")
                        .HasColumnType("int");

                    b.Property<string>("Justificacion")
                        .HasColumnType("text");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("MotivoSolicitudCesantiaId")
                        .HasColumnType("int");

                    b.Property<string>("Observacion")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Soporte")
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("ValorSolicitado")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("FuncionarioId");

                    b.HasIndex("MotivoSolicitudCesantiaId");

                    b.ToTable("SolicitudCesantia");

                    b.HasCheckConstraint("CK_SolicitudCesantia_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");

                    b.HasCheckConstraint("CK_SolicitudCesantia_Estado", "([Estado]='EnTramite' OR [Estado]='Aprobada' OR [Estado]='Rechazada' OR [Estado]='Cancelada' OR [Estado]='Finalizada' )");
                });

            modelBuilder.Entity("ApiV3.Models.SolicitudPermiso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("char(20)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("date");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FuncionarioId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("HoraLlegada")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("HoraSalida")
                        .HasColumnType("time");

                    b.Property<string>("Justificacion")
                        .HasColumnType("text");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<int>("TipoAusentismoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FuncionarioId");

                    b.HasIndex("TipoAusentismoId");

                    b.ToTable("SolicitudPermiso");

                    b.HasCheckConstraint("CK_SolicitudPermiso_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");

                    b.HasCheckConstraint("CK_SolicitudPermiso_Estado", "([Estado]='Aprobada' OR [Estado]='Autorizada' OR [Estado]='Cancelada' OR [Estado]='Rechazada' OR [Estado]='Solicitada')");
                });

            modelBuilder.Entity("ApiV3.Models.SolicitudVacacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<byte>("DiasDinero")
                        .HasColumnType("tinyint");

                    b.Property<byte>("DiasDisfrute")
                        .HasColumnType("tinyint");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("FechaFinDisfrute")
                        .HasColumnType("date");

                    b.Property<DateTime>("FechaInicioDisfrute")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaPago")
                        .IsRequired()
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaRegreso")
                        .IsRequired()
                        .HasColumnType("date");

                    b.Property<int>("FuncionarioId")
                        .HasColumnType("int");

                    b.Property<string>("Justificacion")
                        .HasColumnType("text");

                    b.Property<int>("LibroVacacionesId")
                        .HasColumnType("int");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("NominaFuncionarioId")
                        .HasColumnType("int");

                    b.Property<string>("Observacion")
                        .HasColumnType("text");

                    b.Property<decimal?>("Remuneracion")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("FuncionarioId");

                    b.HasIndex("LibroVacacionesId");

                    b.HasIndex("NominaFuncionarioId");

                    b.ToTable("SolicitudVacaciones");

                    b.HasCheckConstraint("CK_SolicitudVacaciones_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");

                    b.HasCheckConstraint("CK_SolicitudVacaciones_Estado", "([Estado]='Aprobada' OR [Estado]='Autorizada' OR [Estado]='Cancelada' OR [Estado]='EnCurso' OR [Estado]='Interrumpida' OR [Estado]='Rechazada' OR [Estado]='Solicitada'  OR [Estado]='Terminada' OR [Estado]='Anulada')");
                });

            modelBuilder.Entity("ApiV3.Models.SolicitudVacacionesInterrupcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FuncionarioAusentismoId")
                        .HasColumnType("int");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("SolicitudVacacionesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FuncionarioAusentismoId");

                    b.HasIndex("SolicitudVacacionesId");

                    b.ToTable("SolicitudVacacionesInterrupcion");

                    b.HasCheckConstraint("CK_SolicitudVacacionesInterrupcion_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.SoporteSolicitudPermiso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adjunto")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Comentario")
                        .HasColumnType("text");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("SolicitudPermisoId")
                        .HasColumnType("int");

                    b.Property<int>("TipoSoporteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SolicitudPermisoId");

                    b.HasIndex("TipoSoporteId");

                    b.ToTable("SoporteSolicitudPermiso");

                    b.HasCheckConstraint("CK_SoporteSolicitudPermiso_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.SubPeriodo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("DiaInicial")
                        .HasColumnType("int");

                    b.Property<int>("Dias")
                        .HasColumnType("int");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TipoPeriodoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TipoPeriodoId");

                    b.ToTable("SubPeriodo");

                    b.HasCheckConstraint("CK_SubPeriodo_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.SubtipoCotizante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique();

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("SubtipoCotizante");

                    b.HasCheckConstraint("CK_SubtipoCotizante_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.Sustituto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CargoASustituirId")
                        .HasColumnType("int");

                    b.Property<int>("CargoSustitutoId")
                        .HasColumnType("int");

                    b.Property<int?>("CentroOperativoASutituirId")
                        .HasColumnType("int");

                    b.Property<int?>("CentroOperativoSustitutoId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("FechaFinal")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Observacion")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CargoASustituirId");

                    b.HasIndex("CargoSustitutoId");

                    b.HasIndex("CentroOperativoASutituirId");

                    b.HasIndex("CentroOperativoSustitutoId");

                    b.ToTable("Sustituto");

                    b.HasCheckConstraint("CK_Sustituto_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.TareaProgramada", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("EnEjecucion")
                        .HasColumnType("bit");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Instruccion")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Periodicidad")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Alias")
                        .IsUnique()
                        .HasFilter("[Alias] IS NOT NULL");

                    b.ToTable("TareaProgramada","dbo");

                    b.HasCheckConstraint("CK_TareaProgramada_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.TareaProgramadaLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Resultado")
                        .HasColumnType("text");

                    b.Property<int>("TareaProgramadaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TareaProgramadaId");

                    b.ToTable("TareaProgramadaLog");

                    b.HasCheckConstraint("CK_TareasProgramadasLogs_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");

                    b.HasCheckConstraint("CK_TareaProgramadaLog_Estado", "([Estado]='Exitoso' OR [Estado]='Fallido')");
                });

            modelBuilder.Entity("ApiV3.Models.Tercero", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<short>("DigitoVerificacion")
                        .HasColumnType("smallint");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("DivisionPoliticaNivel2Id")
                        .HasColumnType("int");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("EntidadFinancieraId")
                        .HasColumnType("int");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nit")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NumeroCuenta")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TipoCuentaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DivisionPoliticaNivel2Id");

                    b.HasIndex("EntidadFinancieraId");

                    b.HasIndex("TipoCuentaId");

                    b.ToTable("Tercero");

                    b.HasCheckConstraint("CK_Tercero_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.TipoAccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Codigo")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("TipoAccion");

                    b.HasCheckConstraint("CK_TipoAccion_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.TipoAdministradora", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("TarifaAporteEmpresa")
                        .HasColumnType("decimal(19,3)");

                    b.Property<decimal>("TarifaAporteFuncionario")
                        .HasColumnType("decimal(19,3)");

                    b.Property<decimal?>("TarifaAporteTotal")
                        .HasColumnType("decimal(19,3)");

                    b.HasKey("Id");

                    b.ToTable("TipoAdministradora");

                    b.HasCheckConstraint("CK_TipoAdministradora_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.TipoAportante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("char(2)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique();

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("TipoAportante");

                    b.HasCheckConstraint("CK_TipoAportante_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.TipoAportanteTipoCotizante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TipoAportanteId")
                        .HasColumnType("int");

                    b.Property<int>("TipoCotizanteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TipoAportanteId");

                    b.HasIndex("TipoCotizanteId");

                    b.ToTable("TipoAportanteTipoCotizante");

                    b.HasCheckConstraint("CK_TipoAportanteTipoCotizante_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.TipoAportanteTipoPlanilla", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TipoAportanteId")
                        .HasColumnType("int");

                    b.Property<int>("TipoPlanillaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TipoAportanteId");

                    b.HasIndex("TipoPlanillaId");

                    b.ToTable("TipoAportanteTipoPlanilla");

                    b.HasCheckConstraint("CK_TipoAportanteTipoPlanilla_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.TipoAusentismo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClaseAusentismoId")
                        .HasColumnType("int");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UnidadTiempo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClaseAusentismoId");

                    b.HasIndex("Codigo")
                        .IsUnique();

                    b.ToTable("TipoAusentismo");

                    b.HasCheckConstraint("CK_TipoAusentismo_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.TipoAusentismoConceptoNomina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CoberturaDesde")
                        .HasColumnType("int");

                    b.Property<int>("CoberturaHasta")
                        .HasColumnType("int");

                    b.Property<int>("ConceptoNominaId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TipoAusentismoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConceptoNominaId");

                    b.HasIndex("TipoAusentismoId");

                    b.ToTable("TipoAusentismoConceptoNomina");

                    b.HasCheckConstraint("CK_TipoAusentismoConceptoNomina_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.TipoBeneficio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ConceptoNominaCalculoId")
                        .HasColumnType("int");

                    b.Property<int?>("ConceptoNominaDeduccionId")
                        .HasColumnType("int");

                    b.Property<int?>("ConceptoNominaDevengoId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("CuotaPermitida")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<int>("DiasAntiguedad")
                        .HasColumnType("int");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("MontoMaximo")
                        .HasColumnType("money");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("PeriodoPago")
                        .HasColumnType("bit");

                    b.Property<bool>("PermisoEstudio")
                        .HasColumnType("bit");

                    b.Property<bool>("PermiteAuxilioEducativo")
                        .HasColumnType("bit");

                    b.Property<bool>("PermiteDescuentoNomina")
                        .HasColumnType("bit");

                    b.Property<bool>("PlazoMes")
                        .HasColumnType("bit");

                    b.Property<bool>("RequiereAprobacionJefe")
                        .HasColumnType("bit");

                    b.Property<bool>("ValorAutorizado")
                        .HasColumnType("bit");

                    b.Property<bool>("ValorSolicitado")
                        .HasColumnType("bit");

                    b.Property<int>("VecesAnio")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConceptoNominaCalculoId");

                    b.HasIndex("ConceptoNominaDeduccionId");

                    b.HasIndex("ConceptoNominaDevengoId");

                    b.ToTable("TipoBeneficio");

                    b.HasCheckConstraint("CK_TipoBeneficio_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.TipoBeneficioRequisito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TipoBeneficioId")
                        .HasColumnType("int");

                    b.Property<int>("TipoSoporteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TipoBeneficioId");

                    b.HasIndex("TipoSoporteId");

                    b.ToTable("TipoBeneficioRequisito");

                    b.HasCheckConstraint("CK_TipoBeneficioRequisito_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.TipoContrato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CantidadProrrogas")
                        .HasColumnType("int");

                    b.Property<string>("Clase")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DocumentoSlug")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("DuracionMaxima")
                        .HasColumnType("int");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("TerminoIndefinido")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("TipoContrato");

                    b.HasCheckConstraint("CK_TipoContrato_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");

                    b.HasCheckConstraint("CK_TipoContrato_Clase", "([Clase]='NoIntegral' OR [Clase]='Integral' OR [Clase]='Aprendizaje' OR [Clase]='Practicante' OR [Clase]='Variable')");
                });

            modelBuilder.Entity("ApiV3.Models.TipoContribuyente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Persona")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("TipoContribuyente");

                    b.HasCheckConstraint("CK_TipoContribuyente_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.TipoCotizante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("char(2)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique();

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("TipoCotizante");

                    b.HasCheckConstraint("CK_TipoCotizante_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.TipoCotizanteSubtipoCotizante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("AportaAArl")
                        .HasColumnType("bit");

                    b.Property<bool?>("AportaACcf")
                        .HasColumnType("bit");

                    b.Property<bool?>("AportaAIcbf")
                        .HasColumnType("bit");

                    b.Property<bool?>("AportaAPension")
                        .HasColumnType("bit");

                    b.Property<bool?>("AportaASalud")
                        .HasColumnType("bit");

                    b.Property<bool?>("AportaASena")
                        .HasColumnType("bit");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("SubtipoCotizanteId")
                        .HasColumnType("int");

                    b.Property<int>("TipoCotizanteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubtipoCotizanteId");

                    b.HasIndex("TipoCotizanteId");

                    b.ToTable("TipoCotizanteSubtipoCotizante");

                    b.HasCheckConstraint("CK_TipoCotizanteSubtipoCotizante_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.TipoCotizanteTipoPlanilla", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TipoCotizanteId")
                        .HasColumnType("int");

                    b.Property<int>("TipoPlanillaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TipoCotizanteId");

                    b.HasIndex("TipoPlanillaId");

                    b.ToTable("TipoCotizanteTipoPlanilla");

                    b.HasCheckConstraint("CK_TipoCotizanteTipoPlanilla_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.TipoCuenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique()
                        .HasFilter("[Codigo] IS NOT NULL");

                    b.ToTable("TipoCuenta");

                    b.HasCheckConstraint("CK_TipoCuenta_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.TipoDocumento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodigoDian")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CodigoPila")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EquivalenteBancario")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Formato")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Validacion")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("EquivalenteBancario")
                        .IsUnique()
                        .HasFilter("[EquivalenteBancario] IS NOT NULL");

                    b.ToTable("TipoDocumento","dbo");

                    b.HasCheckConstraint("CK_TipoDocumento_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");

                    b.HasCheckConstraint("CK_TipoDocumento_Formato", "([Formato]='Alfanumerico' OR [Formato]='Numerico')");
                });

            modelBuilder.Entity("ApiV3.Models.TipoEmbargo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<short>("Prioridad")
                        .HasColumnType("smallint");

                    b.Property<bool>("SalarioMinimoEmbargable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("TipoEmbargo");

                    b.HasCheckConstraint("CK_TipoEmbargo_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.TipoEmbargoConceptoNomina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConceptoNominaId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<double>("MaximoEmbargarConcepto")
                        .HasColumnType("float");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TipoEmbargoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConceptoNominaId");

                    b.HasIndex("TipoEmbargoId");

                    b.ToTable("TipoEmbargoConceptoNomina");

                    b.HasCheckConstraint("CK_TipoEmbargoConceptoNomina_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.TipoGastoViaje", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConceptoNominaId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ConceptoNominaId");

                    b.ToTable("TipoGastoViaje");

                    b.HasCheckConstraint("CK_TipoGastoViaje_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");

                    b.HasCheckConstraint("CK_TipoGastoViaje_Estado", "([Tipo]='ViaticosHospedaje' OR [Tipo]='ViaticosAlimentacion' OR [Tipo]='FaltanteViaticos' OR [Tipo]='PagoAnticipoGV' OR [Tipo]='BaseViaticosAlimentacion' OR [Tipo]='BaseViaticosRetefuente' OR [Tipo]='BaseRetefuenteGV' OR [Tipo]='BaseViaticosHospedaje')");
                });

            modelBuilder.Entity("ApiV3.Models.TipoHoraExtra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConceptoNominaId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ConceptoNominaId");

                    b.ToTable("TipoHoraExtra");

                    b.HasCheckConstraint("CK_TipoHoraExtra_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");

                    b.HasCheckConstraint("CK_TipoHoraExtra_Tipo", "([Tipo]='RecargoNocturno' OR [Tipo]='HoraExtraDiurna' OR [Tipo]='HoraExtraNocturna' OR [Tipo]='HoraExtraFestivaDominicalDiurna' OR [Tipo]='HoraExtraFestivaDominicalNocturna'  OR [Tipo]='RecargoNocturnoDominicalFestivo' OR [Tipo]='DominicalFestivoCompensado' OR [Tipo]='DominicalFestivoNoCompensado')");
                });

            modelBuilder.Entity("ApiV3.Models.TipoLiquidacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AplicaPila")
                        .HasColumnType("bit");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ConceptoNominaAgrupadorId")
                        .HasColumnType("int");

                    b.Property<bool>("Contabiliza")
                        .HasColumnType("bit");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("FechaManual")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OperacionTotal")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Proceso")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TipoPeriodoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConceptoNominaAgrupadorId");

                    b.HasIndex("TipoPeriodoId");

                    b.ToTable("TipoLiquidacion");

                    b.HasCheckConstraint("CK_TipoLiquidacion_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");

                    b.HasCheckConstraint("CK_TipoLiquidacion_OperacionTotal", "([OperacionTotal]='TotalDevengosMenosTotalDeducciones' or [OperacionTotal]='TotalCalculos' or [OperacionTotal]='SoloCalculosSinAgrupar' or [OperacionTotal]='TotalDeducciones')");
                });

            modelBuilder.Entity("ApiV3.Models.TipoLiquidacionComprobante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CentroCostoId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("CuentaContableId")
                        .HasColumnType("int");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Naturaleza")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TipoComprobante")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TipoLiquidacionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CentroCostoId");

                    b.HasIndex("CuentaContableId");

                    b.HasIndex("TipoLiquidacionId");

                    b.ToTable("TipoLiquidacionComprobante");

                    b.HasCheckConstraint("CK_TipoLiquidacionComprobante_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");

                    b.HasCheckConstraint("CK_TipoLiquidacionComprobante_TipoComprobante", "([TipoComprobante]='Contabilizacion' OR [TipoComprobante]='Transferencia' OR [TipoComprobante]='Reversion' )");

                    b.HasCheckConstraint("CK_TipoLiquidacionComprobante_Naturaleza", "([Naturaleza]='Debito' OR [Naturaleza]='Credito' )");
                });

            modelBuilder.Entity("ApiV3.Models.TipoLiquidacionConcepto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConceptoNominaId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("SubPeriodoId")
                        .HasColumnType("int");

                    b.Property<int?>("TipoContratoId")
                        .HasColumnType("int");

                    b.Property<int>("TipoliquidacionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConceptoNominaId");

                    b.HasIndex("SubPeriodoId");

                    b.HasIndex("TipoContratoId");

                    b.HasIndex("TipoliquidacionId");

                    b.ToTable("TipoLiquidacionConcepto");

                    b.HasCheckConstraint("CK_TipoLiquidacionConcepto_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.TipoLiquidacionEstado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoContrato")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("EstadoFuncionario")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TipoLiquidacionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TipoLiquidacionId");

                    b.ToTable("TipoLiquidacionEstado");

                    b.HasCheckConstraint("CK_TipoLiquidacionEstado_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.TipoLiquidacionModulo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Modulo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TipoLiquidacionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TipoLiquidacionId");

                    b.ToTable("TipoLiquidacionModulo");

                    b.HasCheckConstraint("CK_TipoLiquidacionModulo_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");

                    b.HasCheckConstraint("CK_TipoLiquidacionModulo_Modulo", "([Modulo]='Libranzas' or [Modulo]='Embargos' or [Modulo]='Ausentismos' or [Modulo]='Beneficios' or [Modulo]='HorasExtra' or [Modulo]='HorasExtra' or [Modulo]='GastosViaje' or [Modulo]='OtrasNovedades' or [Modulo]='Vacaciones' or [Modulo]='AnticipoCesantia')");
                });

            modelBuilder.Entity("ApiV3.Models.TipoMoneda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("TipoMoneda");

                    b.HasCheckConstraint("CK_TipoMoneda_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.TipoOtroSi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DocumentoSlug")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Numeracion")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("TipoOtroSi");

                    b.HasCheckConstraint("CK_TipoOtroSi_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.TipoPeriodo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("PagoPorDefecto")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("TipoPeriodo");

                    b.HasCheckConstraint("CK_TipoPeriodo_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.TipoPersona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("char(1)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique();

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("TipoPersona");

                    b.HasCheckConstraint("CK_TipoPersonas_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.TipoPlanilla", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("char(1)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("RequiereFechaPagoPlanilla")
                        .HasColumnType("bit");

                    b.Property<bool>("RequiereNumeroPlanilla")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique();

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("TipoPlanilla");

                    b.HasCheckConstraint("CK_TipoPlanilla_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.TipoSangre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("TipoSangre","dbo");

                    b.HasCheckConstraint("CK_TipoSangre_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.TipoSoporte", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("TipoSoporte","dbo");

                    b.HasCheckConstraint("CK_TipoSoporte_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.TipoVivienda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("TipoVivienda","dbo");

                    b.HasCheckConstraint("CK_TipoVivienda_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.VariableNomina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Tamanio")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TipoDato")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TipoVariable")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("VariableNomina");

                    b.HasCheckConstraint("CK_VariableNomina_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");

                    b.HasCheckConstraint("CK_VariableNomina_TipoDato", "([TipoDato] = 'BIGINT' OR [TipoDato] = 'NUMERIC' OR [TipoDato] = 'BIT' OR [TipoDato] = 'SMALLINT' OR [TipoDato] = 'DECIMAL' OR [TipoDato] = 'SMALLMONEY' OR [TipoDato] = 'INT' OR [TipoDato] = 'TINYINT' OR [TipoDato] = 'MONEY' OR [TipoDato] = 'FLOAT' OR [TipoDato] = 'REAL' OR [TipoDato] = 'DATE' OR [TipoDato] = 'DATETIMEOFFSET' OR [TipoDato] = 'DATETIME2' OR [TipoDato] = 'SMALLDATETIME' OR [TipoDato] = 'DATETIME' OR [TipoDato] = 'TIME' OR [TipoDato] = 'CHAR' OR [TipoDato] = 'VARCHAR' OR [TipoDato] = 'TEXT' OR [TipoDato] = 'NCHAR' OR [TipoDato] = 'NVARCHAR' OR [TipoDato] = 'NTEXT' OR [TipoDato] = 'BINARY' OR [TipoDato] = 'VARBINARY' OR [TipoDato] = 'IMAGE' OR [TipoDato] = 'CURSOR' OR [TipoDato] = 'ROWVERSION' OR [TipoDato] = 'HIERARCHYID' OR [TipoDato] = 'UNIQUEIDENTIFIER' OR [TipoDato] = 'SQL_VARIANT' OR [TipoDato] = 'XML' OR [TipoDato] = 'TABLE')");
                });

            modelBuilder.Entity("ApiV3.Models._EnlaceExterno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Imagen")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("_EnlaceExterno","util");

                    b.HasCheckConstraint("CK_EnlaceExterno_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models._LogConfiguracion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Model")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Tabla")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("_LogConfiguracion","util");
                });

            modelBuilder.Entity("ApiV3.Models._MenuFavorito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EliminadoPor")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstadoRegistro")
                        .HasColumnType("char(10)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FuncionarioId")
                        .HasColumnType("int");

                    b.Property<string>("ItemMenu")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("_MenuFavorito","util");

                    b.HasCheckConstraint("CK_MenuFavorito_EstadoRegistro", "([EstadoRegistro]='Eliminado' OR [EstadoRegistro]='Inactivo' OR [EstadoRegistro]='Activo')");
                });

            modelBuilder.Entity("ApiV3.Models.ActividadCentroCosto", b =>
                {
                    b.HasOne("ApiV3.Models.Actividad", "Actividad")
                        .WithMany()
                        .HasForeignKey("ActividadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.CentroCosto", "CentroCosto")
                        .WithMany()
                        .HasForeignKey("CentroCostoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.DivisionPoliticaNivel2", "Municipio")
                        .WithMany()
                        .HasForeignKey("MunicipioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.ActividadFuncionario", b =>
                {
                    b.HasOne("ApiV3.Models.Actividad", "Actividad")
                        .WithMany()
                        .HasForeignKey("ActividadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.Funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.DivisionPoliticaNivel2", "Municipio")
                        .WithMany()
                        .HasForeignKey("MunicipioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.ActividadFuncionarioCentroCosto", b =>
                {
                    b.HasOne("ApiV3.Models.ActividadFuncionario", "ActividadFuncionario")
                        .WithMany()
                        .HasForeignKey("ActividadFuncionarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.FuncionarioCentroCosto", "FuncionarioCentroCosto")
                        .WithMany()
                        .HasForeignKey("FuncionarioCentroCostoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.Administradora", b =>
                {
                    b.HasOne("ApiV3.Models.TipoAdministradora", "TipoAdministradora")
                        .WithMany()
                        .HasForeignKey("TipoAdministradoraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.AplicacionExternaCargo", b =>
                {
                    b.HasOne("ApiV3.Models.AplicacionExterna", "AplicacionExterna")
                        .WithMany()
                        .HasForeignKey("AplicacionExternaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.CargoDependencia", "CargoDependenciaIndependiente")
                        .WithMany()
                        .HasForeignKey("CargoDependenciaIndependienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.CentroOperativo", "CentroOperativoDependiente")
                        .WithMany()
                        .HasForeignKey("CentroOperativoDependienteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApiV3.Models.CentroOperativo", "CentroOperativoIndependiente")
                        .WithMany()
                        .HasForeignKey("CentroOperativoIndependienteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ApiV3.Models.AplicacionExternaCargoDependiente", b =>
                {
                    b.HasOne("ApiV3.Models.AplicacionExternaCargo", "AplicacionExternaCargo")
                        .WithMany()
                        .HasForeignKey("AplicacionExternaCargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.CargoDependencia", "CargoDependencia")
                        .WithMany()
                        .HasForeignKey("CargoDependenciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.AusentismoFuncionario", b =>
                {
                    b.HasOne("ApiV3.Models.DiagnosticoCie", "DiagnosticoCie")
                        .WithMany()
                        .HasForeignKey("DiagnosticoCieId");

                    b.HasOne("ApiV3.Models.Funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoAusentismo", "TipoAusentismo")
                        .WithMany()
                        .HasForeignKey("TipoAusentismoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.Beneficio", b =>
                {
                    b.HasOne("ApiV3.Models.Funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoBeneficio", "TipoBeneficio")
                        .WithMany()
                        .HasForeignKey("TipoBeneficioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoPeriodo", "TipoPeriodo")
                        .WithMany()
                        .HasForeignKey("TipoPeriodoId");
                });

            modelBuilder.Entity("ApiV3.Models.BeneficioAdjunto", b =>
                {
                    b.HasOne("ApiV3.Models.Beneficio", "Beneficio")
                        .WithMany()
                        .HasForeignKey("BeneficioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoBeneficioRequisito", "TipoBeneficioRequisito")
                        .WithMany()
                        .HasForeignKey("TipoBeneficioRequisitoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.BeneficioSubperiodo", b =>
                {
                    b.HasOne("ApiV3.Models.Beneficio", "Beneficio")
                        .WithMany()
                        .HasForeignKey("BeneficioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.SubPeriodo", "SubPeriodo")
                        .WithMany()
                        .HasForeignKey("SubPeriodoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.Candidato", b =>
                {
                    b.HasOne("ApiV3.Models.HojaDeVida", "HojaDeVida")
                        .WithMany()
                        .HasForeignKey("HojaDeVidaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.RequisicionPersonal", "RequisicionPersonal")
                        .WithMany()
                        .HasForeignKey("RequisicionPersonalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.Cargo", b =>
                {
                    b.HasOne("ApiV3.Models.NivelCargo", "NivelCargo")
                        .WithMany()
                        .HasForeignKey("NivelCargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.CargoCentroCosto", b =>
                {
                    b.HasOne("ApiV3.Models.ActividadCentroCosto", "ActividadCentroCosto")
                        .WithMany()
                        .HasForeignKey("ActividadCentroCostoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.Cargo", "Cargo")
                        .WithMany()
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.CentroOperativo", "CentroOperativo")
                        .WithMany()
                        .HasForeignKey("CentroOperativoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.CargoDependencia", b =>
                {
                    b.HasOne("ApiV3.Models.Cargo", "Cargo")
                        .WithMany()
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.Dependencia", "Dependencia")
                        .WithMany()
                        .HasForeignKey("DependenciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.CargoGrado", b =>
                {
                    b.HasOne("ApiV3.Models.Cargo", "Cargo")
                        .WithMany()
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.CargoGrupo", b =>
                {
                    b.HasOne("ApiV3.Models.Cargo", "Cargo")
                        .WithMany()
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.Grupo", "Grupo")
                        .WithMany()
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.CargoPresupuesto", b =>
                {
                    b.HasOne("ApiV3.Models.AnnoVigencia", "AnnoVigencia")
                        .WithMany()
                        .HasForeignKey("AnnoVigenciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.Cargo", "Cargo")
                        .WithMany()
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.CargoReporta", b =>
                {
                    b.HasOne("ApiV3.Models.CargoDependencia", "CargoDependencia")
                        .WithMany()
                        .HasForeignKey("CargoDependenciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.CargoDependencia", "CargoDependenciaReporta")
                        .WithMany("MeReportan")
                        .HasForeignKey("CargoDependenciaReportaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.CategoriaNovedad", b =>
                {
                    b.HasOne("ApiV3.Models.ConceptoNomina", "ConceptoNomina")
                        .WithMany()
                        .HasForeignKey("ConceptoNominaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ApiV3.Models.ClaseAportanteTipoAportante", b =>
                {
                    b.HasOne("ApiV3.Models.ClaseAportante", "ClaseAportante")
                        .WithMany()
                        .HasForeignKey("ClaseAportanteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoAportante", "TipoAportante")
                        .WithMany()
                        .HasForeignKey("TipoAportanteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.ClaseAportanteTipoCotizante", b =>
                {
                    b.HasOne("ApiV3.Models.ClaseAportante", "ClaseAportante")
                        .WithMany()
                        .HasForeignKey("ClaseAportanteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoCotizante", "TipoCotizante")
                        .WithMany()
                        .HasForeignKey("TipoCotizanteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.ConceptoBase", b =>
                {
                    b.HasOne("ApiV3.Models.ConceptoNomina", "ConceptoNominaAgrupador")
                        .WithMany()
                        .HasForeignKey("ConceptoNominaAgrupadorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.ConceptoNomina", "ConceptoNomina")
                        .WithMany()
                        .HasForeignKey("ConceptoNominaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.ConceptoNomina", b =>
                {
                    b.HasOne("ApiV3.Models.FuncionNomina", "FuncionNomina")
                        .WithMany()
                        .HasForeignKey("FuncionNominaId");
                });

            modelBuilder.Entity("ApiV3.Models.ConceptoNominaCuentaContable", b =>
                {
                    b.HasOne("ApiV3.Models.CentroCosto", "CentroCosto")
                        .WithMany()
                        .HasForeignKey("CentroCostoId");

                    b.HasOne("ApiV3.Models.ConceptoNomina", "ConceptoNomina")
                        .WithMany()
                        .HasForeignKey("ConceptoNominaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.CuentaContable", "CuentaContable")
                        .WithMany()
                        .HasForeignKey("CuentaContableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.ConceptoNominaElementoFormula", b =>
                {
                    b.HasOne("ApiV3.Models.ConceptoNomina", "ConceptoNomina")
                        .WithMany()
                        .HasForeignKey("ConceptoNominaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.ConceptoNominaTipoAdministradora", b =>
                {
                    b.HasOne("ApiV3.Models.ConceptoNomina", "ConceptoNomina")
                        .WithMany()
                        .HasForeignKey("ConceptoNominaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoAdministradora", "TipoAdministradora")
                        .WithMany()
                        .HasForeignKey("TipoAdministradoraId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.Contrato", b =>
                {
                    b.HasOne("ApiV3.Models.CargoDependencia", "CargoDependencia")
                        .WithMany()
                        .HasForeignKey("CargoDependenciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.CargoGrupo", "CargoGrupo")
                        .WithMany()
                        .HasForeignKey("CargoGrupoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.CausalTerminacion", "CausalTerminacion")
                        .WithMany()
                        .HasForeignKey("CausalTerminacionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApiV3.Models.CentroCosto", "CentroCosto")
                        .WithMany()
                        .HasForeignKey("CentroCostoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.CentroOperativo", "CentroOperativo")
                        .WithMany()
                        .HasForeignKey("CentroOperativoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.DivisionPoliticaNivel2", "DivisionPoliticaNivel2")
                        .WithMany()
                        .HasForeignKey("DivisionPoliticaNivel2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.EntidadFinanciera", "EntidadFinanciera")
                        .WithMany()
                        .HasForeignKey("EntidadFinancieraId");

                    b.HasOne("ApiV3.Models.FormaPago", "FormaPago")
                        .WithMany()
                        .HasForeignKey("FormaPagoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.Funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.GrupoNomina", "GrupoNomina")
                        .WithMany()
                        .HasForeignKey("GrupoNominaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.JornadaLaboral", "JornadaLaboral")
                        .WithMany()
                        .HasForeignKey("JornadaLaboralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoContrato", "TipoContrato")
                        .WithMany()
                        .HasForeignKey("TipoContratoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoCotizanteSubtipoCotizante", "TipoCotizanteSubtipoCotizante")
                        .WithMany()
                        .HasForeignKey("TipoCotizanteSubtipoCotizanteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoCuenta", "TipoCuenta")
                        .WithMany()
                        .HasForeignKey("TipoCuentaId");

                    b.HasOne("ApiV3.Models.TipoMoneda", "TipoMoneda")
                        .WithMany()
                        .HasForeignKey("TipoMonedaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoPeriodo", "TipoPeriodo")
                        .WithMany()
                        .HasForeignKey("TipoPeriodoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.ContratoAdministradora", b =>
                {
                    b.HasOne("ApiV3.Models.Administradora", "Administradora")
                        .WithMany()
                        .HasForeignKey("AdministradoraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.Contrato", "Contrato")
                        .WithMany("ContratoAdministradoras")
                        .HasForeignKey("ContratoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.ContratoCentroTrabajo", b =>
                {
                    b.HasOne("ApiV3.Models.CentroTrabajo", "CentroTrabajo")
                        .WithMany()
                        .HasForeignKey("CentroTrabajoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.Contrato", "Contrato")
                        .WithMany("ContratoCentroTrabajos")
                        .HasForeignKey("ContratoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.ContratoOtroSi", b =>
                {
                    b.HasOne("ApiV3.Models.CargoDependencia", "CargoDependencia")
                        .WithMany()
                        .HasForeignKey("CargoDependenciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.CentroOperativo", "CentroOperativo")
                        .WithMany()
                        .HasForeignKey("CentroOperativoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.Contrato", "Contrato")
                        .WithMany()
                        .HasForeignKey("ContratoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.DivisionPoliticaNivel2", "DivisionPoliticaNivel2")
                        .WithMany()
                        .HasForeignKey("DivisionPoliticaNivel2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoContrato", "TipoContrato")
                        .WithMany()
                        .HasForeignKey("TipoContratoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoOtroSi", "TipoOtroSi")
                        .WithMany()
                        .HasForeignKey("TipoOtroSiId");
                });

            modelBuilder.Entity("ApiV3.Models.CuentaBancaria", b =>
                {
                    b.HasOne("ApiV3.Models.EntidadFinanciera", "EntidadFinanciera")
                        .WithMany()
                        .HasForeignKey("EntidadFinancieraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoCuenta", "TipoCuenta")
                        .WithMany()
                        .HasForeignKey("TipoCuentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.DeduccionRetefuente", b =>
                {
                    b.HasOne("ApiV3.Models.AnnoVigencia", "AnnoVigencia")
                        .WithMany()
                        .HasForeignKey("AnnoVigenciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.Funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.DependenciaJerarquia", b =>
                {
                    b.HasOne("ApiV3.Models.Dependencia", "DependenciaHijo")
                        .WithMany("SoyHijoDe")
                        .HasForeignKey("DependenciaHijoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.Dependencia", "DependenciaPadre")
                        .WithMany("SoyPadreDe")
                        .HasForeignKey("DependenciaPadreId");
                });

            modelBuilder.Entity("ApiV3.Models.DivisionPoliticaNivel1", b =>
                {
                    b.HasOne("ApiV3.Models.Pais", "Pais")
                        .WithMany()
                        .HasForeignKey("PaisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.DivisionPoliticaNivel2", b =>
                {
                    b.HasOne("ApiV3.Models.DivisionPoliticaNivel1", "DivisionPoliticaNivel1")
                        .WithMany()
                        .HasForeignKey("DivisionPoliticaNivel1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.DocumentoFuncionario", b =>
                {
                    b.HasOne("ApiV3.Models.Funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoSoporte", "TipoSoporte")
                        .WithMany()
                        .HasForeignKey("TipoSoporteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.Embargo", b =>
                {
                    b.HasOne("ApiV3.Models.EntidadFinanciera", "EntidadFinanciera")
                        .WithMany()
                        .HasForeignKey("EntidadFinancieraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.Funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.Juzgado", "Juzgado")
                        .WithMany()
                        .HasForeignKey("JuzgadoId");

                    b.HasOne("ApiV3.Models.TipoEmbargo", "TipoEmbargo")
                        .WithMany()
                        .HasForeignKey("TipoEmbargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.EmbargoConceptoNomina", b =>
                {
                    b.HasOne("ApiV3.Models.ConceptoNomina", "ConceptoNomina")
                        .WithMany()
                        .HasForeignKey("ConceptoNominaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.Embargo", "Embargo")
                        .WithMany()
                        .HasForeignKey("EmbargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.EmbargoSubperiodo", b =>
                {
                    b.HasOne("ApiV3.Models.Embargo", "Embargo")
                        .WithMany("EmbargoSubperiodos")
                        .HasForeignKey("EmbargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.SubPeriodo", "SubPeriodo")
                        .WithMany()
                        .HasForeignKey("SubPeriodoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.EntidadFinanciera", b =>
                {
                    b.HasOne("ApiV3.Models.DivisionPoliticaNivel2", "DivisionPoliticaNivel2")
                        .WithMany()
                        .HasForeignKey("DivisionPoliticaNivel2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.ExperienciaLaboral", b =>
                {
                    b.HasOne("ApiV3.Models.Funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.FuncionVariable", b =>
                {
                    b.HasOne("ApiV3.Models.FuncionNomina", "FuncionNomina")
                        .WithMany()
                        .HasForeignKey("FuncionNominaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.VariableNomina", "VariableNomina")
                        .WithMany()
                        .HasForeignKey("VariableNominaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.Funcionario", b =>
                {
                    b.HasOne("ApiV3.Models.ClaseLibretaMilitar", "ClaseLibretaMilitar")
                        .WithMany()
                        .HasForeignKey("ClaseLibretaMilitarId");

                    b.HasOne("ApiV3.Models.DivisionPoliticaNivel2", "DivisionPoliticaNivel2ExpedicionDocumento")
                        .WithMany()
                        .HasForeignKey("DivisionPoliticaNivel2ExpedicionDocumentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.DivisionPoliticaNivel2", "DivisionPoliticaNivel2Origen")
                        .WithMany()
                        .HasForeignKey("DivisionPoliticaNivel2OrigenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.DivisionPoliticaNivel2", "DivisionPoliticaNivel2Residencia")
                        .WithMany()
                        .HasForeignKey("DivisionPoliticaNivel2ResidenciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.EstadoCivil", "EstadoCivil")
                        .WithMany()
                        .HasForeignKey("EstadoCivilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.LicenciaConduccion", "LicenciaConduccionA")
                        .WithMany()
                        .HasForeignKey("LicenciaConduccionAId");

                    b.HasOne("ApiV3.Models.LicenciaConduccion", "LicenciaConduccionB")
                        .WithMany()
                        .HasForeignKey("LicenciaConduccionBId");

                    b.HasOne("ApiV3.Models.LicenciaConduccion", "LicenciaConduccionC")
                        .WithMany()
                        .HasForeignKey("LicenciaConduccionCId");

                    b.HasOne("ApiV3.Models.Ocupacion", "Ocupacion")
                        .WithMany()
                        .HasForeignKey("OcupacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.Sexo", "Sexo")
                        .WithMany()
                        .HasForeignKey("SexoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoDocumento", "TipoDocumento")
                        .WithMany()
                        .HasForeignKey("TipoDocumentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoSangre", "TipoSangre")
                        .WithMany()
                        .HasForeignKey("TipoSangreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoVivienda", "TipoVivienda")
                        .WithMany()
                        .HasForeignKey("TipoViviendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.FuncionarioCentroCosto", b =>
                {
                    b.HasOne("ApiV3.Models.ActividadCentroCosto", "ActividadCentroCosto")
                        .WithMany()
                        .HasForeignKey("ActividadCentroCostoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.Funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.FuncionarioEstudio", b =>
                {
                    b.HasOne("ApiV3.Models.Funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.NivelEducativo", "NivelEducativo")
                        .WithMany()
                        .HasForeignKey("NivelEducativoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.Pais", "Pais")
                        .WithMany()
                        .HasForeignKey("PaisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.Profesion", "Profesion")
                        .WithMany()
                        .HasForeignKey("ProfesionId");
                });

            modelBuilder.Entity("ApiV3.Models.GastoViaje", b =>
                {
                    b.HasOne("ApiV3.Models.Funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoGastoViaje", "TipoGastoViaje")
                        .WithMany()
                        .HasForeignKey("TipoGastoViajeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.HojaDeVida", b =>
                {
                    b.HasOne("ApiV3.Models.ClaseLibretaMilitar", "ClaseLibretaMilitar")
                        .WithMany()
                        .HasForeignKey("ClaseLibretaMilitarId");

                    b.HasOne("ApiV3.Models.DivisionPoliticaNivel2", "DivisionPoliticaNivel2ExpedicionDocumento")
                        .WithMany()
                        .HasForeignKey("DivisionPoliticaNivel2ExpedicionDocumentoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApiV3.Models.DivisionPoliticaNivel2", "DivisionPoliticaNivel2Origen")
                        .WithMany()
                        .HasForeignKey("DivisionPoliticaNivel2OrigenId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApiV3.Models.DivisionPoliticaNivel2", "DivisionPoliticaNivel2Residencia")
                        .WithMany()
                        .HasForeignKey("DivisionPoliticaNivel2ResidenciaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApiV3.Models.EstadoCivil", "EstadoCivil")
                        .WithMany()
                        .HasForeignKey("EstadoCivilId");

                    b.HasOne("ApiV3.Models.LicenciaConduccion", "LicenciaConduccionA")
                        .WithMany()
                        .HasForeignKey("LicenciaConduccionAId");

                    b.HasOne("ApiV3.Models.LicenciaConduccion", "LicenciaConduccionB")
                        .WithMany()
                        .HasForeignKey("LicenciaConduccionBId");

                    b.HasOne("ApiV3.Models.LicenciaConduccion", "LicenciaConduccionC")
                        .WithMany()
                        .HasForeignKey("LicenciaConduccionCId");

                    b.HasOne("ApiV3.Models.Ocupacion", "Ocupacion")
                        .WithMany()
                        .HasForeignKey("OcupacionId");

                    b.HasOne("ApiV3.Models.Sexo", "Sexo")
                        .WithMany()
                        .HasForeignKey("SexoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoDocumento", "TipoDocumento")
                        .WithMany()
                        .HasForeignKey("TipoDocumentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoSangre", "TipoSangre")
                        .WithMany()
                        .HasForeignKey("TipoSangreId");

                    b.HasOne("ApiV3.Models.TipoVivienda", "TipoVivienda")
                        .WithMany()
                        .HasForeignKey("TipoViviendaId");
                });

            modelBuilder.Entity("ApiV3.Models.HojaDeVidaDocumento", b =>
                {
                    b.HasOne("ApiV3.Models.HojaDeVida", "HojaDeVida")
                        .WithMany()
                        .HasForeignKey("HojaDeVidaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoSoporte", "TipoSoporte")
                        .WithMany()
                        .HasForeignKey("TipoSoporteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.HojaDeVidaEstudio", b =>
                {
                    b.HasOne("ApiV3.Models.HojaDeVida", "HojaDeVida")
                        .WithMany()
                        .HasForeignKey("HojaDeVidaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.NivelEducativo", "NivelEducativo")
                        .WithMany()
                        .HasForeignKey("NivelEducativoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.Pais", "Pais")
                        .WithMany()
                        .HasForeignKey("PaisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.Profesion", "Profesion")
                        .WithMany()
                        .HasForeignKey("ProfesionId");
                });

            modelBuilder.Entity("ApiV3.Models.HojaDeVidaExperienciaLaboral", b =>
                {
                    b.HasOne("ApiV3.Models.HojaDeVida", "HojaDeVida")
                        .WithMany()
                        .HasForeignKey("HojaDeVidaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.HoraExtra", b =>
                {
                    b.HasOne("ApiV3.Models.Funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoHoraExtra", "TipoHoraExtra")
                        .WithMany()
                        .HasForeignKey("TipoHoraExtraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.InformacionBasica", b =>
                {
                    b.HasOne("ApiV3.Models.ActividadEconomica", "ActividadEconomica")
                        .WithMany()
                        .HasForeignKey("ActividadEconomicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.Administradora", "Arl")
                        .WithMany()
                        .HasForeignKey("ArlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.Cargo", "Cargo")
                        .WithMany()
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.ClaseAportanteTipoAportante", "ClaseAportanteTipoAportante")
                        .WithMany()
                        .HasForeignKey("ClaseAportanteTipoAportanteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.DivisionPoliticaNivel2", "DivisionPoliticaNivel2")
                        .WithMany()
                        .HasForeignKey("DivisionPoliticaNivel2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.NaturalezaJuridica", "NaturalezaJuridica")
                        .WithMany()
                        .HasForeignKey("NaturalezaJuridicaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.OperadorPago", "OperadorPago")
                        .WithMany()
                        .HasForeignKey("OperadorPagoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoContribuyente", "TipoContribuyente")
                        .WithMany()
                        .HasForeignKey("TipoContribuyenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoDocumento", "TipoDocumento")
                        .WithMany()
                        .HasForeignKey("TipoDocumentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoPersona", "TipoPersona")
                        .WithMany()
                        .HasForeignKey("TipoPersonaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.InformacionFamiliar", b =>
                {
                    b.HasOne("ApiV3.Models.DivisionPoliticaNivel2", "DivisionPoliticaNivel2")
                        .WithMany()
                        .HasForeignKey("DivisionPoliticaNivel2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.Funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.NivelEducativo", "NivelEducativo")
                        .WithMany()
                        .HasForeignKey("NivelEducativoId");

                    b.HasOne("ApiV3.Models.Parentesco", "Parentesco")
                        .WithMany()
                        .HasForeignKey("ParentescoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.Sexo", "Sexo")
                        .WithMany()
                        .HasForeignKey("SexoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoDocumento", "TipoDocumento")
                        .WithMany()
                        .HasForeignKey("TipoDocumentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.JornadaLaboralDia", b =>
                {
                    b.HasOne("ApiV3.Models.JornadaLaboral", "JornadaLaboral")
                        .WithMany("JornadaLaboralDias")
                        .HasForeignKey("JornadaLaboralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.Juzgado", b =>
                {
                    b.HasOne("ApiV3.Models.DivisionPoliticaNivel2", "DivisionPoliticaNivel2")
                        .WithMany()
                        .HasForeignKey("DivisionPoliticaNivel2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.Libranza", b =>
                {
                    b.HasOne("ApiV3.Models.EntidadFinanciera", "EntidadFinanciera")
                        .WithMany()
                        .HasForeignKey("EntidadFinancieraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.Funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.LibranzaSubperiodo", b =>
                {
                    b.HasOne("ApiV3.Models.Libranza", "Libranza")
                        .WithMany("LibranzaSubperiodos")
                        .HasForeignKey("LibranzaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.SubPeriodo", "SubPeriodo")
                        .WithMany()
                        .HasForeignKey("SubPeriodoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.LibroVacacion", b =>
                {
                    b.HasOne("ApiV3.Models.Contrato", "Contrato")
                        .WithMany()
                        .HasForeignKey("ContratoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.Nomina", b =>
                {
                    b.HasOne("ApiV3.Models.PeriodoContable", "PeriodoContable")
                        .WithMany()
                        .HasForeignKey("PeriodoContableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.SubPeriodo", "SubPeriodo")
                        .WithMany()
                        .HasForeignKey("SubperiodoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoLiquidacion", "TipoLiquidacion")
                        .WithMany()
                        .HasForeignKey("TipoLiquidacionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.NominaCentroCosto", b =>
                {
                    b.HasOne("ApiV3.Models.CentroCosto", "CentroCosto")
                        .WithMany()
                        .HasForeignKey("CentroCostoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.ConceptoNomina", "ConceptoNomina")
                        .WithMany()
                        .HasForeignKey("ConceptoNominaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.NominaFuncionario", "NominaFuncionario")
                        .WithMany()
                        .HasForeignKey("NominaFuncionarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.NominaContabilidad", b =>
                {
                    b.HasOne("ApiV3.Models.CentroCosto", "CentroCosto")
                        .WithMany()
                        .HasForeignKey("CentroCostoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.ConceptoNomina", "ConceptoNomina")
                        .WithMany()
                        .HasForeignKey("ConceptoNominaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApiV3.Models.CuentaContable", "CuentaContable")
                        .WithMany()
                        .HasForeignKey("CuentaContableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.NominaFuncionario", "NominaFuncionario")
                        .WithMany()
                        .HasForeignKey("NominaFuncionarioId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ApiV3.Models.NominaDetalle", b =>
                {
                    b.HasOne("ApiV3.Models.ConceptoNomina", "ConceptoNomina")
                        .WithMany()
                        .HasForeignKey("ConceptoNominaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.NominaFuenteNovedad", "NominaFuenteNovedad")
                        .WithMany()
                        .HasForeignKey("NominaFuenteNovedadId");

                    b.HasOne("ApiV3.Models.NominaFuncionario", "NominaFuncionario")
                        .WithMany()
                        .HasForeignKey("NominaFuncionarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.NominaFuncionario", b =>
                {
                    b.HasOne("ApiV3.Models.Funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.Nomina", "Nomina")
                        .WithMany()
                        .HasForeignKey("NominaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.NotificacionDestinatario", b =>
                {
                    b.HasOne("ApiV3.Models.Funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("FuncionarioId");

                    b.HasOne("ApiV3.Models.Notificacion", "Notificacion")
                        .WithMany()
                        .HasForeignKey("NotificacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.NotificacionDestinatarioLog", b =>
                {
                    b.HasOne("ApiV3.Models.Funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("FuncionarioId");

                    b.HasOne("ApiV3.Models.Notificacion", "Notificacion")
                        .WithMany()
                        .HasForeignKey("NotificacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.Novedad", b =>
                {
                    b.HasOne("ApiV3.Models.CategoriaNovedad", "CategoriaNovedad")
                        .WithMany()
                        .HasForeignKey("CategoriaNovedadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.Funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.NovedadSubperiodo", b =>
                {
                    b.HasOne("ApiV3.Models.Novedad", "Novedad")
                        .WithMany("NovedadSubperiodos")
                        .HasForeignKey("NovedadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.SubPeriodo", "Subperiodo")
                        .WithMany()
                        .HasForeignKey("SubperiodoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.ParametroGeneral", b =>
                {
                    b.HasOne("ApiV3.Models.AnnoVigencia", "AnnoVigencia")
                        .WithMany()
                        .HasForeignKey("AnnoVigenciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.CategoriaParametro", "CategoriaParametro")
                        .WithMany()
                        .HasForeignKey("CategoriaParametroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.ProrrogaAusentismo", b =>
                {
                    b.HasOne("ApiV3.Models.AusentismoFuncionario", "Ausentismo")
                        .WithMany("AusentismoDe")
                        .HasForeignKey("AusentismoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.AusentismoFuncionario", "Prorroga")
                        .WithMany("ProrrogaDe")
                        .HasForeignKey("ProrrogaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.RepresentanteEmpresa", b =>
                {
                    b.HasOne("ApiV3.Models.Cargo", "Cargo")
                        .WithMany()
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.Funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.RequisicionPersonal", b =>
                {
                    b.HasOne("ApiV3.Models.CargoDependencia", "CargoDependenciaSolicitado")
                        .WithMany()
                        .HasForeignKey("CargoDependenciaSolicitadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.CargoDependencia", "CargoDependenciaSolicitante")
                        .WithMany()
                        .HasForeignKey("CargoDependenciaSolicitanteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.CentroCosto", "CentroCosto")
                        .WithMany()
                        .HasForeignKey("CentroCostoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.CentroOperativo", "CentroOperativoSolicitado")
                        .WithMany()
                        .HasForeignKey("CentroOperativoSolicitadoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApiV3.Models.CentroOperativo", "CentroOperativoSolicitante")
                        .WithMany()
                        .HasForeignKey("CentroOperativoSolicitanteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApiV3.Models.DivisionPoliticaNivel2", "DivisionPoliticaNivel2")
                        .WithMany()
                        .HasForeignKey("DivisionPoliticaNivel2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.Funcionario", "FuncionarioAQuienReemplaza")
                        .WithMany()
                        .HasForeignKey("FuncionarioAQuienReemplazaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApiV3.Models.Funcionario", "FuncionarioSolicitante")
                        .WithMany()
                        .HasForeignKey("FuncionarioSolicitanteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.MotivoVacante", "MotivoVacante")
                        .WithMany()
                        .HasForeignKey("MotivoVacanteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoContrato", "TipoContrato")
                        .WithMany()
                        .HasForeignKey("TipoContratoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.SolicitudCesantia", b =>
                {
                    b.HasOne("ApiV3.Models.Funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.MotivoSolicitudCesantia", "MotivoSolicitudCesantia")
                        .WithMany()
                        .HasForeignKey("MotivoSolicitudCesantiaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.SolicitudPermiso", b =>
                {
                    b.HasOne("ApiV3.Models.Funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoAusentismo", "TipoAusentismo")
                        .WithMany()
                        .HasForeignKey("TipoAusentismoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.SolicitudVacacion", b =>
                {
                    b.HasOne("ApiV3.Models.Funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.LibroVacacion", "LibroVacaciones")
                        .WithMany()
                        .HasForeignKey("LibroVacacionesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.NominaFuncionario", "NominaFuncionario")
                        .WithMany()
                        .HasForeignKey("NominaFuncionarioId");
                });

            modelBuilder.Entity("ApiV3.Models.SolicitudVacacionesInterrupcion", b =>
                {
                    b.HasOne("ApiV3.Models.AusentismoFuncionario", "AusentismoFuncionario")
                        .WithMany()
                        .HasForeignKey("FuncionarioAusentismoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.SolicitudVacacion", "SolicitudVacacion")
                        .WithMany()
                        .HasForeignKey("SolicitudVacacionesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.SoporteSolicitudPermiso", b =>
                {
                    b.HasOne("ApiV3.Models.SolicitudPermiso", "SolicitudPermiso")
                        .WithMany()
                        .HasForeignKey("SolicitudPermisoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoSoporte", "TipoSoporte")
                        .WithMany()
                        .HasForeignKey("TipoSoporteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.SubPeriodo", b =>
                {
                    b.HasOne("ApiV3.Models.TipoPeriodo", "TipoPeriodo")
                        .WithMany()
                        .HasForeignKey("TipoPeriodoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.Sustituto", b =>
                {
                    b.HasOne("ApiV3.Models.Cargo", "CargoASustituir")
                        .WithMany("ASustituir")
                        .HasForeignKey("CargoASustituirId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.Cargo", "CargoSustituto")
                        .WithMany("Sustituto")
                        .HasForeignKey("CargoSustitutoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.CentroOperativo", "CentroOperativoASutituir")
                        .WithMany("CentroASustituir")
                        .HasForeignKey("CentroOperativoASutituirId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApiV3.Models.CentroOperativo", "CentroOperativoSustituto")
                        .WithMany("CentroSustituto")
                        .HasForeignKey("CentroOperativoSustitutoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ApiV3.Models.TareaProgramadaLog", b =>
                {
                    b.HasOne("ApiV3.Models.TareaProgramada", "TareaProgramada")
                        .WithMany()
                        .HasForeignKey("TareaProgramadaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.Tercero", b =>
                {
                    b.HasOne("ApiV3.Models.DivisionPoliticaNivel2", "DivisionPoliticaNivel2")
                        .WithMany()
                        .HasForeignKey("DivisionPoliticaNivel2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.EntidadFinanciera", "EntidadFinanciera")
                        .WithMany()
                        .HasForeignKey("EntidadFinancieraId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoCuenta", "TipoCuenta")
                        .WithMany()
                        .HasForeignKey("TipoCuentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.TipoAportanteTipoCotizante", b =>
                {
                    b.HasOne("ApiV3.Models.TipoAportante", "TipoAportante")
                        .WithMany()
                        .HasForeignKey("TipoAportanteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoCotizante", "TipoCotizante")
                        .WithMany()
                        .HasForeignKey("TipoCotizanteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.TipoAportanteTipoPlanilla", b =>
                {
                    b.HasOne("ApiV3.Models.TipoAportante", "TipoAportante")
                        .WithMany()
                        .HasForeignKey("TipoAportanteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoPlanilla", "TipoPlanilla")
                        .WithMany()
                        .HasForeignKey("TipoPlanillaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.TipoAusentismo", b =>
                {
                    b.HasOne("ApiV3.Models.ClaseAusentismo", "ClaseAusentismo")
                        .WithMany()
                        .HasForeignKey("ClaseAusentismoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.TipoAusentismoConceptoNomina", b =>
                {
                    b.HasOne("ApiV3.Models.ConceptoNomina", "ConceptoNomina")
                        .WithMany()
                        .HasForeignKey("ConceptoNominaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoAusentismo", "TipoAusentismo")
                        .WithMany()
                        .HasForeignKey("TipoAusentismoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.TipoBeneficio", b =>
                {
                    b.HasOne("ApiV3.Models.ConceptoNomina", "ConceptoNominaCalculo")
                        .WithMany()
                        .HasForeignKey("ConceptoNominaCalculoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApiV3.Models.ConceptoNomina", "ConceptoNominaDeduccion")
                        .WithMany()
                        .HasForeignKey("ConceptoNominaDeduccionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApiV3.Models.ConceptoNomina", "ConceptoNominaDevengo")
                        .WithMany()
                        .HasForeignKey("ConceptoNominaDevengoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ApiV3.Models.TipoBeneficioRequisito", b =>
                {
                    b.HasOne("ApiV3.Models.TipoBeneficio", "TipoBeneficio")
                        .WithMany()
                        .HasForeignKey("TipoBeneficioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoSoporte", "TipoSoporte")
                        .WithMany()
                        .HasForeignKey("TipoSoporteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.TipoCotizanteSubtipoCotizante", b =>
                {
                    b.HasOne("ApiV3.Models.SubtipoCotizante", "SubtipoCotizante")
                        .WithMany()
                        .HasForeignKey("SubtipoCotizanteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoCotizante", "TipoCotizante")
                        .WithMany()
                        .HasForeignKey("TipoCotizanteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.TipoCotizanteTipoPlanilla", b =>
                {
                    b.HasOne("ApiV3.Models.TipoCotizante", "TipoCotizante")
                        .WithMany()
                        .HasForeignKey("TipoCotizanteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoPlanilla", "TipoPlanilla")
                        .WithMany()
                        .HasForeignKey("TipoPlanillaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.TipoEmbargoConceptoNomina", b =>
                {
                    b.HasOne("ApiV3.Models.ConceptoNomina", "ConceptoNomina")
                        .WithMany()
                        .HasForeignKey("ConceptoNominaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoEmbargo", "TipoEmbargo")
                        .WithMany()
                        .HasForeignKey("TipoEmbargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.TipoGastoViaje", b =>
                {
                    b.HasOne("ApiV3.Models.ConceptoNomina", "ConceptoNomina")
                        .WithMany()
                        .HasForeignKey("ConceptoNominaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.TipoHoraExtra", b =>
                {
                    b.HasOne("ApiV3.Models.ConceptoNomina", "ConceptoNomina")
                        .WithMany()
                        .HasForeignKey("ConceptoNominaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.TipoLiquidacion", b =>
                {
                    b.HasOne("ApiV3.Models.ConceptoNomina", "ConceptoNominaAgrupador")
                        .WithMany()
                        .HasForeignKey("ConceptoNominaAgrupadorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoPeriodo", "TipoPeriodo")
                        .WithMany()
                        .HasForeignKey("TipoPeriodoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.TipoLiquidacionComprobante", b =>
                {
                    b.HasOne("ApiV3.Models.CentroCosto", "CentroCosto")
                        .WithMany()
                        .HasForeignKey("CentroCostoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.CuentaContable", "CuentaContable")
                        .WithMany()
                        .HasForeignKey("CuentaContableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoLiquidacion", "TipoLiquidacion")
                        .WithMany()
                        .HasForeignKey("TipoLiquidacionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.TipoLiquidacionConcepto", b =>
                {
                    b.HasOne("ApiV3.Models.ConceptoNomina", "ConceptoNomina")
                        .WithMany()
                        .HasForeignKey("ConceptoNominaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.SubPeriodo", "SubPeriodo")
                        .WithMany()
                        .HasForeignKey("SubPeriodoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiV3.Models.TipoContrato", "TipoContrato")
                        .WithMany()
                        .HasForeignKey("TipoContratoId");

                    b.HasOne("ApiV3.Models.TipoLiquidacion", "TipoLiquidacion")
                        .WithMany()
                        .HasForeignKey("TipoliquidacionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.TipoLiquidacionEstado", b =>
                {
                    b.HasOne("ApiV3.Models.TipoLiquidacion", "TipoLiquidacion")
                        .WithMany()
                        .HasForeignKey("TipoLiquidacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiV3.Models.TipoLiquidacionModulo", b =>
                {
                    b.HasOne("ApiV3.Models.TipoLiquidacion", "TipoLiquidacion")
                        .WithMany()
                        .HasForeignKey("TipoLiquidacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
